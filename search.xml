<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Docker java教程3.2: 使用JDK9 构建 Docker 镜像]]></title>
      <url>/2018/05/10/Docker%20java%E6%95%99%E7%A8%8B3.2_%20%E4%BD%BF%E7%94%A8JDK9%20%E6%9E%84%E5%BB%BA%20Docker%20%E9%95%9C%E5%83%8F/</url>
      <content type="html"><![CDATA[<p>目的: 这个章节解释了如何使用JDK9 创建Docker 镜像.</p>
<p><a href="https://github.com/docker/labs/blob/master/developer-tools/java/chapters/ch03-build-image.adoc" target="_blank" rel="external">之前的章节</a>中讲解了通常情况下Docker镜像的创建方法，这一章节在之前的基础上进行了扩展，主要关注JDK9 的特性.</p>
<a id="more"></a>
<p><a href="#1.1">使用JDK9 创建Docker镜像</a><br><a href="#1.2">使用JDK9 和 Alpine Linux 创建Docker镜像</a><br><a href="#1.3">使用JDK9  创建Docker镜像 和 Java应用</a><br><a href="#1.4">使用JDK9  为Docker镜像 和 Java应用 瘦身</a></p>
<h2 id="1.1">使用JDK9 创建Docker镜像</h2>

<p>创建一个目录，比如:<code>docker-jdk9</code>.</p>
<p>在那个目录,创建一个新的text文件<code>jdk-9-debian-slim.Dockerfile</code>. 内容如下:</p>
<pre><code># A JDK 9 with Debian slim
FROM debian:stable-slim
# Download from http://jdk.java.net/9/
# ADD http://download.java.net/java/GA/jdk9/9/binaries/openjdk-9_linux-x64_bin.tar.gz /opt
ADD openjdk-9_linux-x64_bin.tar.gz /opt
# Set up env variables
ENV JAVA_HOME=/opt/jdk-9
ENV PATH=$PATH:$JAVA_HOME/bin
CMD [&quot;jshell&quot;, &quot;-J-XX:+UnlockExperimentalVMOptions&quot;, \
               &quot;-J-XX:+UseCGroupMemoryLimitForHeap&quot;, \
               &quot;-R-XX:+UnlockExperimentalVMOptions&quot;, \
               &quot;-R-XX:+UseCGroupMemoryLimitForHeap&quot;]
</code></pre><p>这个镜像使用debian slim 作为基础镜像 并且安装对应 linxu x64 版本的OpenJDK(查看<a href="https://github.com/docker/labs/blob/master/developer-tools/java/chapters/ch01-setup.adoc" target="_blank" rel="external">设置章节</a>了解如何下载到当前目录.</p>
<p>镜像默认配置为运行 <code>jshell</code>，即 Java REPL(REPL — 交互式解释器环境。<br>R(read)、E(evaluate)、P(print)、L(loop)).了解更多<a href="https://docs.oracle.com/javase/9/jshell/introduction-jshell.htm" target="_blank" rel="external">关于JShell的介绍</a>.实验性的标志参数<code>-XX:+UseCGroupMemoryLimitForHeap</code> 传递到REPL进程(前端管理用户输入的进程以及后端管理编译的Java进程).这个选项会确保容器内存约束是有效的.</p>
<p>使用如下命令构建镜像:</p>
<pre><code>docker image build -t jdk-9-debian-slim -f jdk-9-debian-slim.Dockerfile .
</code></pre><p>使用<code>docker image ls</code>命令展示可用镜像:</p>
<pre><code>REPOSITORY              TAG                 IMAGE ID            CREATED             SIZE
jdk-9-debian-slim       latest              023f6999d94a        4 hours ago         400MB
debian                  stable-slim         d30525fb4ed2        4 days ago          55.3MB
</code></pre><p>JDK9 和 JDK8之间最大的不同被认为是大小的不同,因为JDK 9提供 Java modules,这一点我们将在之后的章节看到.</p>
<p>使用如下命令运行容器:</p>
<pre><code>docker container run -m=200M -it --rm jdk-9-debian-slim
</code></pre><p>输出如下:</p>
<pre><code>INFO: Created user preferences directory.
|  Welcome to JShell -- Version 9
|  For an introduction type: /help intro

jshell&gt;
</code></pre><p>在Java REPL 中输入如下表达式来查询Java进程的可用内存:</p>
<pre><code>Runtime.getRuntime().maxMemory() / (1 &lt;&lt; 20)  
</code></pre><p>输出:</p>
<pre><code>jshell&gt; Runtime.getRuntime().maxMemory() / (1 &lt;&lt; 20)
$1 ==&gt; 100
</code></pre><p>需要注意的是Java进程受限于内存约束(<code>--memory</code> of <code>docker container run</code>)并且在指定范围之外将不会为容器分配内存.</p>
<p>在未来的JDK版本将不再需要指定一个特殊标识(<code>-XX:+UnlockExperimentalVMOptions</code>)，一旦检测到哪个内存约束是稳定有效的，将会自动应用.</p>
<p>JDK9支持 set CUPs 约束(<code>--cpuset-cpus</code> of <code>docker container run</code>)但是当前不支持其它CPU约束，比如CPU shares.这是 OpenJDK project 正在进行的工作<a href="http://openjdk.java.net/jeps/8182070" target="_blank" rel="external">跟进</a>.</p>
<p>注意: CPU sets 和 内存约束同样被移植到 JDK 8 release 8u131 及其以上的版本.</p>
<p>输入<code>Ctrl</code> + <code>D</code>来退出<code>jshell</code>.</p>
<p>展示所有的JDK 9 Java 模块 分布 运行如下命令：</p>
<pre><code>docker container run -m=200M -it --rm jdk-9-debian-slim java --list-modules
</code></pre><p>输出如下:</p>
<pre><code>java.activation@9
java.base@9
java.compiler@9
java.corba@9
java.datatransfer@9
java.desktop@9
java.instrument@9
java.logging@9
java.management@9
java.management.rmi@9
java.naming@9
java.prefs@9
java.rmi@9
java.scripting@9
java.se@9
java.se.ee@9
java.security.jgss@9
java.security.sasl@9
java.smartcardio@9
java.sql@9
java.sql.rowset@9
java.transaction@9
java.xml@9
java.xml.bind@9
java.xml.crypto@9
java.xml.ws@9
java.xml.ws.annotation@9
jdk.accessibility@9
jdk.aot@9
jdk.attach@9
jdk.charsets@9
jdk.compiler@9
jdk.crypto.cryptoki@9
jdk.crypto.ec@9
jdk.dynalink@9
jdk.editpad@9
jdk.hotspot.agent@9
jdk.httpserver@9
jdk.incubator.httpclient@9
jdk.internal.ed@9
jdk.internal.jvmstat@9
jdk.internal.le@9
jdk.internal.opt@9
jdk.internal.vm.ci@9
jdk.internal.vm.compiler@9
jdk.jartool@9
jdk.javadoc@9
jdk.jcmd@9
jdk.jconsole@9
jdk.jdeps@9
jdk.jdi@9
jdk.jdwp.agent@9
jdk.jlink@9
jdk.jshell@9
jdk.jsobject@9
jdk.jstatd@9
jdk.localedata@9
jdk.management@9
jdk.management.agent@9
jdk.naming.dns@9
jdk.naming.rmi@9
jdk.net@9
jdk.pack@9
jdk.policytool@9
jdk.rmic@9
jdk.scripting.nashorn@9
jdk.scripting.nashorn.shell@9
jdk.sctp@9
jdk.security.auth@9
jdk.security.jgss@9
jdk.unsupported@9
jdk.xml.bind@9
jdk.xml.dom@9
jdk.xml.ws@9
jdk.zipfs@9  
</code></pre><p>总计75个模块：</p>
<pre><code>$ docker container run -m=200M -it --rm jdk-9-debian-slim java --list-modules | wc -l
  75
</code></pre><h2 id="1.2">使用JDK9 和 Alpine Linux 创建Docker镜像</h2>      

<p>与使用debian 作为基础镜像相比,使用Alpine Linux JDK 9 的先行版本能够与muslc 库兼容.</p>
<p>创建一个新的text文件 jdk-9-alpine.Dockerfile.使用如下内容:</p>
<pre><code># A JDK 9 with Alpine Linux
FROM alpine:3.6
# Add the musl-based JDK 9 distribution
RUN mkdir /opt
# Download from http://jdk.java.net/9/
# ADD http://download.java.net/java/jdk9-alpine/archive/181/binaries/jdk-9-ea+181_linux-x64-musl_bin.tar.gz
ADD jdk-9-ea+181_linux-x64-musl_bin.tar.gz /opt
# Set up env variables
ENV JAVA_HOME=/opt/jdk-9
ENV PATH=$PATH:$JAVA_HOME/bin
CMD [&quot;jshell&quot;, &quot;-J-XX:+UnlockExperimentalVMOptions&quot;, \
               &quot;-J-XX:+UseCGroupMemoryLimitForHeap&quot;, \
               &quot;-R-XX:+UnlockExperimentalVMOptions&quot;, \
               &quot;-R-XX:+UseCGroupMemoryLimitForHeap&quot;]
</code></pre><p>这个镜像将alpine 3.6 作为基础镜像并且安装相应版本的OpenJDK.(查看<a href="https://github.com/docker/labs/blob/master/developer-tools/java/chapters/ch01-setup.adoc" target="_blank" rel="external">环境变量设置章节</a>了解如何下载到当前目录.</p>
<p>这个镜像配置的方式与debian 基础镜像相同.</p>
<p>使用如下命令构建镜像:</p>
<pre><code>docker image build -t jdk-9-alpine -f jdk-9-alpine.Dockerfile .
</code></pre><p>使用<code>docker image ls</code>展示可用镜像:</p>
<pre><code>REPOSITORY              TAG                 IMAGE ID            CREATED             SIZE
jdk-9-debian-slim       latest              023f6999d94a        4 hours ago         400MB
jdk-9-alpine            latest              f5a57382f240        4 hours ago         356MB
debian                  stable-slim         d30525fb4ed2        4 days ago          55.3MB
alpine                  3.6                 7328f6f8b418        3 months ago        3.97MB
</code></pre><p>注意各个镜像大小的不同.Alpine Linux 被小心地设计为一个迷你型的可运行OS镜像.这个设计的的一部分开销在于可选择的标准库<a href="https://www.musl-libc.org/" target="_blank" rel="external">musl libc</a>,这个库与C标准库(libc)不兼容,因此JDK需要进行一些改造来运行Alpine Linux.这些改动已经被OpenJDK <a href="http://openjdk.java.net/projects/portola/" target="_blank" rel="external">Portola Project</a>提出.</p>
<h2 id="1.3">使用JDK9  创建Docker镜像 和 Java应用</h2>   

<p>Clone  GitHib 项目 <a href="https://github.com/PaulSandoz/helloworld-java-9" target="_blank" rel="external">https://github.com/PaulSandoz/helloworld-java-9</a> ,这个项目包含了一个Java基础项目示例:</p>
<p>进入 helloworld-java-9的目录并且在一个正在运行的Docker 容器 使用JDK9 构建这个项目:</p>
<pre><code>docker container run --volume $PWD:/helloworld-java-9 --workdir /helloworld-java-9 \
-it --rm openjdk:9-jdk-slim \
./mvnw package
</code></pre><p>(如果你在主机系统本地已经安装了JDK 9,你可以直接通过 <code>./mvnw package</code> 命令进行构建.)</p>
<p>在这个示例我们直接使用Docker hub 的 <code>openjdk:9-jdk-slim</code>,它已经配置了SSL证书,这样我们能直接通过maven wrapper tool 成功下载 maven 工具. 这个镜像是非官方的并且不以任何形式被 OpenJDK 项目支持(不像 JDK 9 distributions 在最近已经被依赖).相信在未来OpenJDK project发布的JDK版本，将会有root CA 证书(查看<a href="https://bugs.openjdk.java.net/browse/JDK-8189131" target="_blank" rel="external">issue JDK-8189131</a>)</p>
<p>使用文件 helloworld-jdk-9.Dockerfile 来将这个应用构建为Docker 镜像.<br>文件内容如下:</p>
<pre><code># Hello world application with JDK 9 and Debian slim
FROM jdk-9-debian-slim
COPY target/helloworld-1.0-SNAPSHOT.jar /opt/helloworld/helloworld-1.0-SNAPSHOT.jar
# Set up env variables
CMD java -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap \
  -cp /opt/helloworld/helloworld-1.0-SNAPSHOT.jar org.examples.java.App
</code></pre><p>基于<code>jdk-9-debian-slim</code>构建一个包含示例Java应用的Docker 镜像:</p>
<pre><code>docker image build -t helloworld-jdk-9 -f helloworld-jdk-9.Dockerfile .
</code></pre><p>使用<code>docker image ls</code>命令展示可用镜像:</p>
<pre><code>REPOSITORY              TAG                 IMAGE ID            CREATED              SIZE
helloworld-jdk-9        latest              eb0539e9529a        19 seconds ago       400MB
jdk-9-debian-slim       latest              023f6999d94a        5 hours ago          400MB
jdk-9-alpine            latest              f5a57382f240        5 hours ago          356MB
openjdk                 9-jdk-slim          6dca67f4790e        3 days ago           372MB
debian                  stable-slim         d30525fb4ed2        4 days ago           55.3MB
alpine                  3.6                 7328f6f8b418        3 months ago         3.97MB
</code></pre><p>注意下 应用镜像 <code>helloworld-jdk-9</code>究竟有多大.</p>
<p>运行<code>jdeps</code>工具来查看应用所依赖的模块:</p>
<pre><code>docker container run -it --rm helloworld-jdk-9 jdeps --list-deps /opt/helloworld/helloworld-1.0-SNAPSHOT.jar
</code></pre><p>可以观察到应用只依赖<code>java.base</code>模块.</p>
<h2 id="1.4">使用JDK9  为Docker镜像 和 Java应用 瘦身</h2>   

<p>这个Java应用相当简单并且只使用了JDK 9 发行版本的少量函数,特别是这个应用使用函数只依赖<code>java.base</code>模块.我们可以创建一个只包含<code>java.base</code> 模块的自定义Java runtime 并且包含到 应用的Docker 镜像当中.</p>
<p>创建一个只包含<code>java.base</code>模块的自定义Java runtime:</p>
<pre><code>docker container run --rm \
  --volume $PWD:/out \
  jdk-9-debian-slim \
  jlink --module-path /opt/jdk-9/jmods \
    --verbose \
    --add-modules java.base \
    --compress 2 \
    --no-header-files \
    --output /out/target/openjdk-9-base_linux-x64
</code></pre><p><a href="https://github.com/PaulSandoz/helloworld-java-9" target="_blank" rel="external">helloworld-java-9</a>项目中已存在对应的脚本.</p>
<p>JDK 9 工具 <code>jlink</code> 一般用来创建自定义 Java 运行时.了解更多关于jlink点击<a href="https://docs.oracle.com/javase/9/tools/jlink.htm" target="_blank" rel="external">Tools Reference</a>.<br>这个工具在模块所属的包含JDK 9 及其目录的容器当中执行,/opt/jdk-9/jmods,定义的是模块的路径.<br>This command exists as create-minimal-java-runtime.sh script in the repo earlier checked out from helloworld-java-9.只有<code>java.base</code>模块被选中.</p>
<p>自定义runtime 被输出到目标路径:</p>
<pre><code>$ du -k target/openjdk-9-base_linux-x64/
24      target/openjdk-9-base_linux-x64//bin
12      target/openjdk-9-base_linux-x64//conf/security/policy/limited
8       target/openjdk-9-base_linux-x64//conf/security/policy/unlimited
24      target/openjdk-9-base_linux-x64//conf/security/policy
68      target/openjdk-9-base_linux-x64//conf/security
76      target/openjdk-9-base_linux-x64//conf
44      target/openjdk-9-base_linux-x64//legal/java.base
44      target/openjdk-9-base_linux-x64//legal
72      target/openjdk-9-base_linux-x64//lib/jli
16      target/openjdk-9-base_linux-x64//lib/security
19824   target/openjdk-9-base_linux-x64//lib/server
31656   target/openjdk-9-base_linux-x64//lib
31804   target/openjdk-9-base_linux-x64/  
</code></pre><p>使用<code>helloworld-jdk-9-base.Dockerfile</code>文件构建Docker 镜像.文件内容如下:</p>
<pre><code># Hello world application with custom Java runtime with just the base module and Debian slim
FROM debian:stable-slim
COPY target/openjdk-9-base_linux-x64 /opt/jdk-9
COPY target/helloworld-1.0-SNAPSHOT.jar /opt/helloworld/helloworld-1.0-SNAPSHOT.jar
# Set up env variables
ENV JAVA_HOME=/opt/jdk-9
ENV PATH=$PATH:$JAVA_HOME/bin
CMD java -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap \
  -cp /opt/helloworld/helloworld-1.0-SNAPSHOT.jar org.examples.java.App
</code></pre><p>以 debian:stable-slim作为基础镜像，创建示例Java应用的Docker镜像:</p>
<pre><code>docker image build -t helloworld-jdk-9-base -f helloworld-jdk-9-base.Dockerfile .  
</code></pre><p>再度展示可用镜像L<code>docker image ls</code>:    </p>
<pre><code>REPOSITORY              TAG                 IMAGE ID            CREATED             SIZE
helloworld-jdk-9-base   latest              7052483fdb77        24 seconds ago      87.7MB
helloworld-jdk9         latest              eb0539e9529a        17 minutes ago      400MB
jdk-9-debian-slim       latest              023f6999d94a        5 hours ago         400MB
jdk-9-alpine            latest              f5a57382f240        5 hours ago         356MB
openjdk                 9-jdk-slim          6dca67f4790e        3 days ago          372MB
debian                  stable-slim         d30525fb4ed2        4 days ago          55.3MB
alpine                  3.6                 7328f6f8b418        3 months ago        3.97MB
[source, text]
</code></pre><p><code>helloworld-jdk-9-base</code> 体积要小得多，并且如果Alpine Linux 使用Debian Slim,体积还能进一步缩小.</p>
<p>一个真实的应用会依赖更多的JDK 模块，但是仍然有可能通过只依赖必须模块的方式来减小Java runtime的体积(比如很多应用就并不需要Corba 或者RMI的编译工具模块).</p>
]]></content>
      
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker Java教程5：使用Docker Compose 实现多容器应用]]></title>
      <url>/2018/05/10/Docker%20Java%E6%95%99%E7%A8%8B5_%E4%BD%BF%E7%94%A8Docker%20Compose%20%E5%AE%9E%E7%8E%B0%E5%A4%9A%E5%AE%B9%E5%99%A8%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="1.1"> 什么是Docker Compose？</h2>

<p>Docker Compose 是一个使用Docker来定义和运行复杂应用的工具.<br>通过Compose,你能在一个单独的文件中定义一个多容器应用,通过一个命令就能完成所有事情，并使它们运行起来.</p>
<p>— github.com/docker/compose</p>
<a id="more"></a>
<p><a href="#1.1">什么是Docker Compose</a><br><a href="#1.2">配置文件</a><br><a href="#1.3">启动应用</a><br><a href="#1.4">验证应用</a><br><a href="#1.5">停止应用</a></p>
<p>一个使用Docker容器技术的应用一般都会包含多个容器.通过Docker Compose,没有必要去写shell 脚本来启动你的容器.所有的容器都通过services定义在一个配置文件当中,然后docker-compose 脚本就可以用来启动，停止，或者重启应用，这样一来，所有的容器就集成在service当中，而所有的services则被包含在应用当中.<br>完整的命令列表如下所示:</p>
<table>
<thead>
<tr>
<th style="text-align:center">Command</th>
<th style="text-align:center">Purpose</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">build</td>
<td style="text-align:center">Build or rebuild services</td>
</tr>
<tr>
<td style="text-align:center">help</td>
<td style="text-align:center">Get help on a command</td>
</tr>
<tr>
<td style="text-align:center">kill</td>
<td style="text-align:center">Kill containers</td>
</tr>
<tr>
<td style="text-align:center">logs</td>
<td style="text-align:center">View output from containers</td>
</tr>
<tr>
<td style="text-align:center">port</td>
<td style="text-align:center">Print the public port for a port binding</td>
</tr>
<tr>
<td style="text-align:center">ps</td>
<td style="text-align:center">List containers</td>
</tr>
<tr>
<td style="text-align:center">pull</td>
<td style="text-align:center">Pulls service images</td>
</tr>
<tr>
<td style="text-align:center">restart</td>
<td style="text-align:center">Restart services</td>
</tr>
<tr>
<td style="text-align:center">rm</td>
<td style="text-align:center">Remove stopped containers</td>
</tr>
<tr>
<td style="text-align:center">run</td>
<td style="text-align:center">Run a one-off command</td>
</tr>
<tr>
<td style="text-align:center">scale</td>
<td style="text-align:center">Set number of containers for a service</td>
</tr>
<tr>
<td style="text-align:center">start</td>
<td style="text-align:center">Start services</td>
</tr>
<tr>
<td style="text-align:center">stop</td>
<td style="text-align:center">Stop services</td>
</tr>
<tr>
<td style="text-align:center">up</td>
<td style="text-align:center">Create and start containers</td>
</tr>
</tbody>
</table>
<p>这个章节使用的应用是一个与数据库交互的Java EE应用.<br>这个应用发布一个REST节点，可以通过<code>curl</code>调用.它通过<a href="http://wildfly-swarm.io/" target="_blank" rel="external">WildFly Swarm</a>部署，并且与MySQL数据库进行交互.</p>
<p>WildFly Swarm 和 MySQL 将会在两个隔离的容器当中运行,因此这是一个多容器应用.</p>
<h2 id="1.2">配置文件</h2>

<p>Docker Compose 的入口是一个Compose 文件,通常命名为<code>docker-compose.yml</code>.创建一个新目录<code>javaee</code>,在该目录创建一个<code>docker-compose.yml</code>文件，内容如下:</p>
<pre><code>version: &apos;3.3&apos;
services:
  db:
    container_name: db
    image: mysql:8
    environment:
      MYSQL_DATABASE: employees
      MYSQL_USER: mysql
      MYSQL_PASSWORD: mysql
      MYSQL_ROOT_PASSWORD: supersecret
    ports:
      - 3306:3306
  web:
    image: arungupta/docker-javaee:dockerconeu17
    ports:
      - 8080:8080
      - 9990:9990
    depends_on:
      - db
</code></pre><p>在这个Compose文件当中:</p>
<ol>
<li><p>在这个Compose 文件当中定义了两个services，分别是 db 和 web.</p>
</li>
<li><p>每个service的镜像名称通过image 属性进行定义.<br>MYSQL_ROOT_PASSWORD is mandatory and specifies the password that will be set for the MySQL root superuser account.</p>
</li>
<li><p>mysql:8 镜像 启动 MySQL 服务器.</p>
</li>
<li><p>环境变量属性定义环境变量来初始化MySQL 服务器.</p>
<ul>
<li>MYSQL_DATABASE 允许你在镜像启动的时候指定被创建的数据库的名称.</li>
<li>MYSQL_USER 和 MYSQL_PASSWORD 用来创建一个新用户并且赋予那个用户的密码.这个用户将会赋予MYSQL_DATABASE属性指定的数据库的超级管理员权限.</li>
<li>MYSQL_ROOT_PASSWORD 是强制必填项,并且将会设置为MySQL root 超级用户账号的密码.</li>
</ul>
</li>
<li><p>Java EE 应用 使用的 <code>db</code> 服务通过 <code>connection-url</code> 进行指定<a href="https://github.com/arun-gupta/docker-javaee/blob/master/employees/src/main/resources/project-defaults.yml/" target="_blank" rel="external">https://github.com/arun-gupta/docker-javaee/blob/master/employees/src/main/resources/project-defaults.yml/</a>.</p>
</li>
<li><p>arungupta/docker-javaee:dockerconeu17 image 启动 WildFly Swarm 应用服务器. 它包含从 <a href="https://github.com/arun-gupta/docker-javaee" target="_blank" rel="external">https://github.com/arun-gupta/docker-javaee</a> 构建的Java EE 应用. 如果你想要构建自己的镜像可以Clone这个项目.</p>
</li>
<li><p>端口跳转通过<code>ports</code>属性来完成.</p>
</li>
<li><p><code>depends_on</code> 属性允许表达services之间的依赖关系.在这个例子中,MySQL将会在WildFly之前启动. </p>
</li>
</ol>
<h2 id="1.3">启动应用</h2>

<p>在这个应用当中的所有services都能在detached模式被启动，通过以下命令:</p>
<pre><code>docker-compose up -d
</code></pre><p>一个可替代的Compose文件名称能通过<code>-f</code>标志来指定.</p>
<p>一个可选的compose文件存在的目录能够通过<code>-p</code>标志来指定.</p>
<p>输出如下:</p>
<pre><code>docker-compose up -d
Creating network &quot;javaee_default&quot; with the default driver
Creating db ...
Creating db ... done
Creating javaee_web_1 ...
Creating javaee_web_1 ... done
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker java教程3.1: 构建一个Docker 镜像]]></title>
      <url>/2018/05/10/Docker%20java%E6%95%99%E7%A8%8B3.1_%20%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AADocker%20%E9%95%9C%E5%83%8F/</url>
      <content type="html"><![CDATA[<p><a href="#1.1">Dockerfile</a><br><a href="#1.2">创建你的首个镜像</a><br><a href="#1.3">使用java创建你的首个镜像</a></p>
<ul>
<li><a href="#1.3.1">创建一个普通的java应用</a></li>
<li><a href="#1.3.2">作为Docker镜像打包和运行Java应用</a></li>
<li><a href="#1.3.3">使用Docker Maven Plugin 打包和运行Java应用</a></li>
</ul>
<p><a href="#1.4">Dockerfile 命令设计模式</a></p>
<ul>
<li><a href="#1.4.1">CMD 和 ENTRYPOINT 之间的不同</a></li>
<li><a href="#1.4.2">ADD 和 COPY 之间的不同</a></li>
<li><a href="#1.4.3">导入和导出镜像</a></li>
</ul>
<a id="more"></a>
<h2 id="1.1">Dockerfile</h2>

<p>Docker 构建镜像是通过读取Dockerfile 文件的指令.Dockerfile 是一个包含了所有用户能在命令行执行用以装配镜像的命令的文本文件.<code>docker image build</code>命令使用这个文件并且成功执行所有的命令来创建镜像.</p>
<p><code>build</code> 命令在镜像创建期间同样传递一个上下文.这个上下文可以是你本地文件系统的路径或者一个git仓库的URL地址.</p>
<p><strong>Dockerfile is usually called Dockerfile.</strong><br>完全的命令一览查看以下链接  <a href="https://docs.docker.com/reference/builder/" target="_blank" rel="external">https://docs.docker.com/reference/builder/</a>. 常见命令见下文:</p>
<p>Table 1. Dockerfile 常见命令</p>
<table>
<thead>
<tr>
<th style="text-align:center">Command</th>
<th style="text-align:center">Purpose</th>
<th style="text-align:center">Example</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">FROM</td>
<td style="text-align:center">First non-comment instruction in Dockerfile</td>
<td style="text-align:center"><code>FROM ubuntu</code></td>
</tr>
<tr>
<td style="text-align:center">COPY</td>
<td style="text-align:center">Copies mulitple source files from the context to the file system of the container at the specified path</td>
<td style="text-align:center"><code>COPY .bash_profile /home</code></td>
</tr>
<tr>
<td style="text-align:center">ENV</td>
<td style="text-align:center">Sets the environment variable</td>
<td style="text-align:center"><code>ENV HOSTNAME=test</code></td>
</tr>
<tr>
<td style="text-align:center">RUN</td>
<td style="text-align:center">Executes a command</td>
<td style="text-align:center"><code>RUN apt-get update</code></td>
</tr>
<tr>
<td style="text-align:center">CMD</td>
<td style="text-align:center">Defaults for an executing container</td>
<td style="text-align:center"><code>CMD [&quot;/bin/echo&quot;, &quot;hello world&quot;]</code></td>
</tr>
<tr>
<td style="text-align:center">EXPOSE</td>
<td style="text-align:center">Informs the network ports that the container will listen on</td>
<td style="text-align:center"><code>EXPOSE 8093</code></td>
</tr>
</tbody>
</table>
<h2 id="1.2">创建你的首个镜像</h2>

<p>创建一个新目录 <code>hellodocker</code>.</p>
<p>在这个目录,创建一个新的Dockerfile 文件.使用以下内容:</p>
<pre><code>FROM ubuntu:latest

CMD [&quot;/bin/echo&quot;, &quot;hello world&quot;]
</code></pre><p>这个镜像使用 <code>ubuntu</code> 作为基础镜像.<code>CMD</code> 命令定义需要运行的命令.<br>它提供了一个不同的入口 <code>/bin/echo</code> 并且提供参数 “hello world”.</p>
<p>使用以下命令构建镜像:<br>    docker image build . -t helloworld</p>
<p><code>.</code> 在这个命令当中是作为 <code>docker image build</code> 的上下文. <code>-t</code> 添加标志到镜像当中.</p>
<p>输出如下:</p>
<pre><code>Sending build context to Docker daemon  2.048kB
Step 1/2 : FROM ubuntu:latest
latest: Pulling from library/ubuntu
9fb6c798fa41: Pull complete
3b61febd4aef: Pull complete
9d99b9777eb0: Pull complete
d010c8cf75d7: Pull complete
7fac07fb303e: Pull complete
Digest: sha256:31371c117d65387be2640b8254464102c36c4e23d2abe1f6f4667e47716483f1
Status: Downloaded newer image for ubuntu:latest
 ---&gt; 2d696327ab2e
Step 2/2 : CMD /bin/echo hello world
 ---&gt; Running in 9356a508590c
 ---&gt; e61f88f3a0f7
Removing intermediate container 9356a508590c
Successfully built e61f88f3a0f7
Successfully tagged helloworld:latest
</code></pre><p>使用<code>docker image ls</code>命令展示可用的镜像:</p>
<pre><code>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
helloworld          latest              e61f88f3a0f7        3 minutes ago       122MB
ubuntu              latest              2d696327ab2e        4 days ago          122MB
</code></pre><p>使用以下命令运行容器:    </p>
<pre><code>docker container run helloworld
</code></pre><p>命令输出如下:</p>
<pre><code>hello world
</code></pre><p>如果你没有看到期望的输出,检查你的Dockerfille文件确保内容与上文所示一致.再次构建镜像并且运行它.</p>
<p>在<code>Dockerfile</code>文件中改变基础镜像，从<code>ubuntu</code> 修改为<code>busybox</code>.<br>再次构建镜像:    </p>
<pre><code>docker image build -t helloworld:2 .
</code></pre><p>并且通过<code>docker image ls</code>命令查看镜像:</p>
<pre><code>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
helloworld          2                   7fbedda27c66        3 seconds ago       1.13MB
helloworld          latest              e61f88f3a0f7        5 minutes ago       122MB
ubuntu              latest              2d696327ab2e        4 days ago          122MB
busybox             latest              54511612f1c4        9 days ago          1.13MB  
</code></pre><p><code>helloworld:2</code> 是一种定义镜像名称的格式,通过<code>:</code>分割标识/版本号.</p>
<h2 id="1.3">使用Java创建你的首个镜像</h2>

<h3 id="1.3.1">创建你的首个镜像</h3>

<p><strong>Note:</strong></p>
<p>如果你正在运行 OpenJDK 9<br>If you are running OpenJDK 9, <code>mvn package</code> 可能会失败:</p>
<pre><code>[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.1:compile (default-compile) on project helloworld: Compilation failure: Compilation failure:
[ERROR] Source option 1.5 is no longer supported. Use 1.6 or later.
[ERROR] Target option 1.5 is no longer supported. Use 1.6 or later.
</code></pre><p>因为一些Java 5的支持在JDK9中被<a href="http://openjdk.java.net/jeps/182" target="_blank" rel="external">废弃</a>了.<br>你可以通过添加以下属性配置:</p>
<pre><code>&lt;properties&gt;
  &lt;maven.compiler.source&gt;1.6&lt;/maven.compiler.source&gt;
  &lt;maven.compiler.target&gt;1.6&lt;/maven.compiler.target&gt;
&lt;/properties&gt;
</code></pre><p>到生成的pom.xml中用1.6来代替.详情查看 <a href="https://github.com/docker/labs/blob/master/developer-tools/java/chapters/chapters/ch03-build-image-java-9.adoc" target="_blank" rel="external">用Java 9构建Docker 镜像章节</a>.</p>
<p>创建一个java项目:</p>
<pre><code>mvn archetype:generate -DgroupId=org.examples.java -DartifactId=helloworld -DinteractiveMode=false
</code></pre><p>构建项目:</p>
<pre><code>cd helloworld
mvn package
</code></pre><p>运行java应用:</p>
<pre><code>java -cp target/helloworld-1.0-SNAPSHOT.jar org.examples.java.App
</code></pre><p>输出如下:</p>
<pre><code>Hello World!
</code></pre><p>接下来将这个应用打包成docker镜像</p>
<p><strong>Java Docker 镜像</strong></p>
<p>以一种交互性的方式运行 OpenJDK 容器:</p>
<pre><code>docker container run -it openjdk
</code></pre><p>这将会在容器当中打开一个终端窗口.检查Java的版本:</p>
<pre><code>root@8d0af9da5258:/# java -version
openjdk version &quot;1.8.0_141&quot;
OpenJDK Runtime Environment (build 1.8.0_141-8u141-b15-1~deb9u1-b15)
OpenJDK 64-Bit Server VM (build 25.141-b15, mixed mode)
</code></pre><p>通过在容器 shell中输入<code>exit</code> 退出容器.</p>
<h3 id="1.3.2">作为Docker 镜像打包和运行Java应用</h3>    

<p>在<code>helloworld</code>目录创建一个新的Dockerfile文件并且使用以下内容:</p>
<pre><code>FROM openjdk:latest

COPY target/helloworld-1.0-SNAPSHOT.jar /usr/src/helloworld-1.0-SNAPSHOT.jar

CMD java -cp /usr/src/helloworld-1.0-SNAPSHOT.jar org.examples.java.App
</code></pre><p>构建镜像:</p>
<pre><code>docker image build -t hello-java:latest .
</code></pre><p>运行镜像:</p>
<pre><code>docker container run hello-java:latest
</code></pre><p>输出如下:</p>
<pre><code>Hello World!
</code></pre><h3 id="1.3.2">使用Docker Maven Plugin打包和运行Java应用</h3>   

<p><a href="https://github.com/fabric8io/docker-maven-plugin" target="_blank" rel="external">Docker Maven Plugin</a> 允许你通过Maven管理Docker 镜像和容器.<br>allows you to manage Docker images and containers using Maven. 它通过预定义目标来完成相应操作:</p>
<table>
<thead>
<tr>
<th style="text-align:center">Goal</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">docker:build</td>
<td style="text-align:center">Build images</td>
</tr>
<tr>
<td style="text-align:center">docker:start</td>
<td style="text-align:center">Create and start containers</td>
</tr>
<tr>
<td style="text-align:center">docker:stop</td>
<td style="text-align:center">Stop and destroy containers</td>
</tr>
<tr>
<td style="text-align:center">docker:push</td>
<td style="text-align:center">Push images to a registry</td>
</tr>
<tr>
<td style="text-align:center">docker:remove</td>
<td style="text-align:center">Remove images from local docker host</td>
</tr>
<tr>
<td style="text-align:center">docker:logs</td>
<td style="text-align:center">Show container logs</td>
</tr>
</tbody>
</table>
<p>完整的目标列表如下: <a href="https://github.com/fabric8io/docker-maven-plugin" target="_blank" rel="external">https://github.com/fabric8io/docker-maven-plugin</a>.</p>
<p>示例下载地址: <a href="https://github.com/arun-gupta/docker-java-sample/" target="_blank" rel="external">https://github.com/arun-gupta/docker-java-sample/</a>.</p>
<p>创建Docker 镜像:</p>
<pre><code>mvn -f docker-java-sample/pom.xml package -Pdocker
</code></pre><p>输出如下:    </p>
<pre><code>[INFO] Copying files to /Users/argu/workspaces/docker-java-sample/target/docker/hellojava/build/maven
[INFO] Building tar: /Users/argu/workspaces/docker-java-sample/target/docker/hellojava/tmp/docker-build.tar
[INFO] DOCKER&gt; [hellojava:latest]: Created docker-build.tar in 87 milliseconds
[INFO] DOCKER&gt; [hellojava:latest]: Built image sha256:6f815
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
</code></pre><p>使用<code>docker image ls | grep hello-java</code>命令查看镜像列表:    </p>
<pre><code>hello-java  latest  ea64a9f5011e   5 seconds ago       643 MB
</code></pre><p>运行Docker容器:</p>
<pre><code>mvn -f docker-java-sample/pom.xml install -Pdocker
</code></pre><p>输出如下:</p>
<pre><code>[INFO] DOCKER&gt; [hellojava:latest]: Start container 30a08791eedb
30a087&gt; Hello World!
[INFO] DOCKER&gt; [hellojava:latest]: Waited on log out &apos;Hello World!&apos; 510 ms
</code></pre><p>使用 <code>java</code> CLI 或者使用 Docker 容器使用 <code>docker container run</code> 命令来运行这个Java应用，输出都是相似的.</p>
<p>容器运行在最顶层的位置.使用 <code>Ctrl</code> + <code>C</code> 来终止容器并且返回到终端.</p>
<p>在项目中想要允许或禁止 Docker packaging 和 running ,只需要改变一处地方.在<code>pom.xml</code>配置文件中添加如下Maven配置:</p>
<pre><code>&lt;profiles&gt;
    &lt;profile&gt;
        &lt;id&gt;docker&lt;/id&gt;
        &lt;build&gt;
            &lt;plugins&gt;
                &lt;plugin&gt;
                    &lt;groupId&gt;io.fabric8&lt;/groupId&gt;
                    &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;
                    &lt;version&gt;0.22.1&lt;/version&gt;
                    &lt;configuration&gt;
                        &lt;images&gt;
                            &lt;image&gt;
                                &lt;name&gt;hello-java&lt;/name&gt;
                                &lt;build&gt;
                                    &lt;from&gt;openjdk:latest&lt;/from&gt;
                                    &lt;assembly&gt;
                                        &lt;descriptorRef&gt;artifact&lt;/descriptorRef&gt;
                                    &lt;/assembly&gt;
                                    &lt;cmd&gt;java -cp maven/${project.name}-${project.version}.jar org.examples.java.App&lt;/cmd&gt;
                                &lt;/build&gt;
                                &lt;run&gt;
                                    &lt;wait&gt;
                                        &lt;log&gt;Hello World!&lt;/log&gt;
                                    &lt;/wait&gt;
                                &lt;/run&gt;
                            &lt;/image&gt;
                        &lt;/images&gt;
                    &lt;/configuration&gt;
                    &lt;executions&gt;
                        &lt;execution&gt;
                            &lt;id&gt;docker:build&lt;/id&gt;
                            &lt;phase&gt;package&lt;/phase&gt;
                            &lt;goals&gt;
                                &lt;goal&gt;build&lt;/goal&gt;
                            &lt;/goals&gt;
                        &lt;/execution&gt;
                        &lt;execution&gt;
                            &lt;id&gt;docker:start&lt;/id&gt;
                            &lt;phase&gt;install&lt;/phase&gt;
                            &lt;goals&gt;
                                &lt;goal&gt;start&lt;/goal&gt;
                                &lt;goal&gt;logs&lt;/goal&gt;
                            &lt;/goals&gt;
                        &lt;/execution&gt;
                    &lt;/executions&gt;
                &lt;/plugin&gt;
            &lt;/plugins&gt;
        &lt;/build&gt;
    &lt;/profile&gt;
&lt;/profiles&gt;
</code></pre><h2 id="1.4">Dockerfile 命令设计模式</h2>

<h3 id="1.4.1">CMD 和 ENTRYPOINT 之间的不同</h3>

<p><code>CMD</code> 在大多数情况下都能正常工作.</p>
<p>容器默认的入口是<code>/bin/sh</code>,即默认的shell.</p>
<p>使用命令<code>docker container run -it ubuntu</code> 来运行容器并且启动默认shell.输出如下:</p>
<pre><code>&gt; docker container run -it ubuntu
root@88976ddee107:/#
</code></pre><p><code>ENTRYPOINT</code> 允许使用其它命令重写 entry point ，设置进行自定义.例如,一个容器能这样启动:</p>
<pre><code>&gt; docker container run -it --entrypoint=/bin/cat ubuntu /etc/passwd
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
. . .
</code></pre><p>这个容器重写了容器的 entry point 到 <code>/bin/cat</code> 目录. </p>
<h3 id="1.4.2">ADD 和 COPY 之间的不同</h3>

<p><code>COPY</code> 大多数情况都能正常工作.</p>
<p><code>ADD</code> 拥有 <code>COPY</code> 命令的所有功能并且拥有以下额外特性:</p>
<ul>
<li><p>允许tar 文件在镜像中自动解压缩,例如:<code>ADD app.tar.gz /opt/var/myapp</code>.</p>
</li>
<li><p>允许文件从远程URL下载.然而,下载文件会成为镜像的一部分.这会使得镜像越来越臃肿.所以一般还是建议使用curl 或者wget的方式来明确地下载，解压缩或者移除存档文件.</p>
</li>
</ul>
<h3 id="1.4.3">导入和导出镜像</h3>

<p>Docker 镜像能使用<code>image save</code>命令保存为<code>.tar</code>文件.</p>
<pre><code>docker image save helloworld &gt; helloworld.tar
</code></pre><p>这些tar文件能够使用<code>load</code>命令进行导入:</p>
<pre><code>docker image load -i helloworld.tar
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker Java教程4：运行一个Docker 容器]]></title>
      <url>/2018/05/10/Docker%20Java%E6%95%99%E7%A8%8B4%EF%BC%9A%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AADocker%20%E5%AE%B9%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>使用Docker运行一个应用的方式就是运行一个容器.如果你考虑使用一个开源的软件,那么有很大的可能Docker Store 已经有对应的Docker 镜像了.Docker 客户端能够通过镜像名称轻松地运行这个容器.客户端首先会检查Docker Host是否存在这个镜像,如果存在，则直接运行容器，否则host会首先去下载镜像.</p>
<a id="more"></a>
<p><a href="#1">拉取镜像</a><br><a href="#2">运行容器</a><br><a href="#2.1">交互式地</a><br><a href="#2.2">隔离的容器</a><br><a href="#2.3">使用默认端口</a><br><a href="#2.4">使用指定的端口</a><br><a href="#2.5">部署一个war文件到应用服务器</a><br><a href="#3">停止容器</a><br><a href="#4">移除容器</a><br><a href="#5">端口映射的额外方式</a></p>
<h2 id="1">拉取镜像</h2>

<p>查看可用镜像:</p>
<pre><code>docker image ls
</code></pre><p>输出如下:</p>
<pre><code>REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE
hellojava                    latest              8d76bf5691c4        32 minutes ago      740MB
hello-java                   latest              93b1180c5d91        36 minutes ago      740MB
helloworld                   2                   7fbedda27c66        41 minutes ago      1.13MB
</code></pre><p>更多关于镜像的细节可以使用<code>docker image history jboss/wildfly</code>命令:</p>
<pre><code>IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
9adbdb00cded        8 days ago          /bin/sh -c #(nop)  CMD [&quot;/opt/jboss/wildfl...   0B
&lt;missing&gt;           8 days ago          /bin/sh -c #(nop)  EXPOSE 8080/tcp              0B
&lt;missing&gt;           8 days ago          /bin/sh -c #(nop)  USER [jboss]                 0B
&lt;missing&gt;           8 days ago          /bin/sh -c #(nop)  ENV LAUNCH_JBOSS_IN_BAC...   0B
</code></pre><h2 id="2">运行容器</h2>

<h3 id="2.1">交互式地</h3>

<p>以交互模式运行WildFly 容器.</p>
<pre><code>docker container run -it jboss/wildfly
</code></pre><p>输出如下:</p>
<pre><code>=========================================================================

  JBoss Bootstrap Environment

  JBOSS_HOME: /opt/jboss/wildfly

  JAVA: /usr/lib/jvm/java/bin/java

. . .

00:26:27,455 INFO  [org.jboss.as] (Controller Boot Thread) WFLYSRV0060: Http management interface listening on http://127.0.0.1:9990/management
00:26:27,456 INFO  [org.jboss.as] (Controller Boot Thread) WFLYSRV0051: Admin console listening on http://127.0.0.1:9990
00:26:27,457 INFO  [org.jboss.as] (Controller Boot Thread) WFLYSRV0025: WildFly Full 10.1.0.Final (WildFly Core 2.2.0.Final) started in 3796ms - Started 331 of 577 services (393 services are lazy, passive or on-demand)
</code></pre><p>这个输出说明服务器已经正常启动了,皮卡丘!</p>
<p>默认，Docker会运行在前台.<code>-i</code> 允许与STDIN(standard input,stdin是标准输入，一般指键盘输入到缓冲区里的东西)进行交互,<code>-t</code> 附加一个 TTY(通常使用tty来简称各种类型的终端设备terminal) 到进程. 两个开关能够合并为<code>-it</code>.</p>
<p>点击 Ctrl+C 来停止容器.</p>
<h3 id="2.2">隔离的容器</h3>

<p>以detached(隔离)模式启动容器:</p>
<pre><code>docker container run -d jboss/wildfly
254418caddb1e260e8489f872f51af4422bc4801d17746967d9777f565714600
</code></pre><p>这次使用<code>-d</code>来替换<code>-it</code>,以隔离模式来运行容器.</p>
<p>输出是一个唯一的id 分配给容器.通过<code>docker container logs &lt;CONTAINER_ID&gt;</code>命令可以查看容器的日志记录,<code>&lt;CONTAINER_ID&gt;</code> 代表容器的id.</p>
<p><code>docker container ls</code> 命令能够查看容器的状态:</p>
<pre><code>CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
254418caddb1        jboss/wildfly       &quot;/opt/jboss/wildfl...&quot;   2 minutes ago       Up 2 minutes        8080/tcp            gifted_haibt
</code></pre><p><code>docker container ls -a</code>命令能够查看主机上的所有容器.</p>
<h3 id="2.3">使用默认端口</h3>

<p>如果你想要容器接受请求链接,那么你需要在调用<code>docker run</code>命令时提供特殊的参数选项.否则，启动的容器无法被我们的浏览器所访问.我们需要再次停止它并且以不同的选项重新启动.</p>
<pre><code>docker container stop `docker container ps | grep wildfly | awk &apos;{print $1}&apos;`
</code></pre><p>以如下命令重启容器:</p>
<pre><code>docker container run -d -P --name wildfly jboss/wildfly
</code></pre><p><code>-P</code> 代表在Docker host 上暴露 对应的端口.另外,<code>--name</code>一般用来给予这个容器一个名称.这个名称可以用来查询更多关于容器的信息或作为一个id来停止它.通过<code>docker container ls</code>命令来验证容器名称:</p>
<pre><code>CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                     NAMES
89fbfbceeb56        jboss/wildfly       &quot;/opt/jboss/wildfl...&quot;   9 seconds ago       Up 8 seconds        0.0.0.0:32768-&gt;8080/tcp   wildfly
</code></pre><p>端口映射显示在 PORTS列.通过<a href="http://localhost:32768地址防卫" target="_blank" rel="external">http://localhost:32768地址防卫</a> WildFly服务器.确保使用正确的端口来进行访问.</p>
<p>页面展示如下:</p>
<p>【我是图片】</p>
<h3 id="2.4">使用指定的端口</h3>

<p>停止并且移除最近运行的容器:</p>
<pre><code>docker container stop wildfly
docker container rm wildfly
</code></pre><p>也可以用<code>docker container rm -f wildfly</code>命令来同时完成停止和移除容器的工作.需要谨慎小心，因为<code>-f</code>使用<code>SIGKILL</code>来kill容器.</p>
<p>重启容器:</p>
<pre><code>docker container run -d -p 8080:8080 --name wildfly jboss/wildfly
</code></pre><p>这种格式表示<code>-p hostPort:containerPort</code>.这允许我们访问主机上容器的特定端口.</p>
<p>现在通过<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a> 链接来测试.确认运行正常，接着如下同样停止并移除容器.</p>
<h3 id="2.5">部署一个war文件到应用服务器</h3>

<p>现在你的应用服务器正在运行,接下来展示如何部署war包到上面.</p>
<p>创建一个新目录<code>hellojavaee</code>.用如下内容创建<code>Dockerfile</code>文件:</p>
<pre><code>FROM jboss/wildfly:latest

RUN curl -L https://github.com/javaee-samples/javaee7-simple-sample/releases/download/v1.10/javaee7-simple-sample-1.10.war -o /opt/jboss/wildfly/standalone/deployments/javaee-simple-sample.war
</code></pre><p>创建镜像:</p>
<pre><code>docker image build -t javaee-sample .
</code></pre><p>启动容器:</p>
<pre><code>docker container run -d -p 8080:8080 --name wildfly javaee-sample
</code></pre><p>访问网站路由：</p>
<pre><code>curl http://localhost:8080/javaee-simple-sample/resources/persons
</code></pre><p>输出如下:</p>
<pre><code>&lt;persons&gt;
    &lt;person&gt;
        &lt;name&gt;
        Penny
        &lt;/name&gt;
    &lt;/person&gt;
&lt;/persons&gt;
</code></pre><p>可选的:<code>brew install XML-Coreutils</code>命令将会在Mac上安装xml格式的工具.这个输出能够通过<code>xml-fmt</code>选项来展示格式化结果.</p>
<h2 id="3">停止容器</h2>

<p>通过容器id或者名称来停止容器:</p>
<pre><code>docker container stop &lt;CONTAINER ID&gt;
docker container stop &lt;NAME&gt;
</code></pre><p>停止所有正在运行的容器:</p>
<pre><code>docker container stop $(docker container ps -q)
</code></pre><p>只停止已经退出的容器:</p>
<pre><code>docker container ps -a -f &quot;exited=-1&quot;
</code></pre><h2 id="4">移除容器</h2>

<p>通过id或者名称移除指定的容器:</p>
<pre><code>docker container rm &lt;CONTAINER_ID&gt;
docker container rm &lt;NAME&gt;
</code></pre><p>通过表达式匹配来移除容器:</p>
<pre><code>docker container ps -a | grep wildfly | awk &apos;{print $1}&apos; | xargs docker container rm
</code></pre><p>无条件移除所有容器:</p>
<pre><code>docker container rm $(docker container ps -aq)
</code></pre><h2 id="5">端口映射的额外方式</h2>

<p>确切的端口映射能够通过docker port命令进行设置:</p>
<pre><code>docker container port &lt;CONTAINER_ID&gt; or &lt;NAME&gt;
</code></pre><p>输出如下:</p>
<pre><code>8080/tcp -&gt; 0.0.0.0:8080
</code></pre><p>端口映射情况能够通过docker inspect命令进行查看:</p>
<pre><code>docker container inspect --format=&apos;{{(index (index .NetworkSettings.Ports "8080/tcp") 0).HostPort}}&apos; &lt;CONTAINER ID&gt;
</code></pre><p><a href="https://github.com/docker/labs/blob/master/developer-tools/java/chapters/ch04-run-container.adoc" target="_blank" rel="external">官网链接</a></p>
]]></content>
      
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker java教程2—— docker 基础概念]]></title>
      <url>/2018/03/15/Docker%20java%E6%95%99%E7%A8%8B2_%20docker%20%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</url>
      <content type="html"><![CDATA[<p>**目的: 这个章节主要介绍一些关于Docker 的术语.</p>
<pre><code>Docker 是一个提供给开发人员以及系统管理员构建，部署和运行应用的平台.
Docker 令你能够快速地从组件库装配应用,并且在发布代码时排除冲突.
Docker 使你尽可能快地测试和部署你的代码到生产环境.
</code></pre><p>— docs.docker.com/</p>
<a id="more"></a>
<p><a href="#1.1">主要组件</a><br><a href="#1.2">Docker 镜像</a><br><a href="#1.3">Docker 容器</a><br><a href="#1.4">Docker Engine</a><br><a href="#1.5">Docker 客户端</a></p>
<p>Docker 通过更便捷的构建和共享包含你整个应用环境或者应用的操作系统的镜像来简化软件的交付.</p>
<p><strong>一个应用操作系统意味着什么?</strong></p>
<p>你的应用一般需要一个特定版本的操作系统,应用服务器,JDK,和数据库服务器,还可能需要调整配置文件,并且同样需要多个其它的依赖.应用可能需要绑定到特定的端口和一定大小的内存.这些组件和配置组成运行你的应用的应用操作系统. </p>
<p>你可以提供一个将会下载和安装这些组件的安装脚本.同样Docker 允许创建包含你应用及其基础环境的镜像,它就像一个组件一样使用，大大简化了这个过程.这些镜像接着用来创建Docker 容器,Docker 容器运行在Docker提供的虚拟平台.</p>
<h2 id="1.1">主要组件</h2>

<p>Docker 包含三个主要组件:</p>
<ul>
<li><p>镜像是Docker 的构建组件, 并且是一定了一个应用操作系统的只读模板.</p>
</li>
<li><p>容器是Docker的运行组件,它是基于镜像创建的.容器能够运行,启动,停止,移除,或者删除.</p>
</li>
<li><p>镜像能够被存储，共享在注册表中进行管理，属于Docker 的分布组件.Docker Store 是一个公共可用的注册表,可用网址为:<a href="http://store.docker.com" target="_blank" rel="external">http://store.docker.com</a>.</p>
</li>
</ul>
<p>为了这三个组件能够正常工作,Docker Daemon(Docker Engine)在一个主机机器上运行,并且完成构建,运行和分发Docker 容器的工作.另外,客户端是一个Docker binary,能够通过Engine响应用户的命令,完成交互.</p>
<p>关键点 1. Docker 架构<br>Client 客户端与Engine交互可以是在本地同一个主机,也可以是其它任意一个.客户端使用<code>pull</code>命令请求Engine来从注册表拉取镜像.Engine接着从Docker Store下载镜像,或者任意一个配置的注册表.从注册表能够下载多个镜像并且安装到Engine上.客户端使用<code>run</code>命令来运行容器.</p>
<h2 id="1.2">Docker 镜像</h2><br>在Docerk 容器中运行的docker镜像是只读模板.每个镜像由一系列层次构成.Docker利用联合文件系统(Union file systems)来将这些层面结合到一个镜像当中.联合文件系统允许文件或者以目录为单位的独立文件系统,就像分支一样(branches),通过覆盖的方式，形成一个单一而连贯的文件系统.<br><br>Docker 如此轻量级的原因之一就是因为这些分层.当你改变一个Docker镜像-比如,更新一个应用到新的版本-一个新的分层被构建.因此,并不是替换整个镜像或者完全地重新构建,就像你可能在虚拟机中做的那样,只有那个分层被添加或者更新.现在你不需要去分配一整个全新的镜像,只需要更新,这使得Docker 镜像的分配更加快速和便捷.<br><br>每个镜像都是基于基础镜像(base image)构建的,例如 ubuntu,一个基础的Ubuntu镜像,或者 fedora,一个基础调的Fedora 镜像.你同样能使用自己的镜像作为基础镜像来构建一个新镜像,比如如果你有一个基础的Apache镜像你能将它作为你所有web应用镜像的基础镜像.<br><br>|Note|Docker 默认从Docker Store获取这些基础镜像|<br>|:—-:|:—-:|<br><br>Docker 镜像可以很简单的从这些基础镜像当中构建出来,我们将依次介绍相关指令,每个指令都会在我们的镜像当中创建一个新的分层.指令包含的动作：<br><br><em> 运行一个命令

</em> 添加一个文件或者目录<br><br><em> 创建一个环境变量

</em> 当容器运行时运行一个进程<br><br>这些指令被存储在一个命名为Dockerfile的文件当中.Docker 会在你请求构建一个镜像时读取这个文件,执行这些指令,并且返回最终的镜像.<br><br><h2 id="1.3">Docker 容器</h2>

<p>一个容器由一个操作系统,用户添加的文件，和元数据组成.就像我们看到的那样,每个容器都是从镜像中构建的.那个镜像会告诉Docker容器应该包含什么东西,当容器启动时运行什么进程,和一系列其它配置文件.Docker镜像是只读的.当Docker从一个镜像当中运行容器,它会在那个镜像的顶部添加一个读写层(使用一个联合文件系统),让你的应用能够顺利运行.</p>
<h2 id="1.4">Docker Engine</h2>

<p>Docker Host 作为安装在你机器上的Docker的一部分被创建.一旦你的Docker host已经被创建,它就允许你去管理镜像和容器.例如,这个镜像能够被下载，容器能够被启动,停止和重启.</p>
<h2 id="1.5">Docker 客户端</h2>

<p>这个客户端与Docker Host进行交互并且让你能够对镜像和容器产生影响作用.</p>
<p>通过以下命令检查你的客户端是否正常工作:</p>
<pre><code>docker -v
</code></pre><p>它将展示以下输出:</p>
<pre><code>Docker version 17.09.0-ce-rc3, build 2357fb2
</code></pre><p>客户端和服务器的版本能够通过<code>docker version</code>命令来进行查看.它将展示以下输出:</p>
<pre><code>Client:
 Version:      17.09.0-ce-rc3
 API version:  1.32
 Go version:   go1.8.3
 Git commit:   2357fb2
 Built:        Thu Sep 21 02:31:18 2017
 OS/Arch:      darwin/amd64

Server:
 Version:      17.09.0-ce-rc3
 API version:  1.32 (minimum version 1.12)
 Go version:   go1.8.3
 Git commit:   2357fb2
 Built:        Thu Sep 21 02:36:52 2017
 OS/Arch:      linux/amd64
 Experimental: true
</code></pre><p>完整的命令说明能够通过使用<code>docker --help</code>命令进行查看.</p>
<p><a href="https://github.com/docker/labs/blob/master/developer-tools/java/chapters/ch02-basic-concepts.adoc" target="_blank" rel="external">官方参考链接</a></p>
]]></content>
      
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker java教程1—— docker java 环境设置]]></title>
      <url>/2018/03/15/Docker%20java%E6%95%99%E7%A8%8B1_%20docker%20java%20%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>这个章节描述了在这个教程中所需的硬件和软件及其相关的配置方式.</p>
<a id="more"></a>
<p><a href="#1.1">硬件 &amp; 软件</a><br><a href="#1.2">Docker安装</a><br><a href="#1.3">下载镜像</a><br><a href="#1.4">其它软件</a></p>
<h2 id="1.1">硬件 &amp; 软件</h2>

<ol>
<li><p>内存: 至少 4 GB+, 推荐 8 GB</p>
</li>
<li><p>操作系统: Mac OS X (10.10.3+), Windows 10 Pro+ 64-bit, Ubuntu 12+, CentOS 7+.</p>
</li>
<li><p>Amazon Web Services 凭证需要<a href="https://docs.docker.com/docker-for-aws/iam-permissions/" target="_blank" rel="external">以下凭证</a>. 这只在这个教程的部分地方需要用到.</p>
</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">Note</th>
<th style="text-align:center">如果使用老版本的操作系统，安装介绍将会有些许不同，这将在下一个章节里讲到.</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<h2 id="1.2">Docker安装</h2><br>Docker在Mac,Windows 和 Linux上运行十分顺畅.这个教程将使用<a href="https://www.docker.com/community-edition" target="_blank" rel="external">Docker Community Edition (CE)</a>.从<a href="https://store.docker.com/search?type=edition&amp;offering=community" target="_blank" rel="external">docker Store</a>下载 Docker CE edition .<br><br>Docker CE requires a fairly recent operating system version. If your machine does not meet the requirements, then you need to install Docker Toolbox.<br><br>|Note|Docker CE 需要一个相当新的操作系统版本.如果你的机器不满足要求，那你需要安装<a href="https://www.docker.com/products/docker-toolbox" target="_blank" rel="external">Docker Toolbox</a>.|<br>|:-:|:-:|<br><br><br><h2 id="1.3">下载镜像</h2>

<p>这个教程使用到一些Docker 镜像和软件.让我们在开始教程前下载它们.</p>
<p>从 <a href="https://raw.githubusercontent.com/docker/labs/master/developer-tools/java/scripts/docker-compose-pull-images.yml" target="_blank" rel="external">https://raw.githubusercontent.com/docker/labs/master/developer-tools/java/scripts/docker-compose-pull-images.yml</a> 下载文件 并且使用以下命令拉取所需的镜像:</p>
<pre><code>docker-compose -f docker-compose-pull-images.yml pull --parallel
</code></pre><table>
<thead>
<tr>
<th style="text-align:center">Note</th>
<th style="text-align:center">对于Linux来说,<code>docker-compose</code>和<code>docker commands</code>需要<code>sudo</code>访问权限.所以在所有命令前加上<code>sudo</code>前缀.</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<h2 id="1.4">其它软件</h2>

<p>这个小节介绍的软件只在教程的某些部分中使用到.如果你计划尝试它们的话再进行安装.</p>
<ul>
<li><p>安装 <a href="https://git-scm.com//" target="_blank" rel="external">git</a>.</p>
</li>
<li><p>按照<a href="https://docs.docker.com/docker-cloud/installing-cli/" target="_blank" rel="external">教程</a>安装 Docker Cloud CLI .</p>
</li>
<li><p>下载 Java IDE .</p>
<ul>
<li><p><a href="https://netbeans.org/downloads/" target="_blank" rel="external">NetBeans 8.2</a> (“Java SE” version)</p>
</li>
<li><p><a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="external">IntelliJ IDEA Community or Ultimate</a></p>
</li>
<li><p><a href="http://www.eclipse.org/downloads/eclipse-packages/" target="_blank" rel="external">Eclipse IDE for Java EE Developers</a></p>
</li>
</ul>
</li>
<li><p>下载并且安装 <a href="https://maven.apache.org/download.cgi" target="_blank" rel="external">Maven</a>.</p>
</li>
<li><p>下载通过 <a href="http://download.java.net/java/GA/jdk9/9/binaries/openjdk-9_linux-x64_bin.tar.gz" target="_blank" rel="external">JDK 9 for Linux x64</a>构建的OpenJDK. (同样参照 <a href="http://jdk.java.net/9/" target="_blank" rel="external">OpenJDK JDK 9 download page</a>.)</p>
</li>
<li><p>下载通过<a href="http://jdk.java.net/9/ea" target="_blank" rel="external">JDK 9 for Alpine Linux</a>构建的先行版本Open JDK.</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker for Java Developers]]></title>
      <url>/2018/03/15/Docker%20for%20Java%20Developers/</url>
      <content type="html"><![CDATA[<p>这个教程为java开发者提供了一门可以按照自己进度操作实践的入门级课程.</p>
<a id="more"></a>
<ul>
<li><a href="https://github.com/docker/labs/blob/master/developer-tools/java/chapters/ch01-setup.adoc" target="_blank" rel="external">Setup Environments</a></li>
<li><a href="https://github.com/docker/labs/blob/master/developer-tools/java/chapters/ch02-basic-concepts.adoc" target="_blank" rel="external">Docker Basic Concepts</a></li>
<li>Building<ul>
<li><a href="https://github.com/docker/labs/blob/master/developer-tools/java/chapters/ch03-build-image.adoc" target="_blank" rel="external">Build a Docker Image</a></li>
<li><a href="https://github.com/docker/labs/blob/master/developer-tools/java/chapters/ch03-build-image-java-9.adoc" target="_blank" rel="external">Build a Docker Image for Java 9</a></li>
</ul>
</li>
<li><a href="https://github.com/docker/labs/blob/master/developer-tools/java/chapters/ch04-run-container.adoc" target="_blank" rel="external">Run a Docker Container</a></li>
<li><a href="https://github.com/docker/labs/blob/master/developer-tools/java/chapters/ch05-compose.adoc" target="_blank" rel="external">Multi-container application using Docker Compose</a></li>
<li><a href="https://github.com/docker/labs/blob/master/developer-tools/java/chapters/ch06-swarm.adoc" target="_blank" rel="external">Multi-container application using Compose and Swarm Mode</a></li>
<li>Java IDEs<ul>
<li><a href="https://github.com/docker/labs/blob/master/developer-tools/java/chapters/ch07-netbeans.adoc" target="_blank" rel="external">Docker Tooling in NetBeans</a></li>
<li><a href="https://github.com/docker/labs/blob/master/developer-tools/java/chapters/ch07-intellij.adoc" target="_blank" rel="external">Docker Tooling in IntelliJ IDEA</a></li>
<li><a href="https://github.com/docker/labs/blob/master/developer-tools/java/chapters/ch07-eclipse.adoc" target="_blank" rel="external">Docker Tooling in Eclipse</a></li>
</ul>
</li>
<li>Multi-container application on multi-host<ul>
<li><a href="https://github.com/docker/labs/blob/master/developer-tools/java/chapters/ch08-aws.adoc" target="_blank" rel="external">Docker for AWS</a></li>
<li><a href="https://github.com/docker/labs/blob/master/developer-tools/java/chapters/ch08-azure.adoc" target="_blank" rel="external">Docker for Azure (coming)</a></li>
<li><a href="https://github.com/docker/labs/blob/master/developer-tools/java/chapters/ch08-cloud.adoc" target="_blank" rel="external">Docker Cloud</a></li>
</ul>
</li>
<li><a href="https://github.com/docker/labs/blob/master/developer-tools/java/chapters/ch09-cicd.adoc" target="_blank" rel="external">CI/CD using Docker</a></li>
<li><a href="https://github.com/docker/labs/blob/master/developer-tools/java/chapters/ch10-monitoring.adoc" target="_blank" rel="external">Monitoring Docker Containers with Prometheus and Grafana</a></li>
<li><a href="https://github.com/docker/labs/blob/master/developer-tools/java/chapters/ch11-bigdata.adoc" target="_blank" rel="external">Big Data Processing with Docker and Hadoop</a></li>
<li><a href="https://github.com/docker/labs/blob/master/developer-tools/java/chapters/appa-common-commands.adoc" target="_blank" rel="external">Common Docker Commands</a></li>
<li><a href="https://github.com/docker/labs/blob/master/developer-tools/java/chapters/appb-troubleshooting.adoc" target="_blank" rel="external">Troubleshooting</a></li>
<li><a href="https://github.com/docker/labs/blob/master/developer-tools/java/chapters/appc-references.adoc" target="_blank" rel="external">References</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker Swarm 教程]]></title>
      <url>/2018/03/15/Docker%20Swarm%20%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>Note:这个教程使用Docker Machine 来模拟多台机器运行的情况.有一种更简单的方式来学习swarm mode,那就是通过<a href="http://training.play-with-docker.com/swarm-mode-intro/" target="_blank" rel="external">Play with Docker</a>.这个教程因为历史原因保留下来，并且同样因为当你真的想要使用自己的机器来学习swarm时.</p>
<a id="more"></a>
<p>Docker 的swarm 模式是用来管理Docker Engines的集群,所以称之为swarm.你能使用Docker CLI 来创建swarm,部署应用服务到一个swarm,并且管理swarm的行为.这个教程使用<a href="https://docs.docker.com/machine/" target="_blank" rel="external">Docker Machine</a>来在你的桌面电脑上创建多个节点.你也可以选择在云上或者多台机器上创建多个节点.</p>
<p>重要提示: 你并不需要使用Docker CLI来执行这些操作.只需要使用<code>docker stack deploy --compose-file STACKNAME.yml STACKNAME</code> 命令即可.关于以compose 文件格式的stack文件来部署一个app,参考<a href="https://github.com/docker/labs/blob/master/beginner/chapters/votingapp.md" target="_blank" rel="external">Deploying an app to a Swarm</a></p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>你需要在你的系统上安装Docker 和Docker Machine.<a href="https://docker.com/getdocker" target="_blank" rel="external">下载Docker</a>并且安装.</p>
<p>提示:</p>
<ul>
<li><p>如果你是使用Docker for Mac 或者Docker for Windows,Docker Machine已经默认安装.查看<a href="https://docs.docker.com/docker-for-mac/#/download-docker-for-mac" target="_blank" rel="external">Download Docker for Mac</a>和<a href="https://docs.docker.com/docker-for-windows/#/download-docker-for-windows" target="_blank" rel="external">Download Docker for Windows</a>来查询详细安装细节.</p>
</li>
<li><p>如果你是使用Docker for Windows 你还需要使用Hyper-V driver 来正常驱动Docker Machine.这可能需要更多一点设置.查看<a href="https://docs.docker.com/machine/drivers/hyper-v/" target="_blank" rel="external">Microsoft Hyper-V driver documentation</a>来获取设置指引.</p>
</li>
<li><p>如果你是直接在linux系统上使用Docker,你将需要安装Docker Machine(在安装Docker Engine之后).</p>
</li>
</ul>
<h2 id="创建nodes和Swarm"><a href="#创建nodes和Swarm" class="headerlink" title="创建nodes和Swarm"></a>创建nodes和Swarm</h2><p><a href="https://docs.docker.com/machine/overview/" target="_blank" rel="external">Docker Machine</a>可以用来:</p>
<ul>
<li>在Mac或者Windows上安装和运行Docker</li>
<li>提供和管理多个远程Docker 主机</li>
<li>提供Swarm 集群</li>
</ul>
<p>但它同样能用来在你本地的机器上创建多个节点.在这个仓库有一个<a href="https://github.com/docker/labs/blob/master/swarm-mode/beginner-tutorial/swarm-node-vbox-setup.sh" target="_blank" rel="external">bash脚本</a>实现了这一点并且创建swarm.同样有一个<a href="https://github.com/docker/labs/blob/master/swarm-mode/beginner-tutorial/swarm-node-hyperv-setup.ps1" target="_blank" rel="external">powershell Hyper-V version</a>.在这篇教程我们将贯穿这个脚本,步步深入，除了设置以外,与Hyper-V version基本相同.</p>
<p>首先创建3个machines,并且命名为manger1,manger2和manger3.</p>
<pre><code>#!/bin/bash

# Swarm mode using Docker Machine

#This configures the number of workers and managers in the swarm
managers=3
workers=3

# This creates the manager machines
echo &quot;======&gt; Creating $managers manager machines ...&quot;;
for node in $(seq 1 $managers);
do
    echo &quot;======&gt; Creating manager$node machine ...&quot;;
    docker-machine create -d virtualbox manager$node;
done
</code></pre><p>第二个步骤是创建三个及以上的machines,并且命名为worker1,worker2,和worker3</p>
<pre><code># This create worker machines
echo &quot;======&gt; Creating $workers worker machines ...&quot;;
for node in $(seq 1 $workers);
do
    echo &quot;======&gt; Creating worker$node machine ...&quot;;
    docker-machine create -d virtualbox worker$node;
done

# This lists all machines created
docker-machine ls
</code></pre><p>接下来你创建一个swarm通过在首个manger上初始化它.通过<code>docker-machine ssh</code>来运行<code>docker-machine ssh</code>命令.</p>
<pre><code># initialize swarm mode and create a manager
echo &quot;======&gt; Initializing first swarm manager ...&quot;
docker-machine ssh manager1 &quot;docker swarm init --listen-addr $(docker-machine ip manager1) --advertise-addr $(docker-machine ip manager1)&quot;
</code></pre><p>接下来为mangers和workers获取tokens.</p>
<pre><code># get manager and worker tokens
export manager_token=`docker-machine ssh manager1 &quot;docker swarm join-token manager -q&quot;`
export worker_token=`docker-machine ssh manager1 &quot;docker swarm join-token worker -q&quot;`
</code></pre><p>然后把其他managers加入到Swarm</p>
<pre><code>for node in $(seq 2 $managers);
do
    echo &quot;======&gt; manager$node joining swarm as manager ...&quot;
    docker-machine ssh manager$node \
        &quot;docker swarm join \
        --token $manager_token \
        --listen-addr $(docker-machine ip manager$node) \
        --advertise-addr $(docker-machine ip manager$node) \
        $(docker-machine ip manager1)&quot;
done
</code></pre><p>最后，添加worker machines并且加入swarm</p>
<pre><code># workers join swarm
for node in $(seq 1 $workers);
do
    echo &quot;======&gt; worker$node joining swarm as worker ...&quot;
    docker-machine ssh worker$node \
    &quot;docker swarm join \
    --token $worker_token \
    --listen-addr $(docker-machine ip worker$node) \
    --advertise-addr $(docker-machine ip worker$node) \
    $(docker-machine ip manager1):2377&quot;
done

# show members of swarm
docker-machine ssh manager1 &quot;docker node ls&quot;
</code></pre><p>最后一行将向你展示所有的节点,就像这样:</p>
<pre><code>ID                           HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS
3cq6idpysa53n6a21nqe0924h    manager3  Ready   Active        Reachable
64swze471iu5silg83ls0bdip *  manager1  Ready   Active        Leader
7eljvvg0icxlw20od5f51oq8t    manager2  Ready   Active        Reachable
8awcmkj3sd9nv1pi77i6mdb1i    worker1   Ready   Active        
avu80ol573rzepx8ov80ygzxz    worker2   Ready   Active        
bxn1iivy8w7faeugpep76w50j    worker3   Ready   Active   
</code></pre><p>也可以运行以下命令:</p>
<pre><code>$ docker-machine ls
NAME       ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER      ERRORS
manager1   -        virtualbox   Running   tcp://192.168.99.100:2376           v17.03.0-ce   
manager2   -        virtualbox   Running   tcp://192.168.99.101:2376           v17.03.0-ce 
manager3   -        virtualbox   Running   tcp://192.168.99.102:2376           v17.03.0-ce
worker1    -        virtualbox   Running   tcp://192.168.99.103:2376           v17.03.0-ce
worker2    -        virtualbox   Running   tcp://192.168.99.104:2376           v17.03.0-ce
worker3    -        virtualbox   Running   tcp://192.168.99.105:2376           v17.03.0-ce
</code></pre><p>下一步是创建一个service并且进行展示.这里创建单个命名为web的service并且运行最新的nginx:</p>
<pre><code>$ docker-machine ssh manager1 &quot;docker service create -p 80:80 --name web nginx:latest&quot;
$ docker-machine ssh manager1 &quot;docker service ls&quot;
ID            NAME  REPLICAS  IMAGE         COMMAND
2x4jsk6313az  web   1/1       nginx:latest    
</code></pre><p>现在在你的浏览器上通过对应ip地址进行访问.在这个实例中manger1有一个ip地址为192.168.99.100.</p>
<p>你可以使用任意其它节点的ip地址进行访问都将得到同样的结果,因为<a href="https://docs.docker.com/engine/swarm/ingress/" target="_blank" rel="external">Swarm Mode’s Routing Mesh</a>.</p>
<p>现在检查service:</p>
<pre><code>$ docker-machine ssh manager1 &quot;docker service inspect web&quot;
[
    {
        &quot;ID&quot;: &quot;2x4jsk6313azr6g1dwoi47z8u&quot;,
        &quot;Version&quot;: {
            &quot;Index&quot;: 104
        },
        &quot;CreatedAt&quot;: &quot;2016-08-23T22:43:23.573253682Z&quot;,
        &quot;UpdatedAt&quot;: &quot;2016-08-23T22:43:23.576157266Z&quot;,
        &quot;Spec&quot;: {
            &quot;Name&quot;: &quot;web&quot;,
            &quot;TaskTemplate&quot;: {
                &quot;ContainerSpec&quot;: {
                    &quot;Image&quot;: &quot;nginx:latest&quot;
                },
                &quot;Resources&quot;: {
                    &quot;Limits&quot;: {},
                    &quot;Reservations&quot;: {}
                },
                &quot;RestartPolicy&quot;: {
                    &quot;Condition&quot;: &quot;any&quot;,
                    &quot;MaxAttempts&quot;: 0
                },
                &quot;Placement&quot;: {}
            },
            &quot;Mode&quot;: {
                &quot;Replicated&quot;: {
                    &quot;Replicas&quot;: 1
                }
            },
            &quot;UpdateConfig&quot;: {
                &quot;Parallelism&quot;: 1,
                &quot;FailureAction&quot;: &quot;pause&quot;
            },
            &quot;EndpointSpec&quot;: {
                &quot;Mode&quot;: &quot;vip&quot;,
                &quot;Ports&quot;: [
                    {
                        &quot;Protocol&quot;: &quot;tcp&quot;,
                        &quot;TargetPort&quot;: 80,
                        &quot;PublishedPort&quot;: 80
                    }
                ]
            }
        },
        &quot;Endpoint&quot;: {
            &quot;Spec&quot;: {
                &quot;Mode&quot;: &quot;vip&quot;,
                &quot;Ports&quot;: [
                    {
                        &quot;Protocol&quot;: &quot;tcp&quot;,
                        &quot;TargetPort&quot;: 80,
                        &quot;PublishedPort&quot;: 80
                    }
                ]
            },
            &quot;Ports&quot;: [
                {
                    &quot;Protocol&quot;: &quot;tcp&quot;,
                    &quot;TargetPort&quot;: 80,
                    &quot;PublishedPort&quot;: 80
                }
            ],
            &quot;VirtualIPs&quot;: [
                {
                    &quot;NetworkID&quot;: &quot;24r1loluvdohuzltspkwbhsc8&quot;,
                    &quot;Addr&quot;: &quot;10.255.0.9/16&quot;
                }
            ]
        },
        &quot;UpdateStatus&quot;: {
            &quot;StartedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;,
            &quot;CompletedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;
        }
    }
]
</code></pre><p>规模化service(运行多个相同service):    </p>
<pre><code>$ docker-machine ssh manager1 &quot;docker service scale web=15&quot;
web scaled to 15
$ docker-machine ssh manager1 &quot;docker service ls&quot;
ID            NAME  REPLICAS  IMAGE         COMMAND
2x4jsk6313az  web   15/15     nginx:latest  
</code></pre><p>Docker会将15个服务均匀地分配到所有节点上:</p>
<pre><code>$ docker-machine ssh manager1 &quot;docker service ps web&quot;
ID                         NAME    IMAGE         NODE      DESIRED STATE  CURRENT STATE           ERROR
61wjx0zaovwtzywwbomnvjo4q  web.1   nginx:latest  worker3   Running        Running 13 minutes ago  
bkkujhpbtqab8fyhah06apvca  web.2   nginx:latest  manager1  Running        Running 2 minutes ago   
09zkslrkgrvbscv0vfqn2j5dw  web.3   nginx:latest  manager1  Running        Running 2 minutes ago   
4dlmy8k72eoza9t4yp9c9pq0w  web.4   nginx:latest  manager2  Running        Running 2 minutes ago   
6yqabr8kajx5em2auvfzvi8wi  web.5   nginx:latest  manager3  Running        Running 2 minutes ago   
21x7sn82883e7oymz57j75q4q  web.6   nginx:latest  manager2  Running        Running 2 minutes ago   
14555mvu3zee6aek4dwonxz3f  web.7   nginx:latest  worker1   Running        Running 2 minutes ago   
1q8imt07i564bm90at3r2w198  web.8   nginx:latest  manager1  Running        Running 2 minutes ago   
encwziari9h78ue32v5pjq9jv  web.9   nginx:latest  worker3   Running        Running 2 minutes ago   
aivwszsjhhpky43t3x7o8ezz9  web.10  nginx:latest  worker2   Running        Running 2 minutes ago   
457fsqomatl1lgd9qbz2dcqsb  web.11  nginx:latest  worker1   Running        Running 2 minutes ago   
7chhofuj4shhqdkwu67512h1b  web.12  nginx:latest  worker2   Running        Running 2 minutes ago   
7dynic159wyouch05fyiskrd0  web.13  nginx:latest  worker1   Running        Running 2 minutes ago   
7zg9eki4610maigr1xwrx7zqk  web.14  nginx:latest  manager3  Running        Running 2 minutes ago   
4z2c9j20gwsasosvj7mkzlyhc  web.15  nginx:latest  manager2  Running        Running 2 minutes ago   
</code></pre><p>你同样能排除一个特定的节点，通过从那个节点移除所有的服务.这些服务会自动重新安排到其它节点上.</p>
<pre><code>$ docker-machine ssh manager1 &quot;docker node update --availability drain worker1&quot;
worker1
$ docker-machine ssh manager1 &quot;docker service ps web&quot;
ID                         NAME        IMAGE         NODE      DESIRED STATE  CURRENT STATE           ERROR
61wjx0zaovwtzywwbomnvjo4q  web.1       nginx:latest  worker3   Running        Running 15 minutes ago  
bkkujhpbtqab8fyhah06apvca  web.2       nginx:latest  manager1  Running        Running 4 minutes ago   
09zkslrkgrvbscv0vfqn2j5dw  web.3       nginx:latest  manager1  Running        Running 4 minutes ago   
4dlmy8k72eoza9t4yp9c9pq0w  web.4       nginx:latest  manager2  Running        Running 4 minutes ago   
6yqabr8kajx5em2auvfzvi8wi  web.5       nginx:latest  manager3  Running        Running 4 minutes ago   
21x7sn82883e7oymz57j75q4q  web.6       nginx:latest  manager2  Running        Running 4 minutes ago   
8so0xi55kqimch2jojfdr13qk  web.7       nginx:latest  worker3   Running        Running 3 seconds ago   
14555mvu3zee6aek4dwonxz3f   \_ web.7   nginx:latest  worker1   Shutdown       Shutdown 4 seconds ago  
1q8imt07i564bm90at3r2w198  web.8       nginx:latest  manager1  Running        Running 4 minutes ago   
encwziari9h78ue32v5pjq9jv  web.9       nginx:latest  worker3   Running        Running 4 minutes ago   
aivwszsjhhpky43t3x7o8ezz9  web.10      nginx:latest  worker2   Running        Running 4 minutes ago   
738jlmoo6tvrkxxar4gbdogzf  web.11      nginx:latest  worker2   Running        Running 3 seconds ago   
457fsqomatl1lgd9qbz2dcqsb   \_ web.11  nginx:latest  worker1   Shutdown       Shutdown 3 seconds ago  
7chhofuj4shhqdkwu67512h1b  web.12      nginx:latest  worker2   Running        Running 4 minutes ago   
4h7zcsktbku7peh4o32mw4948  web.13      nginx:latest  manager3  Running        Running 3 seconds ago   
7dynic159wyouch05fyiskrd0   \_ web.13  nginx:latest  worker1   Shutdown       Shutdown 4 seconds ago  
7zg9eki4610maigr1xwrx7zqk  web.14      nginx:latest  manager3  Running        Running 4 minutes ago   
4z2c9j20gwsasosvj7mkzlyhc  web.15      nginx:latest  manager2  Running        Running 4 minutes ago   
</code></pre><p>worker1节点仍然存活但是被标记为drain 状态.</p>
<pre><code>$ docker-machine ssh manager1 &quot;docker node ls&quot;
ID                           HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS
3cq6idpysa53n6a21nqe0924h    manager3  Ready   Active        Reachable
64swze471iu5silg83ls0bdip *  manager1  Ready   Active        Leader
7eljvvg0icxlw20od5f51oq8t    manager2  Ready   Active        Reachable
8awcmkj3sd9nv1pi77i6mdb1i    worker1   Ready   Drain         
avu80ol573rzepx8ov80ygzxz    worker2   Ready   Active        
bxn1iivy8w7faeugpep76w50j    worker3   Ready   Active
</code></pre><p>降低服务的规模:</p>
<pre><code>$ docker-machine ssh manager1 &quot;docker service scale web=10&quot;
web scaled to 10
$ docker-machine ssh manager1 &quot;docker service ps web&quot;
ID                         NAME        IMAGE         NODE      DESIRED STATE  CURRENT STATE            ERROR
61wjx0zaovwtzywwbomnvjo4q  web.1       nginx:latest  worker3   Running        Running 22 minutes ago   
bkkujhpbtqab8fyhah06apvca  web.2       nginx:latest  manager1  Shutdown       Shutdown 54 seconds ago  
09zkslrkgrvbscv0vfqn2j5dw  web.3       nginx:latest  manager1  Running        Running 11 minutes ago   
4dlmy8k72eoza9t4yp9c9pq0w  web.4       nginx:latest  manager2  Running        Running 11 minutes ago   
6yqabr8kajx5em2auvfzvi8wi  web.5       nginx:latest  manager3  Running        Running 11 minutes ago   
21x7sn82883e7oymz57j75q4q  web.6       nginx:latest  manager2  Running        Running 11 minutes ago   
8so0xi55kqimch2jojfdr13qk  web.7       nginx:latest  worker3   Running        Running 7 minutes ago    
14555mvu3zee6aek4dwonxz3f   \_ web.7   nginx:latest  worker1   Shutdown       Shutdown 7 minutes ago   
1q8imt07i564bm90at3r2w198  web.8       nginx:latest  manager1  Running        Running 11 minutes ago   
encwziari9h78ue32v5pjq9jv  web.9       nginx:latest  worker3   Shutdown       Shutdown 54 seconds ago  
aivwszsjhhpky43t3x7o8ezz9  web.10      nginx:latest  worker2   Shutdown       Shutdown 54 seconds ago  
738jlmoo6tvrkxxar4gbdogzf  web.11      nginx:latest  worker2   Running        Running 7 minutes ago    
457fsqomatl1lgd9qbz2dcqsb   \_ web.11  nginx:latest  worker1   Shutdown       Shutdown 7 minutes ago   
7chhofuj4shhqdkwu67512h1b  web.12      nginx:latest  worker2   Running        Running 11 minutes ago   
4h7zcsktbku7peh4o32mw4948  web.13      nginx:latest  manager3  Running        Running 7 minutes ago    
7dynic159wyouch05fyiskrd0   \_ web.13  nginx:latest  worker1   Shutdown       Shutdown 7 minutes ago   
7zg9eki4610maigr1xwrx7zqk  web.14      nginx:latest  manager3  Shutdown       Shutdown 54 seconds ago  
4z2c9j20gwsasosvj7mkzlyhc  web.15      nginx:latest  manager2  Shutdown       Shutdown 54 seconds ago  
</code></pre><p>现在重新把worker1 恢复为在线状态并且显示它的状态:</p>
<pre><code>$ docker-machine ssh manager1 &quot;docker node update --availability active worker1&quot;
worker1
$ docker-machine ssh manager1 &quot;docker node inspect worker1 --pretty&quot;
ID:            8awcmkj3sd9nv1pi77i6mdb1i
Hostname:        worker1
Joined at:        2016-08-23 22:30:15.556517377 +0000 utc
Status:
 State:            Ready
 Availability:        Active
Platform:
 Operating System:    linux
 Architecture:        x86_64
Resources:
 CPUs:            1
 Memory:        995.9 MiB
Plugins:
  Network:        bridge, host, null, overlay
  Volume:        local
Engine Version:        17.03.0-ce
Engine Labels:
 - provider = virtualbox
</code></pre><p>现在把manager1 leader节点,从Swarm中移除:</p>
<pre><code>$ docker-machine ssh manager1 &quot;docker swarm leave --force&quot;
Node left the swarm. 
</code></pre><p>等待30秒来确定生效.Swarm仍然可用,但是必须重新选举一个新的leader.这会自动发生.</p>
<pre><code>$ docker-machine ssh manager2 &quot;docker node ls&quot;
ID                           HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS
3cq6idpysa53n6a21nqe0924h    manager3  Ready   Active        Reachable
64swze471iu5silg83ls0bdip    manager1  Down    Active        Unreachable
7eljvvg0icxlw20od5f51oq8t *  manager2  Ready   Active        Leader
8awcmkj3sd9nv1pi77i6mdb1i    worker1   Ready   Active        
avu80ol573rzepx8ov80ygzxz    worker2   Ready   Active        
bxn1iivy8w7faeugpep76w50j    worker3   Ready   Active
</code></pre><p>可以看到manager1变为Down 并且 Unreachable ,并且manager2已经被选举为leader.同样简单的方式移除一个service:</p>
<pre><code>$ docker-machine ssh manager2 &quot;docker service rm web&quot;
web
</code></pre><h2 id="Cleanup"><a href="#Cleanup" class="headerlink" title="Cleanup"></a>Cleanup</h2><pre><code>$ ./swarm-node-vbox-teardown.sh
Stopping &quot;manager3&quot;...
Stopping &quot;manager2&quot;...
Stopping &quot;worker1&quot;...
Stopping &quot;manager1&quot;...
Stopping &quot;worker3&quot;...
Stopping &quot;worker2&quot;...
Machine &quot;manager3&quot; was stopped.
Machine &quot;manager1&quot; was stopped.
Machine &quot;manager2&quot; was stopped.
Machine &quot;worker2&quot; was stopped.
Machine &quot;worker1&quot; was stopped.
Machine &quot;worker3&quot; was stopped.
About to remove worker1, worker2, worker3, manager1, manager2, manager3
Are you sure? (y/n): y
Successfully removed worker1
Successfully removed worker2
Successfully removed worker3
Successfully removed manager1
Successfully removed manager2
Successfully removed manager3
</code></pre><h2 id="Next-Steps"><a href="#Next-Steps" class="headerlink" title="Next Steps"></a>Next Steps</h2><p>更多详细信息查看<a href="https://docs.docker.com/engine/swarm/" target="_blank" rel="external">Docker Swarm Mode 文档</a></p>
]]></content>
      
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[3.0部署一个app到Swarm上]]></title>
      <url>/2018/02/12/%E9%83%A8%E7%BD%B2%E4%B8%80%E4%B8%AAapp%E5%88%B0Swarm%E4%B8%8A/</url>
      <content type="html"><![CDATA[<p>这个教程将会通过创建和定制一个投票app来知道你关于swarm上面的部署.<br>按步骤完成教程至关重要，并且确保定制的部分是开放了定制功能的.</p>
<p>注意：完成这个章节的教程，你需要先完成Docker和git的安装.</p>
<a id="more"></a>
<h2 id="Voting-app"><a href="#Voting-app" class="headerlink" title="Voting app"></a>Voting app</h2><p>应用源代码路径<a href="https://github.com/docker/example-voting-app" target="_blank" rel="external">Docker Example Voting App</a>.这个app包含5个组件:</p>
<ul>
<li>Python webapp 组件，实现在两个选项之间投票的功能</li>
<li>Redis queue 收集新的投票</li>
<li>.NET worker 消费投票并且保存它们在…</li>
<li>Postgres database 通过Docker volume 来支持</li>
<li>Node.js webapp 即时展示投票结果</li>
</ul>
<p>克隆仓库到你的机器上并且通过cd命令到对应目录下:</p>
<pre><code>git clone https://github.com/docker/example-voting-app.git
cd example-voting-app
</code></pre><h2 id="部署app"><a href="#部署app" class="headerlink" title="部署app"></a>部署app</h2><p>在这首个阶段，我们将会使用在Docker Store中的首个镜像.</p>
<p>这个app依赖<a href="https://docs.docker.com/engine/swarm/" target="_blank" rel="external">Docker Swarm模式</a>.Swarm mode是嵌入在Docker engine中的集群管理和编排特性.你可以用一个描述你app期望状态的文件来轻松部署到swarm.Swarm允许你运行你的容器在多台机器上.<br>在这个教程中，你可以使用一台机器，或者使用一些像<a href="https://beta.docker.com/" target="_blank" rel="external">Docker for AWS</a>或者<a href="https://beta.docker.com/" target="_blank" rel="external">Docker for Azure</a>来快速的创建多个节点的机器.另外，你还可以使用Docker Machine 在你的部署机器上创建多个本地节点.查看<a href="https://github.com/docker/labs/blob/master/swarm-mode/beginner-tutorial/README.md#creating-the-nodes-and-swarm" target="_blank" rel="external">Swarm Mode lab</a>查询更多相关信息</p>
<p>首先,创建一个Swarm.</p>
<pre><code>docker swarm init
</code></pre><p>接下来，你将需要一个<a href="https://docs.docker.com/compose" target="_blank" rel="external">Docker Compose</a>文件.你并不需要安装Docker Compose,尽管如果你使用的是Docker for Mac 或者 Docker for Windows的话默认是已经安装的了.然而<strong>docker stack deploy</strong>接受一个Docker Compose 格式的文件.你需要的文件就在Docker Example Voting App的根目录.文件名为docker-stack.yml.你也可以直接复制和粘贴以下内容:</p>
<pre><code>version: &quot;3&quot;
services:

  redis:
    image: redis:alpine
    ports:
      - &quot;6379&quot;
    networks:
      - frontend
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
  db:
    image: postgres:9.4
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == manager]
  vote:
    image: dockersamples/examplevotingapp_vote:before
    ports:
      - 5000:80
    networks:
      - frontend
    depends_on:
      - redis
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
      restart_policy:
        condition: on-failure
  result:
    image: dockersamples/examplevotingapp_result:before
    ports:
      - 5001:80
    networks:
      - backend
    depends_on:
      - db
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  worker:
    image: dockersamples/examplevotingapp_worker
    networks:
      - frontend
      - backend
    deploy:
      mode: replicated
      replicas: 1
      labels: [APP=VOTING]
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      placement:
        constraints: [node.role == manager]

  visualizer:
    image: dockersamples/visualizer
    ports:
      - &quot;8080:8080&quot;
    stop_grace_period: 1m30s
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      placement:
        constraints: [node.role == manager]

networks:
  frontend:
  backend:

volumes:
  db-data:
</code></pre><p>首先部署它，然后我们将会深入了解更多细节:</p>
<pre><code>docker stack deploy --compose-file docker-stack.yml vote
Creating network vote_frontend
Creating network vote_backend
Creating network vote_default
Creating service vote_vote
Creating service vote_result
Creating service vote_worker
Creating service vote_redis
Creating service vote_db
</code></pre><p>验证已经成功部署的堆栈,使用<code>docker stack services vote</code></p>
<pre><code>docker stack services vote
ID            NAME         MODE        REPLICAS  IMAGE
25wo6p7fltyn  vote_db      replicated  1/1       postgres:9.4
2ot4sz0cgvw3  vote_worker  replicated  1/1       dockersamples/examplevotingapp_worker:latest
9faz4wbvxpck  vote_redis   replicated  2/2       redis:alpine
ocm8x2ijtt88  vote_vote    replicated  2/2       dockersamples/examplevotingapp_vote:before
p1dcwi0fkcbb  vote_result  replicated  2/2       dockersamples/examplevotingapp_result:before
</code></pre><p>如果你查看<code>docker-stack.yml文件</code>,你将会看到文件定义    </p>
<ul>
<li>基于Python image的vote container</li>
<li>基于Node.js image的 result container</li>
<li>基于redis image的redis container,用以临时存储数据.</li>
<li>基于.NET image的.NET based worker app</li>
<li>基于postgres image 的Postgres 容器.</li>
</ul>
<p>Compose文件同样定义两个networks,front-tier 和back-tier .每个容器都是被放置在一个或者两个networks.一旦在那些networks中,它们就可以在那个network中以使用service名称的方式在代码中访问其它处于这个network的services.Services可以处于任意数量的networks.Services被它们各自的network所隔离.即使Services处于同一个network中,Services也只能通过name名称去发现彼此.想了解更多networking,点击<a href="https://github.com/docker/labs/tree/master/networking" target="_blank" rel="external">Networking Lab</a>.</p>
<p>再看一下Compose文件，你会发现它是以:</p>
<pre><code>version: &quot;3&quot;
</code></pre><p>version 3 这个版本号对compose 文件来说非常重要,因为<code>docker stack deploy</code> 命令不支持更早版本的.你将会看到那里同样有个<code>services</code>key,在下面的是一个分割键(<del>不就是一个yml文件么..这么啰嗦</del>)，用来隔离每个services,例如:</p>
<pre><code>vote:
   image: dockersamples/examplevotingapp_vote:before
   ports:
     - 5000:80
   networks:
     - frontend
   depends_on:
     - redis
   deploy:
     replicas: 2
     update_config:
       parallelism: 2
     restart_policy:
       condition: on-failure
</code></pre><p><code>image</code>键 指定了你能使用哪个镜像,在这个例子中就是<code>dockersamples/examplevotingapp_vote:before</code>，如果你对Compose足够熟悉,你可能知道有一个<code>build</code>键,用来基于Dockerfile进行构建.然而,<code>docker stack deploy</code>不支持<code>build</code>，所以你需要使用预构建镜像.</p>
<p>与<code>docker run</code>很相似,你能够定义<code>ports</code> 和 <code>networks</code>.<code>depends_on</code>键用来指定一个service只在另一个service之后才进行部署.在这个例子中<code>vote</code>只在<code>redis</code>之后进行部署.</p>
<p><code>deploy</code>键是version3 版本新增的.它允许你在部署到Swarm时指定不同的属性.在这个例子中,你指定了需要两个 replicas(复制品),也就是在Swarm上部署两个容器.你可以指定其它属性,像什么时候去重启(restart),使用什么样的<a href="https://docs.docker.com/engine/reference/builder/#healthcheck" target="_blank" rel="external">healthcheck</a>,配置约束(placement constraints),资源(resources)等等.</p>
<h2 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h2><p>现在app已经开始运行了,你可以通过<a href="http://localhost:5000来进行访问" target="_blank" rel="external">http://localhost:5000来进行访问</a>.</p>
<p>点击其中一个进行投票.你可以通过<a href="http://localhost:5001来查看结果" target="_blank" rel="external">http://localhost:5001来查看结果</a>.</p>
<p>NOTE: 如果你是在云环境运行这个教程，像AWS,Azure,Digital Ocean,或者GCE 你将不能直接通过localhost或者127.0.0.1来进行访问.一个变通的手段是利用ssh port forwarding.下面是Mac OS的一个例子.这同样适用于Windows 和Putty 用户.</p>
<pre><code>$ ssh -L 5000:localhost:5000 &lt;ssh-user&gt;@&lt;CLOUD_INSTANCE_IP_ADDRESS&gt;
</code></pre><h2 id="定做app"><a href="#定做app" class="headerlink" title="定做app"></a>定做app</h2><p>在这个步骤，你将会定制app并且重新部署它。我们将会使用相同的图片，但是通过使用<code>after</code>标签将投票选项cats和dogs换成Java和.NET.</p>
<h3 id="改变使用的图片"><a href="#改变使用的图片" class="headerlink" title="改变使用的图片"></a>改变使用的图片</h3><p>重新修改<code>docker-stack.yml</code>文件,将<code>vote</code>和<code>result</code> 图片修改为<code>after</code>标签,如下:</p>
<pre><code>vote:
   image: dockersamples/examplevotingapp_vote:after
   ports:
     - 5000:80
   networks:
     - frontend
   depends_on:
     - redis
   deploy:
     replicas: 2
     update_config:
       parallelism: 2
     restart_policy:
       condition: on-failure
 result:
   image: dockersamples/examplevotingapp_result:after
   ports:
     - 5001:80
   networks:
     - backend
   depends_on:
     - db
   deploy:
     replicas: 2
     update_config:
       parallelism: 2
       delay: 10s
     restart_policy:
       condition: on-failure
</code></pre><h3 id="重新部署"><a href="#重新部署" class="headerlink" title="重新部署"></a>重新部署</h3><p>重新部署跟之前的操作一样.</p>
<pre><code>docker stack deploy --compose-file docker-stack.yml vote
</code></pre><h3 id="测试运行-1"><a href="#测试运行-1" class="headerlink" title="测试运行"></a>测试运行</h3><p>再次查看app运行界面结果.</p>
<h3 id="移除堆栈"><a href="#移除堆栈" class="headerlink" title="移除堆栈"></a>移除堆栈</h3><p>从swarm移除堆栈.</p>
<pre><code>docker stack rm vote
</code></pre><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>现在你已经构建了一些镜像并且把它们推送到Docker Cloud，并且学习到基础的Swarm mode,你可以通过查看<a href="https://docs.docker.com/" target="_blank" rel="external">the documentation</a>文档了解更多信息.并且如果你需要任何帮助的话，可以访问<a href="https://forums.docker.com/" target="_blank" rel="external">Docker Forums</a>或者<a href="https://stackoverflow.com/tags/docker/" target="_blank" rel="external">StackOverflow</a>.</p>
]]></content>
      
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2.0用Docker运行web项目]]></title>
      <url>/2018/02/12/2.0%E7%94%A8Docker%E8%BF%90%E8%A1%8Cweb%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<p>在<a href="">1.0运行你的第一个容器</a>中我们已经顺利让docker运行起来，并且熟悉了一些术语的含义.通过这些基础，我们终于可以实践一些更有意义的东西——用Docker部署web项目.</p>
<a id="more"></a>
<h2 id="在容器中运行静态web网站"><a href="#在容器中运行静态web网站" class="headerlink" title="在容器中运行静态web网站"></a>在容器中运行静态web网站</h2><p>Note: 本节示例网站文件请点击<a href="https://github.com/docker/labs/tree/master/beginner/static-site" target="_blank" rel="external">这里</a>.</p>
<p>让我们从初始步骤开始.首先,我们使用Docker在容器中运行一个静态网站.这个网站是基于一个已存在的镜像.我们将从Docker Store拉取Docker镜像，运行容器，并且看到它是怎么建立 web server的.</p>
<p>你将要使用的镜像是一个单页网站，并且为了这个demo示范，已经创建完毕并且在Docker Store中可用，存储路径为dockersamples/static-site.你可以直接使用docker run命令下载并且运行这个镜像.如下:</p>
<pre><code>$ docker run -d dockersamples/static-site
</code></pre><p>Note: 这个当前版本的镜像必须添加-d 标识符才能运行.-d 标识符能够开启<strong>detached</strong>模式,它能从terminal/shell 终端 分派运行中的容器并且在容器启动后返回提示.我们正在调试这个镜像，至于现在，使用-d，即使它是你的第一个例子..(<del>好屌</del>)</p>
<p>该命令运行后,首先由于该镜像并不存在于你的主机上,所以Docker守护进程首先会从registry(Docker store)尝试拉取它然后再让它以容器的方式运行起来.</p>
<p>服务器运行起来后，如何访问网站？网站在哪个端口上运行？更重要的是,如何在我们的主机机器上面直接访问容器.</p>
<p>事实上，你可能还回答不了其中任意一个问题:)(<del>好想打死你</del>),在这种情况下,客户端并未告诉Docker Engine 去发布任何端口,所以你需要重新运行docker run命令去添加这个命令.</p>
<p>让我们重新运行命令，并添加一些新标识符去发布端口并且传递你的名字给容器，以自定义展示的信息.我们将会再次使用-d 选项在detached mode下运行容器.</p>
<p>首先，通过<strong>container ID</strong>停止你正在运行的容器.</p>
<p>因为之前我们已经在detached mode下运行容器,所以我们不需要开启其它的terminal来完成终止操作.运行<strong>docker ps</strong>命令来查看运行中的容器.</p>
<pre><code>$ docker ps
CONTAINER ID        IMAGE                  COMMAND                  CREATED             STATUS              PORTS               NAMES
a7a0e504ca3e        dockersamples/static-site   &quot;/bin/sh -c &apos;cd /usr/&quot;   28 seconds ago      Up 26 seconds       80/tcp, 443/tcp     stupefied_mahavira
</code></pre><p>检查CONTAINER ID那一列.接下来通过CONTAINER ID来停止运行中的容器,并且移除掉它.</p>
<pre><code>$ docker stop a7a0e504ca3e
$ docker rm   a7a0e504ca3e 
</code></pre><p>Note: 一个很cool的特性是你不需要指定整个CONTAINER ID.你可以只指定CONTAINER ID初始的几个字符，并且如果这几个字符在所有你运行的容器当中是唯一的话，那么Docker 客户端会自动获取到该容器.</p>
<pre><code>$ docker run --name static-site -e AUTHOR=&quot;Your Name&quot; -d -P dockersamples/static-site
e61d12292d69556eabe2a44c16cbd54486b2527e2ce4f95438e504afb7b02810
</code></pre><p>在上面的命令当中:</p>
<ul>
<li>-d 将会从我们的terminal以detached模式创建容器.</li>
<li>-P 将会发布所有暴露的容器端口到Docker主机的随机端口上.</li>
<li>-e 是你传递环境变量(environment variables)给容器的方式</li>
<li>–name 允许你指定一个容器的名字 </li>
<li>AUTHOR 是环境变量的名字并且”Your Name” 可以由你进行自定义.</li>
</ul>
<p>现在你可以通过<strong>docker port</strong>命令看到端口了.</p>
<pre><code>$ docker port static-site
443/tcp -&gt; 0.0.0.0:32772
80/tcp -&gt; 0.0.0.0:32773
</code></pre><p>如果你正在运行的是<strong>Docker for Mac</strong>,<strong>Docker for Windows</strong>,或者<strong>Docker on Linux</strong>,你可以打开 <a href="http://localhost:[YOUR_PORT_FOR" target="_blank" rel="external">http://localhost:[YOUR_PORT_FOR</a> 80/tcp].在我们的例子中就是<a href="http://localhost:32773" target="_blank" rel="external">http://localhost:32773</a>.</p>
<p>如果你是在Mac或者Windows上面使用Docker机器，你可以通过<strong>docker-machine</strong>命令行找到hostname.如下(假设你使用的是默认机器)</p>
<pre><code>$ docker-machine ip default
192.168.99.100
</code></pre><p>你可以打开 http://<your_ipaddress>:[YOUR_PORT_FOR 80/tcp] 去访问的网站.在我们的例子中就是:<a href="http://192.168.99.100:32773" target="_blank" rel="external">http://192.168.99.100:32773</a>.</your_ipaddress></p>
<p>你可以在同一时间运行第二个web服务器，制定一个自定义的host端口去映射你的对应容器的webserver.</p>
<pre><code>$ docker run --name static-site-2 -e AUTHOR=&quot;Your Name&quot; -d -p 8888:80 dockersamples/static-site
</code></pre><p>部署它在一个真正的服务器上，你只需要安装Docker，并且通过上述docker命令运行(就像在这个例子中你可以看到AUTHOR是你传递给Docker的那个环境变量)</p>
<p>现在你已经知道了如何在一个Docker容器当中运行webserver，如何创建你自己的Docker镜像？这将是我们在下一小节当中探索的问题.</p>
<p>但现在首先停止并移除容器.</p>
<pre><code>$ docker stop static-site
</code></pre><p>$ docker rm static-site</p>
<p>使用简略语法移除第二个网站:</p>
<pre><code>$ docker rm -f static-site-2
</code></pre><p>运行<strong>docker ps</strong>命令确认容器已经正确停止了.</p>
<h2 id="Docker-镜像"><a href="#Docker-镜像" class="headerlink" title="Docker 镜像"></a>Docker 镜像</h2><p>在这个小节中，让我们更加深入的了解Docker images究竟是什么东西.你将会建立自己的镜像，使用这个镜像在你的本地运行一个应用，然后最终，推送一些你自己的镜像到Docker Cloud.</p>
<p>Docker images 是容器的基础.在上一个例子中,你从registry(docker store)拉取 dockersamples/static-site 镜像并且让Docker 客户端基于这个镜像运行一个容器.通过运行<strong>docker images</strong>命令来查看你系统上本地可用的镜像列表.</p>
<pre><code>$ docker images
REPOSITORY             TAG                 IMAGE ID            CREATED             SIZE
dockersamples/static-site   latest              92a386b6e686        2 hours ago        190.5 MB
nginx                  latest              af4b3d7d5401        3 hours ago        190.5 MB
python                 2.7                 1c32174fd534        14 hours ago        676.8 MB
postgres               9.4                 88d845ac7a88        14 hours ago        263.6 MB
containous/traefik     latest              27b4e0c6b2fd        4 days ago          20.75 MB
node                   0.10                42426a5cba5f        6 days ago          633.7 MB
redis                  latest              4f5f397d4b7c        7 days ago          177.5 MB
mongo                  latest              467eb21035a8        7 days ago          309.7 MB
alpine                 3.3                 70c557e50ed6        8 days ago          4.794 MB
java                   7                   21f6ce84e43c        8 days ago          587.7 MB
</code></pre><p>上述是我从registry拉取的一系列镜像,以及一些我自己创建的(我们很快会看到如何做的).在你的机器上可能是一个不同的镜像列表.TAG 指的是这个镜像特别的snapshot 快照版本，ID则是这个镜像唯一的标识.</p>
<p>简单地说，你可以把一个镜像理解为类似git仓库的东西，镜像可以像git一样提交commit并且有多个版本.当你没有提供一个指定的版本，客户端默认会是最新的.</p>
<p>例如，你可以指定一个特定版本的ubuntu镜像如下所示:</p>
<pre><code>$ docker pull ubuntu:12.04
</code></pre><p>如果你没有指定一个特定版本的镜像,就像提到的那样,Dcoker 客户端将会默认选择最新版本的.</p>
<p>如例子所示,docker 将会拉取一个命名为: ubuntu:latest 的镜像:</p>
<pre><code>$ docker pull ubuntu
</code></pre><p>获取Docker image的途径，一是从registry(就比如Docker Store),二是自己创建.在Docker Store中有成百上千的镜像等你临幸.或者你也可以直接通过<strong>docker search</strong>命令来搜索镜像.</p>
<p>镜像之间的一个重要区别是关于 base images(基础镜像)和child images(子镜像).</p>
<ul>
<li><p>Base images 没有父级镜像,通常是操作系统的镜像，像ubuntu,alpine 或者debian.</p>
</li>
<li><p>Child images 是在base images的基础上构建起来的，通常添加了一些额外的功能.</p>
</li>
</ul>
<p>另一个关键概念是 official images (官方镜像) 和 user images(用户镜像).<br>(它们都可以是基础镜像或者子镜像)</p>
<ul>
<li>Official images 是Docker 官方审核认可的 镜像.Docker,一个负责审核和发布所有官方仓库内容的团队.上述的一系列镜像,python,node,alpine 和 nginx镜像都是官方(base)镜像.通过查看官方镜像文档来了解更多官方镜像.(<a href="https://docs.docker.com/docker-hub/official_repos/" target="_blank" rel="external">official Images Documentation</a>)</li>
<li>User images 是由用户创建和共享的镜像.它们是在base images的基础上构建并添加额外的功能.典型的它们都是以 <strong>user/image-name</strong>格式来命名.用户名一般是你的Docker Store用户名或者组织名.</li>
</ul>
<h2 id="创建你的首个镜像"><a href="#创建你的首个镜像" class="headerlink" title="创建你的首个镜像"></a>创建你的首个镜像</h2><p>Note: 这个小节的示例代码在<a href="https://github.com/docker/labs/tree/master/beginner/flask-app" target="_blank" rel="external">flask-app</a> 路径下的仓库.</p>
<p>现在你已经对镜像有了进一步的理解了，是时候创建你自己的镜像了.我们的目标是创建一个镜像并在沙盒中运行一个<a href="http://flask.pocoo.org/" target="_blank" rel="external">Flash</a>应用.</p>
<p>这个练习的目的是创建一个Docker镜像并运行一个Flask app.</p>
<p>我们首先一次性领取一个用Python Flask构建的随机生成猫图片的组件，然后通过编写一个Dockerfile 来<strong>dockerizing</strong>它.最后,我们构建镜像,然后运行它.</p>
<p>具体步骤如下:</p>
<ul>
<li>创建一个展示随机猫图片的Python Flask app.</li>
<li>编写一个Dockerfile文件</li>
<li>构建镜像</li>
<li>运行镜像</li>
<li>Dockerfile 命令总结</li>
</ul>
<h3 id="创建一个展示随机猫图片的Python-Flask-app"><a href="#创建一个展示随机猫图片的Python-Flask-app" class="headerlink" title="创建一个展示随机猫图片的Python Flask app"></a>创建一个展示随机猫图片的Python Flask app</h3><p>创建一个flask-app目录,然后在该目录下创建以下文件:</p>
<ul>
<li>app.py</li>
<li>requirements.txt</li>
<li>templates/index.html</li>
<li>Dockerfile</li>
</ul>
<h3 id="app-py"><a href="#app-py" class="headerlink" title="app.py"></a>app.py</h3><p>用以下内容创建app.py:</p>
<pre><code>from flask import Flask, render_template
import random

app = Flask(__name__)

# list of cat images
images = [
    &quot;http://ak-hdl.buzzfed.com/static/2013-10/enhanced/webdr05/15/9/anigif_enhanced-buzz-26388-1381844103-11.gif&quot;,
    &quot;http://ak-hdl.buzzfed.com/static/2013-10/enhanced/webdr01/15/9/anigif_enhanced-buzz-31540-1381844535-8.gif&quot;,
    &quot;http://ak-hdl.buzzfed.com/static/2013-10/enhanced/webdr05/15/9/anigif_enhanced-buzz-26390-1381844163-18.gif&quot;,
    &quot;http://ak-hdl.buzzfed.com/static/2013-10/enhanced/webdr06/15/10/anigif_enhanced-buzz-1376-1381846217-0.gif&quot;,
    &quot;http://ak-hdl.buzzfed.com/static/2013-10/enhanced/webdr03/15/9/anigif_enhanced-buzz-3391-1381844336-26.gif&quot;,
    &quot;http://ak-hdl.buzzfed.com/static/2013-10/enhanced/webdr06/15/10/anigif_enhanced-buzz-29111-1381845968-0.gif&quot;,
    &quot;http://ak-hdl.buzzfed.com/static/2013-10/enhanced/webdr03/15/9/anigif_enhanced-buzz-3409-1381844582-13.gif&quot;,
    &quot;http://ak-hdl.buzzfed.com/static/2013-10/enhanced/webdr02/15/9/anigif_enhanced-buzz-19667-1381844937-10.gif&quot;,
    &quot;http://ak-hdl.buzzfed.com/static/2013-10/enhanced/webdr05/15/9/anigif_enhanced-buzz-26358-1381845043-13.gif&quot;,
    &quot;http://ak-hdl.buzzfed.com/static/2013-10/enhanced/webdr06/15/9/anigif_enhanced-buzz-18774-1381844645-6.gif&quot;,
    &quot;http://ak-hdl.buzzfed.com/static/2013-10/enhanced/webdr06/15/9/anigif_enhanced-buzz-25158-1381844793-0.gif&quot;,
    &quot;http://ak-hdl.buzzfed.com/static/2013-10/enhanced/webdr03/15/10/anigif_enhanced-buzz-11980-1381846269-1.gif&quot;
]

@app.route(&apos;/&apos;)
def index():
    url = random.choice(images)
    return render_template(&apos;index.html&apos;, url=url)

if __name__ == &quot;__main__&quot;:
    app.run(host=&quot;0.0.0.0&quot;)
</code></pre><h3 id="requirements-txt"><a href="#requirements-txt" class="headerlink" title="requirements.txt"></a>requirements.txt</h3><p>为了为我们的app安装所需的Python模块,我们需要创建一个requirements.txt文件并且添加如下内容:</p>
<pre><code>Flask==0.10.1      
</code></pre><h3 id="templates-index-html"><a href="#templates-index-html" class="headerlink" title="templates/index.html"></a>templates/index.html</h3><p>创建一个命名为templates的目录并且在其中创建一个index.html 文件，具体内容如下:</p>
<pre><code>&lt;html&gt;
  &lt;head&gt;
    &lt;style type=&quot;text/css&quot;&gt;
      body {
        background: black;
        color: white;
      }
      div.container {
        max-width: 500px;
        margin: 100px auto;
        border: 20px solid white;
        padding: 10px;
        text-align: center;
      }
      h4 {
        text-transform: uppercase;
      }
    &lt;/style&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div class=&quot;container&quot;&gt;
      &lt;h4&gt;Cat Gif of the day&lt;/h4&gt;
      &lt;img src=&quot;{{url}}&quot; /&gt;
      &lt;p&gt;&lt;small&gt;Courtesy: &lt;a href=&quot;http://www.buzzfeed.com/copyranter/the-best-cat-gif-post-in-the-history-of-cat-gifs&quot;&gt;Buzzfeed&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre><h2 id="编写一个Dockerfile文件"><a href="#编写一个Dockerfile文件" class="headerlink" title="编写一个Dockerfile文件"></a>编写一个Dockerfile文件</h2><p>我们想要为这个web app创建一个Docker镜像.就像上述提到的,所有的用户镜像都是基于基础镜像.因为我们的应用是用Python编写的,我们将会在Alpine的基础上构建我们的Python镜像.完成这一点我们需要使用一个Dockerfile.</p>
<p><a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="external">Dockerfile</a>实际上只是一个包含了一系列docker指令的text文件,当创建镜像的时候,docker 守护进程会从后台调用.Dockerfile包含了所有Docker应该如何去运行这个app的所有信息 - 一个基础Docker 镜像从哪里运行,你项目代码的路径,它拥有的所有依赖 和启动是运行的命令.这是一个镜像创建过程自动化的最普遍方式.这种方式最大的优点是你在Dockerfile编写的<a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="external">命令</a>完全等同于它们的linux命令.这意味着你不用去学习新的语法来创建你的Dockerfile文件.</p>
<p>1.创建一个命名为Dockerfile的文件,并添加如下描述内容.</p>
<p>我们将通过<strong>From</strong>关键字指令指定我们的基础镜像:</p>
<pre><code>FROM alpine:3.5
</code></pre><p>2.下一步骤通常是编写复制文件和安装依赖的指令.但首先我们需要安装Python pip 包 到alpine linux发布版本.其它依赖安装也是同样，包括python interpreter 解释器.添加如下<a href="https://docs.docker.com/engine/reference/builder/#run" target="_blank" rel="external">RUN</a>命令:</p>
<pre><code>RUN apk add --update py2-pip
</code></pre><p>3.添加 Flask Application的组成文件</p>
<p>安装所有我们app运行所需的Python requirements.通过以下命令完成:</p>
<pre><code>COPY requirements.txt /usr/src/app/
RUN pip install --no-cache-dir -r /usr/src/app/requirements.txt
</code></pre><p>通过<a href="https://docs.docker.com/engine/reference/builder/#copy" target="_blank" rel="external">COPY</a> 命令复制你早期创建的文件到我们的镜像当中.</p>
<pre><code>COPY app.py /usr/src/app/
COPY templates/index.html /usr/src/app/templates/
</code></pre><p>4.指定需要暴露的接口.flask app运行的端口是5000.</p>
<pre><code>EXPOSE 5000
</code></pre><p>5.最后的步骤是运行我们的应用-<strong>python ./app.py</strong>.使用<a href="https://docs.docker.com/engine/reference/builder/#cmd" target="_blank" rel="external">CMD</a>指令:</p>
<pre><code>CMD [&quot;python&quot;, &quot;/usr/src/app/app.py&quot;]
</code></pre><p>CMD命令的主要目的是告诉容器当它启动时默认应该运行哪些指令.</p>
<p>6.验证你的Dockerfile文件.</p>
<p>我们的Dockerfile文件终于准备好了.内容汇总如下:</p>
<pre><code># our base image
FROM alpine:3.5

# Install python and pip
RUN apk add --update py2-pip

# install Python modules needed by the Python app
COPY requirements.txt /usr/src/app/
RUN pip install --no-cache-dir -r /usr/src/app/requirements.txt

# copy files required for the app to run
COPY app.py /usr/src/app/
COPY templates/index.html /usr/src/app/templates/

# tell the port number the container should expose
EXPOSE 5000

# run the application
CMD [&quot;python&quot;, &quot;/usr/src/app/app.py&quot;]
</code></pre><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>现在你已经有了自己的Dockerfile,你可以构建自己的镜像.<strong>docker build</strong>命令依据Dockerfile完成创建docker image的一系列复杂任务.</p>
<p>当你运行以下的<strong>docker build</strong>命令,确保用你的用户名去替换 <strong><your_username></your_username></strong> .这个用户名必须跟你在<a href="https://cloud.docker.com/" target="_blank" rel="external">Docker Cloud</a>注册创建的用户名保持一致.如果你还没有完成这一步,请先到Docker Cloud创建一个账户.</p>
<p><strong>docker build</strong> 命令相当简单 - 它提供一个可选的-t 参数 和包含Dockerfile文件的路径 - <strong>.</strong> 表明当前路径:</p>
<pre><code>$ docker build -t &lt;YOUR_USERNAME&gt;/myfirstapp .
Sending build context to Docker daemon 9.728 kB
Step 1 : FROM alpine:latest
 ---&gt; 0d81fc72e790
Step 2 : RUN apk add --update py-pip
 ---&gt; Running in 8abd4091b5f5
fetch http://dl-4.alpinelinux.org/alpine/v3.3/main/x86_64/APKINDEX.tar.gz
fetch http://dl-4.alpinelinux.org/alpine/v3.3/community/x86_64/APKINDEX.tar.gz
(1/12) Installing libbz2 (1.0.6-r4)
(2/12) Installing expat (2.1.0-r2)
(3/12) Installing libffi (3.2.1-r2)
(4/12) Installing gdbm (1.11-r1)
(5/12) Installing ncurses-terminfo-base (6.0-r6)
(6/12) Installing ncurses-terminfo (6.0-r6)
(7/12) Installing ncurses-libs (6.0-r6)
(8/12) Installing readline (6.3.008-r4)
(9/12) Installing sqlite-libs (3.9.2-r0)
(10/12) Installing python (2.7.11-r3)
(11/12) Installing py-setuptools (18.8-r0)
(12/12) Installing py-pip (7.1.2-r0)
Executing busybox-1.24.1-r7.trigger
OK: 59 MiB in 23 packages
 ---&gt; 976a232ac4ad
Removing intermediate container 8abd4091b5f5
Step 3 : COPY requirements.txt /usr/src/app/
 ---&gt; 65b4be05340c
Removing intermediate container 29ef53b58e0f
Step 4 : RUN pip install --no-cache-dir -r /usr/src/app/requirements.txt
 ---&gt; Running in a1f26ded28e7
Collecting Flask==0.10.1 (from -r /usr/src/app/requirements.txt (line 1))
  Downloading Flask-0.10.1.tar.gz (544kB)
Collecting Werkzeug&gt;=0.7 (from Flask==0.10.1-&gt;-r /usr/src/app/requirements.txt (line 1))
  Downloading Werkzeug-0.11.4-py2.py3-none-any.whl (305kB)
Collecting Jinja2&gt;=2.4 (from Flask==0.10.1-&gt;-r /usr/src/app/requirements.txt (line 1))
  Downloading Jinja2-2.8-py2.py3-none-any.whl (263kB)
Collecting itsdangerous&gt;=0.21 (from Flask==0.10.1-&gt;-r /usr/src/app/requirements.txt (line 1))
  Downloading itsdangerous-0.24.tar.gz (46kB)
Collecting MarkupSafe (from Jinja2&gt;=2.4-&gt;Flask==0.10.1-&gt;-r /usr/src/app/requirements.txt (line 1))
  Downloading MarkupSafe-0.23.tar.gz
Installing collected packages: Werkzeug, MarkupSafe, Jinja2, itsdangerous, Flask
  Running setup.py install for MarkupSafe
  Running setup.py install for itsdangerous
  Running setup.py install for Flask
Successfully installed Flask-0.10.1 Jinja2-2.8 MarkupSafe-0.23 Werkzeug-0.11.4 itsdangerous-0.24
You are using pip version 7.1.2, however version 8.1.1 is available.
You should consider upgrading via the &apos;pip install --upgrade pip&apos; command.
 ---&gt; 8de73b0730c2
Removing intermediate container a1f26ded28e7
Step 5 : COPY app.py /usr/src/app/
 ---&gt; 6a3436fca83e
Removing intermediate container d51b81a8b698
Step 6 : COPY templates/index.html /usr/src/app/templates/
 ---&gt; 8098386bee99
Removing intermediate container b783d7646f83
Step 7 : EXPOSE 5000
 ---&gt; Running in 31401b7dea40
 ---&gt; 5e9988d87da7
Removing intermediate container 31401b7dea40
Step 8 : CMD python /usr/src/app/app.py
 ---&gt; Running in 78e324d26576
 ---&gt; 2f7357a0805d
Removing intermediate container 78e324d26576
Successfully built 2f7357a0805d
</code></pre><p>如果你并没有alpine:3.5的镜像,客户端将会首先拉取这个镜像，然后再创建你的镜像.因此,你运行命令之后的输出可能会稍有不同.如果一切运行正常,你的镜像就应该创建准备完毕.运行<strong>docker images</strong> 命令查看你的镜像(<your_username>/myfirstapp)是否展示.</your_username></p>
<h3 id="运行你的镜像"><a href="#运行你的镜像" class="headerlink" title="运行你的镜像"></a>运行你的镜像</h3><p>下一步骤是运行你的镜像并且查看它是否正常工作.</p>
<pre><code>$ docker run -p 8888:5000 --name myfirstapp YOUR_USERNAME/myfirstapp
 * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)
</code></pre><p>访问 <a href="http://localhost:8888" target="_blank" rel="external">http://localhost:8888</a> 确认你的app是否存活.<br>注意: 如果你使用Docker Machine,你可能需要打开另一个终端并且使用<strong>docker-machine ip default</strong>命令来决定容器的ip地址.</p>
<p>点击在web浏览器的刷新按钮来查看更多猫的图片.</p>
<h3 id="推送你的镜像-push-your-image"><a href="#推送你的镜像-push-your-image" class="headerlink" title="推送你的镜像(push your image)"></a>推送你的镜像(push your image)</h3><p>现在你已经创建并且测试了你的镜像,你可以把它推送到<a href="https://cloud.docker.com/" target="_blank" rel="external">Docker Cloud</a>.</p>
<p>首先你必须登录到你的Docker Cloud 账户:</p>
<pre><code>docker login
</code></pre><p>输入你的用户名和密码然后执行如下命令:</p>
<pre><code>docker push YOUR_USERNAME/myfirstapp
</code></pre><p>现在你这个容器的工作以及完成了,停止并且移除它因为你不再需要再次使用它了.</p>
<p>打开另一个终端窗口并且执行如下命令:</p>
<pre><code>$ docker stop myfirstapp
$ docker rm myfirstapp
</code></pre><p>或者</p>
<pre><code>$ docker rm -f myfirstapp
</code></pre><h3 id="Dockerfile-命令总结"><a href="#Dockerfile-命令总结" class="headerlink" title="Dockerfile 命令总结"></a>Dockerfile 命令总结</h3><p>这是一个我们在Dockerfile中使用的基础命令的快速总结.</p>
<ul>
<li><p><strong>FROM</strong> 是Dockerfile的开头.Dockerfile必须以<strong>FROM</strong>命令开头.镜像是在layers中创建,这意味着你可以使用另一个镜像作为base镜像.<strong>FROM</strong>命令定义你的base layer.它将镜像的名称作为参数.你可以选择是否添加维护者的Docker Cloud用户名和镜像版本，以 username/imagename:version的格式.</p>
</li>
<li><p><strong>RUN</strong>是用来构建你创建的镜像.对于每个<strong>RUN</strong>命令来说，Docker将会运行这个命令然后为这个镜像创建新的layer.这种方式你可以你可以轻松回滚你的镜像到邻近的状态.<strong>RUN</strong>指令的语法是在RUN命令后放置shell命令(eg.,RUN mkdir /user/local/foo).这将会自动在一个 /bin/sh shell环境中运行.你可以像这样定义一个不同的shell:<strong>RUN /bin/bash -c ‘mkdir /user/local/foo’</strong></p>
</li>
<li><p>COPY 复制本地文件到容器当中.</p>
</li>
<li><p>CMD 定义在镜像启动阶段将会运行的命令.不同于<strong>RUN</strong>，这个命令不会为镜像创建新的layer,只是单纯的运行命令.每个Dockerfille/Image只能有一个<strong>CMD</strong>.如果你需要运行多个指令,最好的方式是用<strong>CMD</strong>运行一个script脚本.<strong>CMD</strong>需要你告诉它去哪里运行命令,不像<strong>RUN</strong>.示例如下:</p>
<pre><code>CMD [&quot;python&quot;, &quot;./app.py&quot;]

CMD [&quot;/bin/bash&quot;, &quot;echo&quot;, &quot;Hello World&quot;]
</code></pre></li>
<li><p>EXPOSE 为用户的镜像创建线索，比如ports提供服务.它包含了可以经由<strong>$ docker inspect <container-id></container-id></strong>命令恢复的所有信息.</p>
</li>
</ul>
<p>Note: <strong>EXPOSE</strong>命令实际上并不是让主机上的任何端口变得可访问!相反,这意味着需要通过使用 <strong> $ docker run -p</strong>命令在发布端口</p>
<ul>
<li>PUSH 推送你的镜像到Docker Cloud,或一个<a href="https://docs.docker.com/registry/" target="_blank" rel="external">私人的registry</a>.</li>
</ul>
<p>Note: 如果你想要了解更多关于Dockerfiles的内容,查看<a href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/" target="_blank" rel="external">Best practices for writing Dockerfiles</a></p>
]]></content>
      
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[1.0 运行你的第一个容器]]></title>
      <url>/2018/02/04/%E8%BF%90%E8%A1%8C%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AE%B9%E5%99%A8/</url>
      <content type="html"><![CDATA[<h2 id="运行你的第一个容器"><a href="#运行你的第一个容器" class="headerlink" title="运行你的第一个容器"></a>运行你的第一个容器</h2><p>现在你已经准备好了所有的东西,是时候开始实践了.<br>在这个章节,我们将要运行一个 Alpine Linux 容器(一个轻量级的linux 发布版本)在你的系统上并且尝试一下docker的运行命令.</p>
<a id="more"></a>
<p>首先运行以下命令:</p>
<pre><code>$ docker pull alpine
</code></pre><p>Note:根据你在系统中安装docker的方式,在运行以上命令后你可能会看到一个ermission denied的错误.尝试在安装教程中的命令去验证你的安装.如果你是Linux系统,你可能需要在你的命令前面加上sudo.或者你可以创建一个docker group来拜托这个问题.</p>
<p>pull命令从Dcoker仓库获取 alpine 镜像并且保存在我们的系统中.你可以使用<strong>docker images</strong> 命令来查看在你系统中的所有镜像.</p>
<pre><code>$ docker images
</code></pre><table>
<thead>
<tr>
<th style="text-align:center">REPOSITORY</th>
<th style="text-align:center">TAG</th>
<th style="text-align:center">IMAGE ID</th>
<th style="text-align:center">CREATED</th>
<th style="text-align:center">VIRTUAL SIZE</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">alpine</td>
<td style="text-align:center">latest</td>
<td style="text-align:center">c51f86c28340</td>
<td style="text-align:center">4 weeks ago</td>
<td style="text-align:center">1.109 MB</td>
</tr>
<tr>
<td style="text-align:center">hello-world</td>
<td style="text-align:center">latest</td>
<td style="text-align:center">690ed74de00f</td>
<td style="text-align:center">5 months ago</td>
<td style="text-align:center">960 B</td>
</tr>
</tbody>
</table>
<h2 id="Docker-Run"><a href="#Docker-Run" class="headerlink" title="Docker Run"></a>Docker Run</h2><p>接下来基于这个镜像运行一个Docker 容器.只需要通过 <strong>docker run</strong>命令我们就能做到这一点.</p>
<pre><code>$ docker run alpine ls -l
total 48
drwxr-xr-x    2 root     root          4096 Mar  2 16:20 bin
drwxr-xr-x    5 root     root           360 Mar 18 09:47 dev
drwxr-xr-x   13 root     root          4096 Mar 18 09:47 etc
drwxr-xr-x    2 root     root          4096 Mar  2 16:20 home
drwxr-xr-x    5 root     root          4096 Mar  2 16:20 lib
......
......
</code></pre><ol>
<li><p>当你运行 <strong>docker run</strong>命令的时候,Docker 客户端联系Docker守护进程.</p>
</li>
<li><p>Docker 守护进程会首先检查所有本地存储,确定镜像(本例是alpine)在本地可用,如果不可用的话，从Docker Store 下载.(直到我们发布<strong>docker pull alpine</strong> 之前,下载步骤不是必须的)</p>
</li>
<li><p>Docker 守护进程创建容器接下来在容器内运行一个命令.</p>
</li>
<li><p>Docker守护进程将该命令的输出以流的形式返回给客户端.</p>
</li>
</ol>
<p>接下来运行如下命令:</p>
<pre><code>$ docker run alpine echo &quot;hello from alpine&quot;
hello from alpine
</code></pre><p>“hello from alpine”就是实际的输出.在这个场景,Docker 客户端忠实地在我们的alpine容器运行echo命令然后自动退出.如果你多加注意的话，你会发现所有的一切发生的相当快.镜像在虚拟机中启动,运行一个命令然后销毁它.现在你知道为什么容器运行速度如此之快！</p>
<p>接下来运行另一个命令:</p>
<pre><code>$ docker run alpine /bin/sh
</code></pre><p>什么都没有发生,这些交互式shell会在运行任意scripted命令之后退出.除非它们是在一个交互式终端中运行 - 所以为了让它不自动退出，你需要用<strong>docker run -it alpine /bin/sh</strong>命令来代替.</p>
<p>你现在便处于容器 shell 当中 ,并且可以尝试使用一些命令比如:ls -l,uname -a 或者其它等等.通过<strong>exit</strong>命令来退出容器.</p>
<p><strong>docker ps</strong>命令向你展示所有正确运行的容器.</p>
<pre><code>$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES  
</code></pre><p>因为没有运行中的容器,所以展示列表是空的.接下来尝试使用一个有用的变量,<br>运行 <strong>docker ps -a</strong>命令</p>
<pre><code>$ docker ps -a
</code></pre><p>$ docker ps -a<br>|CONTAINER ID        |IMAGE               |COMMAND                  |CREATED             |STATUS                     | PORTS               |NAMES|<br>|:—-:|:—-:|:—-:|:—-:|:—-:|:—-:|:—-:|<br>|36171a5da744        |alpine             | “/bin/sh”               | 5 minutes ago       |Exited (0) 2 minutes ago   |                     |fervent_newton|<br>|a6a9d46d0b2f       | alpine            | “echo ‘hello from alp”    |6 minutes ago       |Exited (0) 6 minutes ago    |                    |lonely_kilby<br>|ff0a5c3750b9       | alpine            | “ls -l”                   |8 minutes ago      | Exited (0) 8 minutes ago     |                   |elated_ramanujan<br>|c317d0a9e3d2       | hello-world        | “/hello”                 |34 seconds ago     |Exited (0) 12 minutes ago    |                   |stupefied_mcclintock    </p>
<p>上面是所有你能够运行的容器.可以注意到<strong>STATUS</strong>列展示了容器是在几分钟前推出的.接下来尝试在一个容器中运行多条命令.</p>
<pre><code>$ docker run -it alpine /bin/sh
/ # ls
bin      dev      etc      home     lib      linuxrc  media    mnt      proc     root     run      sbin     sys      tmp      usr      var
/ # uname -a
Linux 97916e8cb5dc 4.4.27-moby #1 SMP Wed Oct 26 14:01:48 UTC 2016 x86_64 Linux
</code></pre><p>通过运行<strong>run</strong>命令附加<strong>-it</strong>标志的方式使我们能在容器中以交互式终端的方式进行交互.现在你能在容器运行任意数量的命令.</p>
<p>如上述我们已经展示了你可能使用最频繁的命令,你可以通过使用<strong>docker run –help</strong>来展示该命令所有支持的附加选项.随着你继续深入的学习,我们也将会看到<strong>docker run</strong>命令支持的更多变量.</p>
<h2 id="Terminology-术语"><a href="#Terminology-术语" class="headerlink" title="Terminology(术语)"></a>Terminology(术语)</h2><p>在上一小节,你已经看到了许多Docker 特殊的术语,你可能会对其中一些感到困惑.所以在我们继续深入之前,先阐述一下一些我们在Docker 生态系统(ecosystem)中经常性使用的术语.</p>
<ul>
<li><p>Images - 用来创建容器的属于我们应用的文件系统和相关配置.想要知道更多关于Docker镜像,运行<strong>docker inspect alpine</strong>命令.在上面的demo中,我们通过<strong>docker pull</strong>命令来下载alpine镜像.当你执行<strong>docker run hello-world</strong>命令,它同样会在后台运行<strong>docker pull</strong>命令以下载hello-world镜像.</p>
</li>
<li><p>Containers - 用以运行Docker镜像的实例 - 容器会运行实际的应用.一个容器包含一个应用和它的所有依赖.它和其它容器共享内核,并且在宿主操作系统上面的用户空间以一个隔离进程运行.你通过<strong>docker run</strong>命令创建一个容器以运行alpine image 的实例.通过<strong>docker ps</strong>命令来展示一系列正在运行的容器.</p>
</li>
<li><p>Docker daemon - Docker 守护进程是一个运行在主机上的后台服务,它用于提供管理构建,运行和分配Docker容器.</p>
</li>
<li><p>Docker client - Docker 客户端,这是一个命令行工具，允许用户和Docker守护进程进行交互.</p>
</li>
<li><p>Docker Store - Docker 商店,一个Docker镜像的登记处,在这个平台上你可以查询找到可信以及可供企业使用的容器,插件以及 其它Docker的特别版本.在这个教程中你将在之后使用到它.</p>
</li>
</ul>
<p><a href="https://github.com/darkleave/labs/blob/master/beginner/chapters/alpine.md" target="_blank" rel="external">参考链接</a></p>
]]></content>
      
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu docker 安装]]></title>
      <url>/2018/02/04/Ubuntu%20docker%20%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h2 id="Docker是什么"><a href="#Docker是什么" class="headerlink" title="Docker是什么?"></a>Docker是什么?</h2><p>Docker是一种容器技术.<br>Docker容器技术已在云计算市场上风靡一时了，使docker容器技术如此受欢迎的原因是，容器技术可实现不同云计算之间应用程序的可移植性，以及提供了一个把应用程序拆分为分布式组件的方法，此外，用户还可以管理和扩展这些组件成为集群.</p>
<a id="more"></a>
<p><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="external">官网链接</a></p>
<p>一旦你完成docker的安装后,可以用如下命令对你的docker进行测试:</p>
<pre><code>$ docker run hello-world
Unable to find image &apos;hello-world:latest&apos; locally
latest: Pulling from library/hello-world
03f4658f8b78: Pull complete
a3ed95caeb02: Pull complete
Digest: sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7
Status: Downloaded newer image for hello-world:latest

Hello from Docker.
This message shows that your installation appears to be working correctly.
...
</code></pre><h3 id="卸载老版本"><a href="#卸载老版本" class="headerlink" title="卸载老版本"></a>卸载老版本</h3><p>老版本的Docker一般命名为 docker 或者 docker-engine.在安装新版本前需要对他们进行卸载.</p>
<pre><code>$ sudo apt-get remove docker docker-engine docker.io
</code></pre><p>即时apt-get命令提示没有上述的任意包被安装也没有影响.<br>/var/lib/docker/ 文件夹一般包含images, containers, volumes, and networks等.<br> Docker CE包现在被命名为: docker-ce</p>
<h3 id="安装Docker-CE"><a href="#安装Docker-CE" class="headerlink" title="安装Docker CE"></a>安装Docker CE</h3><p>你可以根据需要选择以下合适的方式来安装Docker CE：</p>
<ul>
<li><p>通过repository进行安装<br>在你第一次在一台新主机上安装docker之前,你需要先设置Docker仓库,之后,你就可以直接通过仓库安装和更新Docker.<br><strong>设置仓库</strong></p>
<ol>
<li><p>更新apt命令的包索引</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div></pre></td></tr></table></figure>
</li>
<li><p>安装仓库使用所需的https依赖包</p>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install \</div><div class="line">apt-transport-https \</div><div class="line">ca-certificates \</div><div class="line">curl \</div><div class="line">software-properties-common</div></pre></td></tr></table></figure>
</li>
<li><p>添加Docker的官方GPG key</p>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</div></pre></td></tr></table></figure>
<p>验证你现在拥有的指纹秘钥:(eg:)<br><code>9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88</code><br>搜索最后八个长度的指纹:</p>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">      $ sudo apt-key fingerprint 0EBFCD88</div><div class="line">      </div><div class="line">      pub   4096R/0EBFCD88 2017-02-22</div><div class="line">            Key fingerprint = 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88</div><div class="line">      uid                  Docker Release (CE deb) &lt;docker@docker.com&gt;</div><div class="line">      sub   4096R/F273FCD8 2017-02-22</div><div class="line">      ```    </div><div class="line">4. 使用以下命令来设置你的stable repository(稳定仓库).你总是需要stable repository,即使你想要从edge或者test仓库安装构建也一样.想要添加edge或者test仓库,只需在以下命令的stable后面添加相应的edge或者test即可.</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<pre><code>   提示：lsb_release -cs 子命令返回你Ubuntu发布版本的名称,例如xenial.有时候,一些发布版本,比如Linux Mint,你可能需要把 $(lsb_release -cs)命令换成你对应的父级 Ubuntu 发布版本比如,如果你正在使用Linux Mint Rafaela,你可能要使用 trusty.

    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">**x86_64 / amd64**</div></pre></td></tr></table></figure>

$ sudo add-apt-repository \
   &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable&quot;
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">   **提示:从17.06版本开始,stable 发布时会同样推送到edge和test仓库.**</div><div class="line">   </div><div class="line">      [Learn about stable and edge channels.](https://docs.docker.com/install/)</div><div class="line">      </div><div class="line">**Docker CE安装步骤**</div><div class="line">  </div><div class="line">1. 更新apt包索引...</div></pre></td></tr></table></figure>

    $ sudo apt-get update

    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">      </div><div class="line">2. 安装最新版本的Docker CE或者直接到下一步安装特定版本的Docker CE.</div><div class="line">    任何当前的版本会被替换为安装的版本.</div></pre></td></tr></table></figure>

    $ sudo apt-get install docker-ce
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"> </div></pre></td></tr></table></figure>


  获取多个Docker仓库?
  如果你有多个可用的Docker仓库,安装或者更新操作没有指定特定的版本,apt-get install 或者apt-get update 命令总是会按照最高的可用版本,可能并不满足你稳定性的需要.
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">     </div><div class="line"> 3. 在生产环境,你需要使用特定版本的Docker CE版本而不是一直使用最新的.</div><div class="line">    以下命令会列出所有可用版本(输出只展示了一部分):</div><div class="line"></div><div class="line">     ```  </div><div class="line">     </div><div class="line">     $ apt-cache madison docker-ce</div><div class="line">    docker-ce | 17.12.0~ce-0~ubuntu | https://download.docker.com/linux/ubuntu xenial/stable amd64 Packages</div><div class="line">     ```  </div><div class="line">    该列表数据依赖于你可用的仓库.选择一个特定的版本去安装.第二列是版本字符串.第三列是仓库名,用来表明该仓库的来源地址和稳定性等级,stable,edge或者test.想要安装特定的版本,只需在包名后面添加(=)后和版本字符串即可.</div><div class="line">    </div><div class="line">     ```  </div><div class="line">     $ sudo apt-get install docker-ce=&lt;VERSION&gt;   </div><div class="line">     ``` </div><div class="line">Docker守护进程在安装完成后会自动启动.</div><div class="line"></div><div class="line">4. 通过运行hello-world image 来验证Docker CE是否已经正确安装.</div><div class="line">``` </div><div class="line">$ sudo docker run hello-world</div><div class="line">  ```    </div><div class="line">这个命令会下载一个测试镜像并且在容器中运行它.当容器运行,它会打印提示信息并且退出.</div><div class="line"></div><div class="line">Dcoker CE 已经安装并且运行.docker group 已经创建但是没有用户添加到它上面.你需要通过使用sudo命令去运行Docker命令.继续到[Linux postinstall](https://docs.docker.com/install/linux/linux-postinstall/)去允许未授权的用户能够运行Docker命令和一些可选的配置步骤.</div><div class="line"></div><div class="line">**升级 DOCKER CE**</div><div class="line"></div><div class="line">升级Docker CE,首先同样通过sudo命令更新包索引apt-get update,然后按照按照指令,选择新的版本直接进行安装即可.</div><div class="line"></div><div class="line">**卸载Docker CE**</div><div class="line"></div><div class="line">1. 卸载Docker CE包:</div></pre></td></tr></table></figure>
</code></pre><p>   $ sudo apt-get purge docker-ce<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2. 手动删除镜像，容器等文件(Images, containers, volumes, or customized configuration files)</div></pre></td></tr></table></figure></p>
<p>   $ sudo rm -rf /var/lib/docker<br>   ```<br>   你必须删除所有已编辑的配置文件.</p>
]]></content>
      
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HikariCP 配置说明]]></title>
      <url>/2018/01/30/HikariCP%20%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<p>Fast, simple, reliable. HikariCP is a “zero-overhead” production ready JDBC connection pool. At roughly 130Kb, the library is very light.</p>
<a id="more"></a>
<p><a href="https://github.com/darkleave/HikariCP" target="_blank" rel="external">官网连接</a></p>
<h2 id="必要配置"><a href="#必要配置" class="headerlink" title="必要配置"></a>必要配置</h2><ol>
<li>dataSourceClassName 数据源驱动名</li>
<li>jdbcUrl jdbc数据库连接</li>
<li>username 用户名</li>
<li>password 密码</li>
</ol>
<p>其中dataSourceClassName和jdbcUrl二选一，当使用比较老版本的驱动时，需要同时设置jdbcUrl和driverClassName，dataSourceClassName则不用进行设置</p>
<h2 id="可选配置"><a href="#可选配置" class="headerlink" title="可选配置"></a>可选配置</h2><ol>
<li><p>常用属性</p>
<ul>
<li>connectionTimeout 连接超时时间,最小时间为250 ms，默认为30000ms(30秒)</li>
<li><p>idleTimeout 空闲超时时间，这个属性用来控制空闲连接允许保留在连接池中的最大时间，这个属性只有在minimumIdle（最小空闲连接数）小于maximumPoolSize(最大连接数)时才会生效,空闲连接断开会有15s-30s的延迟变动时间.在这个超时时间之前空闲连接永远不会断开,当连接池达到minimumIdle,连接将永远不会断开，即使处于闲置状态.值为0表示空闲连接将永远不会从连接池中移除，最小值为10000ms （10s),默认值为600000(10min)</p>
</li>
<li><p>maxLifetime 最大生命周期.这个属性用来控制连接池中连接的最大生命周期,一个使用中的连接永远不会被断开,只有当它处于关闭状态然后才会被移除.推荐设置比任何数据库或基础设施规定的连接时间限制少至少30秒。 值为0表示没有最大寿命（无限寿命）， 默认：1800000（30分钟）,由于HikariCP的housekeeper默认每30s运行一次,以维护minimumIdle最小空闲连接数，它可能添加新连接或者断开空闲连接，所以你必须设置maxLifetime属性比（mysql)wait_timeout时间少一些来避免 broken connection / exceptions.意思就是说比如mysql wait_timeout为10min,此时有一个连接由于达到超时时间，mysql主动断开了连接，而HakariCP仍然持有此连接，如果再使用此连接去请求数据库则会发生异常,设置maxLifetime最大生命周期比wait_timeout少30s后,就能确保再housekeeper运行期间提前断开此连接，避免发生异常.</p>
</li>
<li>connectionTestQuery 连接测试查询,如果你的驱动支持jdbc4，则不需要设置此属性，这个属性是为那些不支持Connection.isValid() API的古董级驱动准备的，这是一个查询，用来确保所有请求得到的连接都是alive有效的，尝试不设置这个属性运行连接池，如果你的驱动不支持jdbc4，HikariCP会有错误日志提示.Default:None</li>
<li>minimumIdle 最小空闲连接，当空闲连接小于这个值并且总连接数小于maximumPoolSize（最大连接数)HikariCP会尽可能快速有效率地创建额外的连接，然而为了最大限度地提高性能和响应能力，不建议设置这个值，而是用固定大小的连接池取代.Default:与maximumPoolSize相同</li>
<li>maximumPoolSize 最大连接池数量，包括使用中和空闲的连接，当达到最大连接池数量时，再尝试获取连接，只能得到connectionTimeout 超时信息.Default:10.</li>
<li>metricRegistry 度量注册, Default: none <a href="https://www.jianshu.com/p/070f615dfb57" target="_blank" rel="external">参考链接</a></li>
<li>healthCheckRegistry 健康检查注册  Default: none</li>
<li>poolName 连接池名字,一般用于日志输出 Default: auto-generated</li>
</ul>
</li>
<li>不常使用<ul>
<li>initializationFailTimeout 初始化失败超时时间 Default: 1</li>
<li>isolateInternalQueries 是否隔离默认查询 Default: 1</li>
<li>allowPoolSuspension 是否允许连接池暂停 Default: false</li>
<li>readOnly 连接是否只读 Default: false</li>
<li>registerMbeans 是否注册JMX Management Beans Default: false</li>
<li>catalog 目录服务</li>
<li>connectionInitSql 连接初始化sql Default: none</li>
<li>driverClassName 驱动名称  Default: none</li>
<li>transactionIsolation 事务隔离 Default: driver default</li>
<li>validationTimeout 验证超时时间 Default: 5000 </li>
<li>leakDetectionThreshold 最低发现阈值 Default: 0</li>
<li>dataSource 数据源 Default: none</li>
<li>schema 架构  Default: driver default</li>
<li>threadFactory 线程工厂 Default: none </li>
<li>scheduledExecutor 计划执行器 Default: none</li>
</ul>
</li>
</ol>
<h2 id="Statement-Cache"><a href="#Statement-Cache" class="headerlink" title="Statement Cache"></a>Statement Cache</h2><p>Many connection pools, including Apache DBCP, Vibur, c3p0 and others offer PreparedStatement caching. HikariCP does not. Why?<br>许多连接池，包括Aache DBCP,Vibur,c3p0 等都是提供PreparedStatement caching.HikariCP并不这样做，为什么？</p>
<p>At the connection pool layer PreparedStatements can only be cached per connection. If your application has 250 commonly executed queries and a pool of 20 connections you are asking your database to hold on to 5000 query execution plans – and similarly the pool must cache this many PreparedStatements and their related graph of objects.</p>
<p>在连接池中每个连接只能缓存各自的PreparedStatements对象.如果你的应用有250个要执行的普通查询和一个20个连接的连接池，然后你需要不间断地请求你的数据库去完成一个5000查询的执行计划，显然你的连接池必须缓存这所有的PreparedStatements对象和它们相关联的表对象.</p>
<p>Most major database JDBC drivers already have a Statement cache that can be configured, including PostgreSQL, Oracle, Derby, MySQL, DB2, and many others. JDBC drivers are in a unique position to exploit database specific features, and nearly all of the caching implementations are capable of sharing execution plans across connections. This means that instead of 5000 statements in memory and associated execution plans, your 250 commonly executed queries result in exactly 250 execution plans in the database. Clever implementations do not even retain PreparedStatement objects in memory at the driver-level but instead merely attach new instances to existing plan IDs.</p>
<p>许多主流的数据库，它们的jdbc驱动已经有了一个可配置的Statement缓存，包括PostgreSQL, Oracle, Derby, MySQL, DB2等等.JDBC驱动是唯一能利用数据库特定属性的方式，并且近乎所有的缓存实现都可以通过连接共享执行计划.这意味着你的250个普通查询结果在数据库中就是250个执行计划，而不是存储在内存中的5000个statements及其相关联的执行计划.聪明的缓存实现在驱动这一级别并不保持PreparedStatement对象在内存当中，而是为已存在的计划创建新的PreparedStatement实例.</p>
<p>Using a statement cache at the pooling layer is an anti-pattern, and will negatively impact your application performance compared to driver-provided caches.</p>
<p>在连接池层使用statement缓存是一个反面教材,并且相较驱动提供的缓存会对你的应用性能造成更大的消极影响.</p>
<h2 id="Log-Statement-Text-Slow-Query-Logging"><a href="#Log-Statement-Text-Slow-Query-Logging" class="headerlink" title="Log Statement Text / Slow Query Logging"></a>Log Statement Text / Slow Query Logging</h2><p>Like Statement caching, most major database vendors support statement logging through properties of their own driver. This includes Oracle, MySQL, Derby, MSSQL, and others. Some even support slow query logging. For those few databases that do not support it, several options are available. We have received a report that p6spy works well, and also note the availability of log4jdbc and jdbcdslog-exp.</p>
<p>就像Statement缓存，许多主流数据库供应商支持通过它们驱动的属性配置来添加statement logging的日志功能.这些数据库包括racle, MySQL, Derby, MSSQL等等.一些甚至支持<a href="https://baike.baidu.com/item/%E6%85%A2%E6%9F%A5%E8%AF%A2/9200910?fr=aladdin" target="_blank" rel="external">慢查询</a>日志记录功能.对于那些少数不支持的数据库,还有许多可用的其它方式.比如,p6spy,log4jdbc以及jdbcdslog-exp等等.</p>
<p><a href="https://github.com/brettwooldridge/HikariCP/wiki/MySQL-Configuration" target="_blank" rel="external">mysql推荐配置</a><br><a href="http://blog.csdn.net/suwu150/article/details/52745055" target="_blank" rel="external">Statement和PreparedStatement对象的区别</a></p>
]]></content>
      
        
        <tags>
            
            <tag> pool </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git 换行符LF与CRLF转换问题]]></title>
      <url>/2018/01/29/git%20%E6%8D%A2%E8%A1%8C%E7%AC%A6LF%E4%B8%8ECRLF%E8%BD%AC%E6%8D%A2%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>在各操作系统下，文本文件所使用的换行符是不一样的。UNIX/Linux 使用的是 0x0A（LF），早期的 Mac OS 使用的是0x0D（CR），后来的 OS X 在更换内核后与 UNIX 保持一致了。但 DOS/Windows 一直使用 0x0D0A（CRLF）作为换行符。Git提供了一个“换行符自动转换”功能。这个功能默认处于“自动模式”，当你在签出文件时，它试图将 UNIX 换行符（LF）替换为 Windows 的换行符（CRLF）；当你在提交文件时，它又试图将 CRLF 替换为 LF。Git 的“换行符自动转换”功能听起来似乎很智能、很贴心，因为它试图一方面保持仓库内文件的一致性（UNIX 风格），一方面又保证本地文件的兼容性（Windows 风格）。但遗憾的是，这个功能是有 bug 的，而且在短期内都不太可能会修正。</p>
<a id="more"></a>
<h2 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h2><p>1.Git设置</p>
<p>git config –global core.autocrlf false<br>git config –global core.safecrlf true<br>含义：<br>AutoCRLF<br><strong>提交时转换为LF，检出时转换为CRLF</strong><br>git config –global core.autocrlf true</p>
<p><strong>提交时转换为LF，检出时不转换</strong><br>git config –global core.autocrlf input</p>
<p><strong>提交检出均不转换</strong><br>git config –global core.autocrlf false<br>SafeCRLF<br><strong>拒绝提交包含混合换行符的文件</strong><br>git config –global core.safecrlf true</p>
<p><strong>允许提交包含混合换行符的文件</strong><br>git config –global core.safecrlf false</p>
<p><strong>提交包含混合换行符的文件时给出警告</strong><br>git config –global core.safecrlf warn</p>
<p>一般在开发中为了保持项目换行符转换不出错，将autocrlf设置为false,<br>然后重新clone项目。</p>
<p>也可以直接修改git全局配置文件，windows配置路径:<br>C:\Users\Administrator.gitconfig</p>
<pre><code>[filter &quot;lfs&quot;]
    required = true
    clean = git-lfs clean %f
    smudge = git-lfs smudge %f
[user]
    name = zhonghanzhong
[user]
    email = yyesnnovv@aliyun.com
[credential]
    helper = manager
[http]
    sslVerify = false
[core]
    autocrlf = false
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> DevelopNote </tag>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jooq介绍]]></title>
      <url>/2018/01/15/jooq%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h2 id="jooq是什么"><a href="#jooq是什么" class="headerlink" title="jooq是什么"></a>jooq是什么</h2><p>jOOQ（Java Object Oriented Querying，即面向Java对象查询）是基于Java访问关系型数据库的工具包，轻量，简单，并且足够灵活，可以轻松的使用Java面向对象语法来实现各种复杂的sql;是一个高效地合并了复杂SQL、类型安全、源码生成、ActiveRecord、存储过程以及高级数据类型的Java API的类库.</p>
<a id="more"></a>
<h2 id="jooq的特点"><a href="#jooq的特点" class="headerlink" title="jooq的特点"></a>jooq的特点</h2><ol>
<li><p>类型安全(TypeSafe SQL)<br>jooq使用内部的DSL(domain specific language领域专用语言)对sql进行模块化，并且使用java编译器去编译你的sql语法，元数据以及数据类型.</p>
</li>
<li><p>映射代码生成<br>jooq可以从你的数据库元数据生成对应的java映射类，生成的实体类按照数据库字段以驼峰命名法重新命名，同时用户可以通过继承实体类的方式来添加自定义属性及方法.</p>
</li>
<li><p>ActiveRecords<br>我们jooq通过代码生成器生成的ActiveReocrds可以直接对POJO(Plain Old Java Object)映射对象进行CRUD(Create Retrieve Update Delete)操作</p>
</li>
<li><p>多架构(多模式Schema)<br>jooq允许你在运行时环境动态配置数据库模式和表并且支持行级别的安全性,即通过不同的jooq Configuration配置得到对应的DSLContext上下文再对数据库进行CRUD操作.</p>
</li>
<li><p>标准化<br>jooq可以通过配置数据库方言来支持不同的数据库:mysql,oracle等等,比如通过spring配置spring.jooq.sql-dialect = mysql 来支持mysql数据库</p>
</li>
<li><p>查询生命周期<br>jooq通过一些接口开放SQL生成的生命周期，包括日志，事务处理，id生成，sql转换等等。</p>
</li>
<li><p>存储过程<br>jooq允许你在模块化sql语句中嵌入存储过程调用.</p>
</li>
<li><p>强大的Fluent API和完善文档,使用方便流畅</p>
</li>
</ol>
<p><strong>参考链接</strong><br><a href="https://www.jianshu.com/p/46164f9ba53c" target="_blank" rel="external">https://www.jianshu.com/p/46164f9ba53c</a><br><a href="https://www.jooq.org/" target="_blank" rel="external">https://www.jooq.org/</a></p>
]]></content>
      
        
        <tags>
            
            <tag> jooq </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[setting.xml详解]]></title>
      <url>/2018/01/11/setting.xml%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>Maven setting.xml详细配置说明</p>
<a id="more"></a>
<h2 id="1-文件概览"><a href="#1-文件概览" class="headerlink" title="1.文件概览"></a>1.文件概览</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;
         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0
            http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt;
    &lt;localRepository/&gt;
    &lt;interactiveMode/&gt;
    &lt;offline/&gt;
    &lt;pluginGroups/&gt;
    &lt;servers/&gt;
    &lt;mirrors/&gt;
    &lt;proxies/&gt;
    &lt;profiles/&gt;
    &lt;activeProfiles/&gt;
&lt;/settings&gt;
</code></pre><p>通过配置文件中的注释，我们可以看到，有两种配置此文件的方法</p>
<pre><code>1.用户级别
${user.home}/.m2/settings.xml
可以通过指令 -s /path/to/user/settings.xml

2.全局级别
${maven.home}/conf/settings.xml.
可以通过指令 -gs /path/to/global/settings.xml
</code></pre><h2 id="2-localRepository"><a href="#2-localRepository" class="headerlink" title="2.localRepository"></a>2.localRepository</h2><p>localRepository用于构建系统的本地仓库的路径。<br>默认的值是${user.home}/.m2/repository。</p>
<pre><code>Default: ${user.home}/.m2/repository
 &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;
</code></pre><h2 id="3-interactiveMode"><a href="#3-interactiveMode" class="headerlink" title="3.interactiveMode"></a>3.interactiveMode</h2><p>interactiveMode 用于决定maven是否在需要输出的时候提示你，默认true。如果是false，它将使用合理的默认值，或者基于一些设置。</p>
<h2 id="4-offline"><a href="#4-offline" class="headerlink" title="4.offline"></a>4.offline</h2><p>决定maven是否在构建的时候进行网络传输。<br>默认false，表示联网状态，true为取消联网。<br>在某些情况下设置为true是很有用的，比如jar无法从网上下载等</p>
<h2 id="5-pluginGroups"><a href="#5-pluginGroups" class="headerlink" title="5.pluginGroups"></a>5.pluginGroups</h2><p>pluginGroups 插件组</p>
<pre><code>&lt;pluginGroups&gt;
    &lt;pluginGroup&gt;org.mortbay.jetty&lt;/pluginGroup&gt;
 &lt;/pluginGroups&gt;
</code></pre><p>这样Maven可以使用简单的命令执行org.morbay.jetty:jetty-maven-plugin:run</p>
<pre><code>mvn jetty run
</code></pre><p>我们同样可以在pom文件中看到相似的配置，只是在这配置了就起到全局的作用，而不用每个项目中pom配置jetty   </p>
<h2 id="6-proxies"><a href="#6-proxies" class="headerlink" title="6.proxies"></a>6.proxies</h2><p>此项用于设置http代理<br>有时候由于安全问题，需要配置http代理，通过代理服务才能正常访问外部仓库下载资源可以ping repo1.maven.org来访问中央仓库<br>telnet 218.14.227.197 3128 来查看代理地址以及端口是否畅通</p>
<pre><code>&lt;proxies&gt;
    &lt;proxy&gt;
      &lt;id&gt;optional&lt;/id&gt;
      &lt;active&gt;true&lt;/active&gt;
      &lt;protocol&gt;http&lt;/protocol&gt;&lt;!--代理协议--&gt;
      &lt;username&gt;proxyuser&lt;/username&gt;
      &lt;password&gt;proxypass&lt;/password&gt;
      &lt;host&gt;proxy.host.net&lt;/host&gt;
      &lt;port&gt;80&lt;/port&gt;
     &lt;nonProxyHosts&gt;local.net|some.host.com&lt;/nonProxyHosts&gt;
    &lt;/proxy&gt;
  &lt;/proxies&gt;
</code></pre><ul>
<li>id：proxy的唯一标识，用来区别proxy元素。</li>
<li>active：表示是否激活代理，如果配置多个，默认是第一个生效</li>
<li>username，password：提供连接代理服务器时的认证。</li>
<li>host，port：主机地址，端口号</li>
<li>nonProxyHosts：用来表示哪些主机名不需要代理，可以用|来分<br>割多个，此外也支持通配符，<br>如：*.goole.com表示所有以goole.com结尾的都不需要通过代理      </li>
</ul>
<h2 id="7-servers"><a href="#7-servers" class="headerlink" title="7.servers"></a>7.servers</h2><p>这是一个认证配置的列表,根据系统中使用的server-id控制。认证配置在maven连接到远程服务时使用。</p>
<pre><code>&lt;servers&gt;
    &lt;!--使用登录方式--&gt;
    &lt;server&gt;
          &lt;id&gt;deploymentRepo&lt;/id&gt;
          &lt;username&gt;repouser&lt;/username&gt;
          &lt;password&gt;repopwd&lt;/password&gt;
        &lt;/server&gt;

        &lt;!-- 使用秘钥认证 --&gt;
        &lt;server&gt;
          &lt;id&gt;siteServer&lt;/id&gt;
          &lt;privateKey&gt;/path/to/private/key&lt;/privateKey&gt;
          &lt;passphrase&gt;可空&lt;/passphrase&gt;
        &lt;/server&gt;
&lt;/servers&gt;
</code></pre><h2 id="8-mirrors"><a href="#8-mirrors" class="headerlink" title="8.mirrors"></a>8.mirrors</h2><p>指定镜像仓库位置用于从远程仓库下载资源</p>
<pre><code>&lt;mirrors&gt;
    &lt;mirror&gt;
      &lt;id&gt;mirrorId&lt;/id&gt;
      &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;
      &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;
      &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;
    &lt;/mirror&gt;
&lt;/mirrors&gt;
</code></pre><ul>
<li>id：用于继承和直接查找，唯一</li>
<li>mirrorOf：镜像所包含的仓库的Id</li>
<li>name：唯一标识，用于区分镜像站</li>
<li>url：镜像路径    </li>
</ul>
<h2 id="9-profiles"><a href="#9-profiles" class="headerlink" title="9.profiles"></a>9.profiles</h2><ol>
<li>settings.xml中时意味着该profile是全局的，所以只能配置范围宽泛一点配置信息，比如远程仓库等。而一些比较细致一点的需要定义在项目的pom.xml中。</li>
<li>profile可以让我们定义一系列的配置信息，然后指定其激活条件。<br>根据每个profile对应不同的激活条件和配置信息，从而达到不同环境使用不同配置。</li>
<li>例子：通过profile定义jdk1.5以上使用一套配置，jdk1.5以下使用另外一套配置；或者通过操作系统来使用不同的配置信息。</li>
<li>settings.xml中的信息有repositories、pluginRepositories和properties。定义在properties的值可以在pom.xml中使用。</li>
</ol>
<p>Activation</p>
<pre><code>&lt;profiles&gt;
    &lt;profile&gt;
              &lt;id&gt;test&lt;/id&gt;
              &lt;activation&gt;
                 &lt;activeByDefault&gt;false&lt;/activeByDefault&gt;
                 &lt;jdk&gt;1.5&lt;/jdk&gt;
                 &lt;os&gt;
                     &lt;name&gt;Windows XP&lt;/name&gt;
                     &lt;family&gt;Windows&lt;/family&gt;
                     &lt;arch&gt;x86&lt;/arch&gt;
                     &lt;version&gt;5.1.2600&lt;/version&gt;
                 &lt;/os&gt;
                 &lt;property&gt;
                     &lt;name&gt;mavenVersion&lt;/name&gt;
                     &lt;value&gt;2.0.3&lt;/value&gt;
                 &lt;/property&gt;
                 &lt;file&gt;
                &lt;exists&gt;${basedir}/file2.properties&lt;/exists&gt;
               &lt;missing&gt;${basedir}/file1.properties&lt;/missing&gt;
                &lt;/file&gt;
             &lt;/activation&gt;
         &lt;/profile&gt;
&lt;/profiles&gt;
</code></pre><ul>
<li>jdk：检测到对应jdk版本就激活</li>
<li>os：针对不同操作系统</li>
<li>property：当maven检测到property（pom中如${name}这样的）profile将被激活</li>
<li>file：如果存在文件，激活，不存在文件激活    </li>
</ul>
<p>通过以下命令查看哪些profile将生效</p>
<pre><code>mvn help:active-profiles
</code></pre><p>properites</p>
<p>Maven的属性是值占位符，就像Ant中的一样。如果X是一个属性的话，在POM中可以使用${X}来进行任意地方的访问。他们来自于五种不同的风格，所有都可以从settings.xml文件中访问到。</p>
<pre><code>1. env.x：“env.”前缀会返回当前的环境变量。如${env.PATH}就是使用了$path环境变量（windosws中的%PATH%）。
2. project.x：一个点“.”分割的路径，在POM中就是相关的元素的值。例如：&lt;project&gt;&lt;version&gt;1.0&lt;/version&gt;&lt;/project&gt;就可以通过${project.version}来访问。
3. settings.x：一个点“.”分割的路径，在settings.xml中就是相对应的元素的值，例如：&lt;settings&gt;&lt;offline&gt;false&lt;/offline&gt;&lt;/settings&gt;就可以通过${settings.offline}来访问。
4. Java系统属性：通过java.lang.System.getProperties()来访问的属性都可以像POM中的属性一样访问，例如：${java.home}
</code></pre><ol>
<li><p>x：被<properties>或者外部文件定义的属性，值可以这样访问${someVar}    </properties></p>
 <profiles><br>     <profile><br>       …<br>       <properties><br>         <user.install>${user.home}/our-project</user.install><br>       </properties><br>       …<br>     </profile><br>  </profiles>

</li>
</ol>
<p>上面这个profile如果被激活，那么在pom中${user.install}就可以被访问了。</p>
<p>Repositories</p>
<p>Repositories是远程项目集合maven用来移植到本地仓库用于构建系统。如果来自本地仓库，Maven调用它的插件和依赖关系。不同的远程仓库可能包含不同的项目，当profile被激活，他们就会需找匹配的release或者snapshot构件。</p>
<pre><code>&lt;profiles&gt;
    &lt;profile&gt;
      ...
      &lt;repositories&gt;
        &lt;repository&gt;
          &lt;id&gt;codehausSnapshots&lt;/id&gt;
          &lt;name&gt;Codehaus Snapshots&lt;/name&gt;
          &lt;releases&gt;
            &lt;enabled&gt;false&lt;/enabled&gt;
            &lt;updatePolicy&gt;always&lt;/updatePolicy&gt;
            &lt;checksumPolicy&gt;warn&lt;/checksumPolicy&gt;
          &lt;/releases&gt;
          &lt;snapshots&gt;
            &lt;enabled&gt;true&lt;/enabled&gt;
            &lt;updatePolicy&gt;never&lt;/updatePolicy&gt;
            &lt;checksumPolicy&gt;fail&lt;/checksumPolicy&gt;
          &lt;/snapshots&gt;
          &lt;url&gt;http://snapshots.maven.codehaus.org/maven2&lt;/url&gt;
          &lt;layout&gt;default&lt;/layout&gt;
        &lt;/repository&gt;
      &lt;/repositories&gt;
      &lt;pluginRepositories&gt;
        ...
      &lt;/pluginRepositories&gt;
      ...
    &lt;/profile&gt;
  &lt;/profiles&gt;
</code></pre><ol>
<li>releases，snapshots：这是各种构件的策略，release或者snapshot。这两个集合，POM就可以根据独立仓库任意类型的依赖改变策略。如：一个人可能只激活下载snapshot用来开发。</li>
<li>enable：true或者false，决定仓库是否对于各自的类型激活(release 或者 snapshot)。</li>
<li>updatePolicy: 这个元素决定更新频率。maven将比较本地pom的时间戳（存储在仓库的maven数据文件中）和远程的. 有以下选择: always, daily (默认), interval:X (x是代表分钟的整型) ， never.</li>
<li>checksumPolicy：当Maven向仓库部署文件的时候，它也部署了相应的校验和文件。可选的为：ignore，fail，warn，或者不正确的校验和。</li>
<li>layout：在上面描述仓库的时候，提到他们有统一的布局。Maven 2有它仓库默认布局。然而，Maven 1.x有不同布局。使用这个元素来表明它是default还是legacy。      </li>
</ol>
<h2 id="10-activeProfiles"><a href="#10-activeProfiles" class="headerlink" title="10.activeProfiles"></a>10.activeProfiles</h2><pre><code>&lt;activeProfiles&gt;
    &lt;activeProfile&gt;alwaysActiveProfile&lt;/activeProfile&gt;
    &lt;activeProfile&gt;anotherAlwaysActiveProfile&lt;/activeProfile&gt;
&lt;/activeProfiles&gt;
</code></pre><p>每个activeProfile元素对应一个profile id的值，任何profile id被定义到activeProfile的profile将被激活。</p>
<p><strong>原文:<a href="http://blog.csdn.net/odeviloo/article/details/51999878" target="_blank" rel="external">http://blog.csdn.net/odeviloo/article/details/51999878</a></strong></p>
<p><strong>参考：<a href="http://maven.apache.org/settings.html" target="_blank" rel="external">http://maven.apache.org/settings.html</a></strong></p>
]]></content>
      
        
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Pom.xml详解]]></title>
      <url>/2018/01/11/Pom.xml%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>Maven pom.xml详细配置说明</p>
<a id="more"></a>
<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><p>pom中节点如下分布</p>
<pre><code>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;
         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0
            http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;!-- 基本配置 --&gt;
    &lt;groupId&gt;...&lt;/groupId&gt;
    &lt;artifactId&gt;...&lt;/artifactId&gt;
    &lt;version&gt;...&lt;/version&gt;
    &lt;packaging&gt;...&lt;/packaging&gt;


    &lt;!-- 依赖配置 --&gt;
    &lt;dependencies&gt;...&lt;/dependencies&gt;
    &lt;parent&gt;...&lt;/parent&gt;
    &lt;dependencyManagement&gt;...&lt;/dependencyManagement&gt;
    &lt;modules&gt;...&lt;/modules&gt;
    &lt;properties&gt;...&lt;/properties&gt;

    &lt;!-- 构建配置 --&gt;
    &lt;build&gt;...&lt;/build&gt;
    &lt;reporting&gt;...&lt;/reporting&gt;

    &lt;!-- 项目信息 --&gt;
    &lt;name&gt;...&lt;/name&gt;
    &lt;description&gt;...&lt;/description&gt;
    &lt;url&gt;...&lt;/url&gt;
    &lt;inceptionYear&gt;...&lt;/inceptionYear&gt;
    &lt;licenses&gt;...&lt;/licenses&gt;
    &lt;organization&gt;...&lt;/organization&gt;
    &lt;developers&gt;...&lt;/developers&gt;
    &lt;contributors&gt;...&lt;/contributors&gt;

    &lt;!-- 环境设置 --&gt;
    &lt;issueManagement&gt;...&lt;/issueManagement&gt;
    &lt;ciManagement&gt;...&lt;/ciManagement&gt;
    &lt;mailingLists&gt;...&lt;/mailingLists&gt;
    &lt;scm&gt;...&lt;/scm&gt;
    &lt;prerequisites&gt;...&lt;/prerequisites&gt;
    &lt;repositories&gt;...&lt;/repositories&gt;
    &lt;pluginRepositories&gt;...&lt;/pluginRepositories&gt;
    &lt;distributionManagement&gt;...&lt;/distributionManagement&gt;
    &lt;profiles&gt;...&lt;/profiles&gt;
&lt;/project&gt;
</code></pre><h2 id="2-基本配置"><a href="#2-基本配置" class="headerlink" title="2.基本配置"></a>2.基本配置</h2><ul>
<li>modelVersion：pom模型版本，maven2和3只能为4.0.0</li>
<li>groupId：组ID，maven用于定位</li>
<li>artifactId：在组中的唯一ID用于定位</li>
<li>version：项目版本</li>
<li>packaging：项目打包方式，有以下值：pom, jar, maven-plugin, ejb, war, ear, rar, par</li>
</ul>
<h2 id="3-依赖配置"><a href="#3-依赖配置" class="headerlink" title="3.依赖配置"></a>3.依赖配置</h2><p>parent</p>
<p>用于确定父项目的坐标。</p>
<pre><code>&lt;parent&gt;
    &lt;groupId&gt;com.learnPro&lt;/groupId&gt;
    &lt;artifactId&gt;SIP-parent&lt;/artifactId&gt;
    &lt;relativePath&gt;&lt;/relativePath&gt;
    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
&lt;/parent&gt;
</code></pre><ul>
<li>groupId：父项目的构件标识符</li>
<li>artifactId：父项目的唯一标识符</li>
<li>relativePath：Maven首先在当前项目的找父项目的pom，然后在文件系统的这个位置（relativePath），然后在本地仓库，再在远程仓库找。</li>
<li>version：父项目的版本</li>
</ul>
<p>modules</p>
<p>有些maven项目会做成多模块的，这个标签用于指定当前项目所包含的所有模块。之后对这个项目进行的maven操作，会让所有子模块也进行相同操作。</p>
<pre><code>&lt;modules&gt;
   &lt;module&gt;com-a&lt;/module&gt;
   &lt;module&gt;com-b&lt;/module&gt;
   &lt;module&gt;com-c&lt;/module&gt;
&lt;/modules&gt;
</code></pre><p>properties</p>
<p>用于定义pom常量</p>
<pre><code>&lt;properties&gt;
    &lt;java.version&gt;1.7&lt;/java.version&gt;
&lt;/properties&gt;
</code></pre><p>上面这个常量可以在pom文件的任意地方通过${java.version}来引用</p>
<p>dependencies</p>
<p>项目相关依赖配置，如果在父项目写的依赖，会被子项目引用，一般父项目会将子项目公用的依赖引入（将在之后详细讲解）</p>
<pre><code>&lt;dependencies&gt;
    &lt;dependency&gt;
            &lt;groupId&gt;junit&lt;/groupId&gt;
            &lt;artifactId&gt;junit&lt;/artifactId&gt;
            &lt;version&gt;4.12&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre><p>这边依赖和中央仓库中的一致，就可以引入对应的jar</p>
<p>dependencyManagement</p>
<p>配置写法同dependencies</p>
<pre><code>&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
    .....
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
</code></pre><p>在父模块中定义后，子模块不会直接使用对应依赖，但是在使用相同依赖的时候可以不加版本号：</p>
<pre><code>父项目：
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;junit&lt;/groupId&gt;
            &lt;artifactId&gt;junit&lt;/artifactId&gt;
            &lt;version&gt;4.12&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;

子项目：

&lt;dependency&gt;
    &lt;groupId&gt;junit&lt;/groupId&gt;
    &lt;artifactId&gt;junit&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre><p>这样的好处是，父项目统一了版本，而且子项目可以在需要的时候才引用对应的依赖    </p>
<h2 id="4-构建配置"><a href="#4-构建配置" class="headerlink" title="4.构建配置"></a>4.构建配置</h2><p>build</p>
<p>用于配置项目构建相关信息</p>
<pre><code>&lt;build&gt;    
    &lt;!--该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。--&gt;    
    &lt;sourceDirectory/&gt;    
    &lt;!--该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。--&gt;    
  &lt;scriptSourceDirectory/&gt;    
  &lt;!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。--&gt;    
  &lt;testSourceDirectory/&gt;    
  &lt;!--被编译过的应用程序class文件存放的目录。--&gt;    
  &lt;outputDirectory/&gt;    
  &lt;!--被编译过的测试class文件存放的目录。--&gt;    
  &lt;testOutputDirectory/&gt;    
  &lt;!--使用来自该项目的一系列构建扩展--&gt;    
  &lt;extensions&gt;    
   &lt;!--描述使用到的构建扩展。--&gt;    
   &lt;extension&gt;    
    &lt;!--构建扩展的groupId--&gt;    
    &lt;groupId/&gt;    
    &lt;!--构建扩展的artifactId--&gt;    
    &lt;artifactId/&gt;    
    &lt;!--构建扩展的版本--&gt;    
    &lt;version/&gt;    
   &lt;/extension&gt;    
  &lt;/extensions&gt;    
  &lt;!--当项目没有规定目标（Maven2 叫做阶段）时的默认值--&gt;    
  &lt;defaultGoal/&gt;    
  &lt;!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。--&gt;    
  &lt;resources&gt;    
   &lt;!--这个元素描述了项目相关或测试相关的所有资源路径--&gt;    
   &lt;resource&gt;    
    &lt;!-- 描述了资源的目标路径。该路径相对target/classes目录（例如${project.build.outputDirectory}）。举个例 子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven /messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。--&gt;    
    &lt;targetPath/&gt;    
    &lt;!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。--&gt;    
    &lt;filtering/&gt;    
    &lt;!--描述存放资源的目录，该路径相对POM路径--&gt;    
    &lt;directory/&gt;    
    &lt;!--包含的模式列表，例如**/*.xml.--&gt;    
    &lt;includes/&gt;    
    &lt;!--排除的模式列表，例如**/*.xml--&gt;    
    &lt;excludes/&gt;    
   &lt;/resource&gt;    
  &lt;/resources&gt;    
  &lt;!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。--&gt;    
  &lt;testResources&gt;    
   &lt;!--这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明--&gt;    
   &lt;testResource&gt;    
    &lt;targetPath/&gt;&lt;filtering/&gt;&lt;directory/&gt;&lt;includes/&gt;&lt;excludes/&gt;    
   &lt;/testResource&gt;    
  &lt;/testResources&gt;    
  &lt;!--构建产生的所有文件存放的目录--&gt;    
  &lt;directory/&gt;    
  &lt;!--产生的构件的文件名，默认值是${artifactId}-${version}。--&gt;    
  &lt;finalName/&gt;    
  &lt;!--当filtering开关打开时，使用到的过滤器属性文件列表--&gt;    
  &lt;filters/&gt;    
  &lt;!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置--&gt;    
  &lt;pluginManagement&gt;    
   &lt;!--使用的插件列表 。--&gt;    
   &lt;plugins&gt;    
    &lt;!--plugin元素包含描述插件所需要的信息。--&gt;    
    &lt;plugin&gt;    
     &lt;!--插件在仓库里的group ID--&gt;    
     &lt;groupId/&gt;    
     &lt;!--插件在仓库里的artifact ID--&gt;    
     &lt;artifactId/&gt;    
     &lt;!--被使用的插件的版本（或版本范围）--&gt;    
     &lt;version/&gt;    
     &lt;!--是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。--&gt;    
     &lt;extensions/&gt;    
     &lt;!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。--&gt;    
     &lt;executions&gt;    
      &lt;!--execution元素包含了插件执行需要的信息--&gt;    
      &lt;execution&gt;    
       &lt;!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标--&gt;    
       &lt;id/&gt;    
       &lt;!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段--&gt;    
       &lt;phase/&gt;    
       &lt;!--配置的执行目标--&gt;    
       &lt;goals/&gt;    
       &lt;!--配置是否被传播到子POM--&gt;    
       &lt;inherited/&gt;    
       &lt;!--作为DOM对象的配置--&gt;    
       &lt;configuration/&gt;    
      &lt;/execution&gt;    
     &lt;/executions&gt;    
     &lt;!--项目引入插件所需要的额外依赖--&gt;    
     &lt;dependencies&gt;    
      &lt;!--参见dependencies/dependency元素--&gt;    
      &lt;dependency&gt;    
       ......    
      &lt;/dependency&gt;    
     &lt;/dependencies&gt;         
     &lt;!--任何配置是否被传播到子项目--&gt;    
     &lt;inherited/&gt;    
     &lt;!--作为DOM对象的配置--&gt;    
     &lt;configuration/&gt;    
    &lt;/plugin&gt;    
   &lt;/plugins&gt;    
  &lt;/pluginManagement&gt;    
  &lt;!--使用的插件列表--&gt;    
  &lt;plugins&gt;    
   &lt;!--参见build/pluginManagement/plugins/plugin元素--&gt;    
   &lt;plugin&gt;    
    &lt;groupId/&gt;&lt;artifactId/&gt;&lt;version/&gt;&lt;extensions/&gt;    
    &lt;executions&gt;    
     &lt;execution&gt;    
      &lt;id/&gt;&lt;phase/&gt;&lt;goals/&gt;&lt;inherited/&gt;&lt;configuration/&gt;    
     &lt;/execution&gt;    
    &lt;/executions&gt;    
    &lt;dependencies&gt;    
     &lt;!--参见dependencies/dependency元素--&gt;    
     &lt;dependency&gt;    
      ......    
     &lt;/dependency&gt;    
    &lt;/dependencies&gt;    
    &lt;goals/&gt;&lt;inherited/&gt;&lt;configuration/&gt;    
   &lt;/plugin&gt;    
  &lt;/plugins&gt;    
 &lt;/build&gt;
</code></pre><p>reporting</p>
<p>该元素描述使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看到所有报表的链接。</p>
<pre><code>&lt;reporting&gt;    
  &lt;!--true，则，网站不包括默认的报表。这包括“项目信息”菜单中的报表。--&gt;    
  &lt;excludeDefaults/&gt;    
  &lt;!--所有产生的报表存放到哪里。默认值是${project.build.directory}/site。--&gt;    
  &lt;outputDirectory/&gt;    
  &lt;!--使用的报表插件和他们的配置。--&gt;    
  &lt;plugins&gt;    
   &lt;!--plugin元素包含描述报表插件需要的信息--&gt;    
   &lt;plugin&gt;    
    &lt;!--报表插件在仓库里的group ID--&gt;    
    &lt;groupId/&gt;    
    &lt;!--报表插件在仓库里的artifact ID--&gt;    
    &lt;artifactId/&gt;    
    &lt;!--被使用的报表插件的版本（或版本范围）--&gt;    
    &lt;version/&gt;    
    &lt;!--任何配置是否被传播到子项目--&gt;    
    &lt;inherited/&gt;    
    &lt;!--报表插件的配置--&gt;    
    &lt;configuration/&gt;    
    &lt;!--一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。例如，有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报表集，对应另一个执行目标--&gt;    
    &lt;reportSets&gt;    
     &lt;!--表示报表的一个集合，以及产生该集合的配置--&gt;    
     &lt;reportSet&gt;    
      &lt;!--报表集合的唯一标识符，POM继承时用到--&gt;    
      &lt;id/&gt;    
      &lt;!--产生报表集合时，被使用的报表的配置--&gt;    
      &lt;configuration/&gt;    
      &lt;!--配置是否被继承到子POMs--&gt;    
      &lt;inherited/&gt;    
      &lt;!--这个集合里使用到哪些报表--&gt;    
      &lt;reports/&gt;    
     &lt;/reportSet&gt;    
    &lt;/reportSets&gt;    
   &lt;/plugin&gt;    
  &lt;/plugins&gt;    
 &lt;/reporting&gt;
</code></pre><h2 id="5-项目信息"><a href="#5-项目信息" class="headerlink" title="5.项目信息"></a>5.项目信息</h2><ul>
<li>name：给用户提供更为友好的项目名</li>
<li>description：项目描述，maven文档中保存</li>
<li>url：主页的URL，maven文档中保存</li>
<li>inceptionYear：项目创建年份，4位数字。当产生版权信息时需要使用这个值</li>
<li>licenses：该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。如果列出多个license，用户可以选择它们中的一个而不是接受所有license。（如下）</li>
</ul>
<pre><code>&lt;license&gt;  

    &lt;!--license用于法律上的名称--&gt;    
    &lt;name&gt;...&lt;/name&gt;     
    &lt;!--官方的license正文页面的URL--&gt;    
    &lt;url&gt;....&lt;/url&gt;
    &lt;!--项目分发的主要方式：repo，可以从Maven库下载 manual， 用户必须手动下载和安装依赖--&gt;    
    &lt;distribution&gt;repo&lt;/distribution&gt;     
    &lt;!--关于license的补充信息--&gt;    
    &lt;comments&gt;....&lt;/comments&gt;     
&lt;/license&gt; 
</code></pre><ul>
<li>organization：1.name 组织名 2.url 组织主页url</li>
<li>developers：项目开发人员列表（如下）</li>
<li>contributors：项目其他贡献者列表，同developers    </li>
</ul>
<pre><code>&lt;developers&gt;  

&lt;!--某个开发者信息--&gt;
&lt;developer&gt;  
    &lt;!--开发者的唯一标识符--&gt;
    &lt;id&gt;....&lt;/id&gt;  
    &lt;!--开发者的全名--&gt;
    &lt;name&gt;...&lt;/name&gt;  
    &lt;!--开发者的email--&gt;
    &lt;email&gt;...&lt;/email&gt;  
    &lt;!--开发者的主页--&gt;
    &lt;url&gt;...&lt;url/&gt;
    &lt;!--开发者在项目中的角色--&gt;
    &lt;roles&gt;  
        &lt;role&gt;Java Dev&lt;/role&gt;  
        &lt;role&gt;Web UI&lt;/role&gt;  
    &lt;/roles&gt; 
    &lt;!--开发者所属组织--&gt; 
    &lt;organization&gt;sun&lt;/organization&gt;  
    &lt;!--开发者所属组织的URL--&gt;
    &lt;organizationUrl&gt;...&lt;/organizationUrl&gt;  
    &lt;!--开发者属性，如即时消息如何处理等--&gt;
    &lt;properties&gt;
        &lt;!-- 和主标签中的properties一样，可以随意定义子标签 --&gt;
    &lt;/properties&gt; 
    &lt;!--开发者所在时区， -11到12范围内的整数。--&gt; 
    &lt;timezone&gt;-5&lt;/timezone&gt;  
&lt;/developer&gt;  
&lt;/developers&gt;  
</code></pre><h2 id="6-环境设置"><a href="#6-环境设置" class="headerlink" title="6.环境设置"></a>6.环境设置</h2><p>issueManagement</p>
<p>目的问题管理系统(Bugzilla, Jira, Scarab)的名称和URL</p>
<pre><code>&lt;issueManagement&gt;
    &lt;system&gt;Bugzilla&lt;/system&gt;
    &lt;url&gt;http://127.0.0.1/bugzilla/&lt;/url&gt;
&lt;/issueManagement&gt;
</code></pre><ul>
<li>system：系统类型</li>
<li>url：路径    </li>
</ul>
<p>ciManagement</p>
<p>项目的持续集成信息</p>
<pre><code>&lt;ciManagement&gt;
    &lt;system&gt;continuum&lt;/system&gt;
    &lt;url&gt;http://127.0.0.1:8080/continuum&lt;/url&gt;
    &lt;notifiers&gt;
      &lt;notifier&gt;
        &lt;type&gt;mail&lt;/type&gt;
        &lt;sendOnError&gt;true&lt;/sendOnError&gt;
        &lt;sendOnFailure&gt;true&lt;/sendOnFailure&gt;
        &lt;sendOnSuccess&gt;false&lt;/sendOnSuccess&gt;
        &lt;sendOnWarning&gt;false&lt;/sendOnWarning&gt;
        &lt;address&gt;continuum@127.0.0.1&lt;/address&gt;
        &lt;configuration&gt;&lt;/configuration&gt;
      &lt;/notifier&gt;
    &lt;/notifiers&gt;
  &lt;/ciManagement&gt;
</code></pre><ul>
<li>system：持续集成系统的名字</li>
<li>url：持续集成系统的URL</li>
<li>notifiers：构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告） <ul>
<li>type：通知方式</li>
<li>sendOnError：错误时是否通知</li>
<li>sendOnFailure：失败时是否通知</li>
<li>sendOnSuccess：成功时是否通知</li>
<li>sendOnWarning：警告时是否通知</li>
<li>address：通知发送到的地址</li>
<li>configuration：扩展项      </li>
</ul>
</li>
</ul>
<p>mailingLists</p>
<p>项目相关邮件列表信息</p>
<pre><code>&lt;mailingLists&gt;
    &lt;mailingList&gt;
      &lt;name&gt;User List&lt;/name&gt;
      &lt;subscribe&gt;user-subscribe@127.0.0.1&lt;/subscribe&gt;
      &lt;unsubscribe&gt;user-unsubscribe@127.0.0.1&lt;/unsubscribe&gt;
      &lt;post&gt;user@127.0.0.1&lt;/post&gt;
      &lt;archive&gt;http://127.0.0.1/user/&lt;/archive&gt;
      &lt;otherArchives&gt;
        &lt;otherArchive&gt;http://base.google.com/base/1/127.0.0.1&lt;/otherArchive&gt;
      &lt;/otherArchives&gt;
    &lt;/mailingList&gt;
    .....
  &lt;/mailingLists&gt;
</code></pre><ul>
<li>subscribe, unsubscribe: 订阅邮件（取消订阅）的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建</li>
<li>archive：浏览邮件信息的URL</li>
<li>post：接收邮件的地址      </li>
</ul>
<p>scm</p>
<p>允许你配置你的代码库，供Maven web站点和其它插件使用</p>
<pre><code>&lt;scm&gt;
    &lt;connection&gt;scm:svn:http://127.0.0.1/svn/my-project&lt;/connection&gt;
    &lt;developerConnection&gt;scm:svn:https://127.0.0.1/svn/my-project&lt;/developerConnection&gt;
    &lt;tag&gt;HEAD&lt;/tag&gt;
    &lt;url&gt;http://127.0.0.1/websvn/my-project&lt;/url&gt;
&lt;/scm&gt;
</code></pre><ul>
<li>connection, developerConnection：这两个表示我们如何连接到maven的版本库。connection只提供读，developerConnection将提供写的请求 <ul>
<li>写法如：scm:[provider]:[provider_specific]</li>
<li>如果连接到CVS仓库，可以配置如下：scm:cvs:pserver:127.0.0.1:/cvs/root:my-project</li>
</ul>
</li>
<li>tag：项目标签，默认HEAD</li>
<li>url：共有仓库路径    </li>
</ul>
<p>prerequisites</p>
<p>项目构建的前提</p>
<pre><code>&lt;prerequisites&gt;
    &lt;maven&gt;2.0.6&lt;/maven&gt;
&lt;/prerequisites&gt;
</code></pre><p>repositories,pluginRepositories</p>
<p>依赖和扩展的远程仓库列表，同上篇文章，setting.xml配置中介绍的。</p>
<pre><code>&lt;repositories&gt;
    &lt;repository&gt;
      &lt;releases&gt;
        &lt;enabled&gt;false&lt;/enabled&gt;
        &lt;updatePolicy&gt;always&lt;/updatePolicy&gt;
        &lt;checksumPolicy&gt;warn&lt;/checksumPolicy&gt;
      &lt;/releases&gt;
      &lt;snapshots&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;
        &lt;updatePolicy&gt;never&lt;/updatePolicy&gt;
        &lt;checksumPolicy&gt;fail&lt;/checksumPolicy&gt;
      &lt;/snapshots&gt;
      &lt;id&gt;codehausSnapshots&lt;/id&gt;
      &lt;name&gt;Codehaus Snapshots&lt;/name&gt;
      &lt;url&gt;http://snapshots.maven.codehaus.org/maven2&lt;/url&gt;
      &lt;layout&gt;default&lt;/layout&gt;
    &lt;/repository&gt;
  &lt;/repositories&gt;
  &lt;pluginRepositories&gt;
    ...
  &lt;/pluginRepositories&gt;
</code></pre><ul>
<li>releases, snapshots:这是各种构件的策略，release或者snapshot。这两个集合，POM就可以根据独立仓库任意类型的依赖改变策略。如：一个人可能只激活下载snapshot用来开发。</li>
<li>enable：true或者false，决定仓库是否对于各自的类型激活(release 或者 snapshot)。</li>
<li>updatePolicy: 这个元素决定更新频率。maven将比较本地pom的时间戳（存储在仓库的maven数据文件中）和远程的. 有以下选择: always, daily (默认), interval:X (x是代表分钟的整型) ， never.</li>
<li>checksumPolicy：当Maven向仓库部署文件的时候，它也部署了相应的校验和文件。可选的为：ignore，fail，warn，或者不正确的校验和。</li>
<li>layout：在上面描述仓库的时候，提到他们有统一的布局。Maven 2有它仓库默认布局。然而，Maven 1.x有不同布局。使用这个元素来表明它是default还是legacy。      </li>
</ul>
<p>distributionManagement</p>
<p>它管理的分布在整个构建过程生成的工件和支持文件</p>
<pre><code>&lt;distributionManagement&gt;
    ...
    &lt;downloadUrl&gt;http://mojo.codehaus.org/my-project&lt;/downloadUrl&gt;
    &lt;status&gt;deployed&lt;/status&gt;
&lt;/distributionManagement&gt;
</code></pre><ul>
<li>downloadUrl: 其他pom可以通过此url的仓库抓取组件</li>
<li>status：给出该构件在远程仓库的状态 <ul>
<li>none: 默认</li>
<li>converted: 将被早期Maven 2 POM转换过来</li>
<li>partner: 这个项目会从合作者仓库同步过来</li>
<li>deployed: 从Maven 2或3实例部署</li>
<li>verified: 被核实时正确的和最终的    </li>
</ul>
</li>
</ul>
<p>Repository</p>
<p>指定Maven pom从远程下载控件到当前项目的位置和方式，如果snapshotRepository没有被定义则使用repository相关的配置</p>
<pre><code>&lt;distributionManagement&gt;
   &lt;repository&gt;
     &lt;uniqueVersion&gt;false&lt;/uniqueVersion&gt;
     &lt;id&gt;corp1&lt;/id&gt;
     &lt;name&gt;Corporate Repository&lt;/name&gt;
     &lt;url&gt;scp://repo/maven2&lt;/url&gt;
     &lt;layout&gt;default&lt;/layout&gt;
   &lt;/repository&gt;
   &lt;snapshotRepository&gt;
     &lt;uniqueVersion&gt;true&lt;/uniqueVersion&gt;
     &lt;id&gt;propSnap&lt;/id&gt;
     &lt;name&gt;Propellors Snapshots&lt;/name&gt;
     &lt;url&gt;sftp://propellers.net/maven&lt;/url&gt;
     &lt;layout&gt;legacy&lt;/layout&gt;
   &lt;/snapshotRepository&gt;
   ...
 &lt;/distributionManagement&gt;
</code></pre><ul>
<li>id, name：仓库的唯一标识</li>
<li>uniqueVersion：true或false，指明控件部署的时候是否获取独立的版本号。</li>
<li>url：repository元素的核心。指定位置和部署协议发布控件到仓库。</li>
<li>layout：布局，default或legacy</li>
</ul>
<p>Site Distribution</p>
<p>多分布存储库,distributionManagement负责定义如何部署项目的网站和文档。</p>
<pre><code>&lt;distributionManagement&gt;
   ...
   &lt;site&gt;
     &lt;id&gt;mojo.website&lt;/id&gt;
     &lt;name&gt;Mojo Website&lt;/name&gt;
     &lt;url&gt;scp://beaver.codehaus.org/home/projects/mojo/public_html/&lt;/url&gt;
   &lt;/site&gt;
   ...
 &lt;/distributionManagement&gt;
</code></pre><ul>
<li>id, name, url: 这些元素与distributionManagement repository中的相同</li>
</ul>
<p>Relocation</p>
<p>重新部署-项目不是静态的，是活的。他们需要被搬到更合适的地方。如：当你的下个成功的开源项目移到Apache下，重命名为org.apache:my-project:1.0 对你项目更有好处。</p>
<pre><code>&lt;distributionManagement&gt;
    ...
    &lt;relocation&gt;
      &lt;groupId&gt;org.apache&lt;/groupId&gt;
      &lt;artifactId&gt;my-project&lt;/artifactId&gt;
      &lt;version&gt;1.0&lt;/version&gt;
      &lt;message&gt;We have moved the Project under Apache&lt;/message&gt;
    &lt;/relocation&gt;
    ...
 &lt;/distributionManagement&gt;
</code></pre><p><strong>原文链接: <a href="http://blog.csdn.net/oDeviloo/article/details/52050277" target="_blank" rel="external">http://blog.csdn.net/oDeviloo/article/details/52050277</a></strong><br><strong>参考官方文档： <a href="http://maven.apache.org/pom.html" target="_blank" rel="external">http://maven.apache.org/pom.html</a></strong>   </p>
]]></content>
      
        
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jooq基本操作介绍]]></title>
      <url>/2018/01/09/jooq%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p><strong>jooq基本操作介绍</strong></p>
<a id="more"></a>
<h2 id="1-1jooq-select查询"><a href="#1-1jooq-select查询" class="headerlink" title="1.1jooq select查询"></a>1.1jooq select查询</h2><p>select方法接受一个SelectField查询字段集合,org.jooq.Field可以通过<br>生成的任意jooq.tables.*(eg:AudienceItem extends TableImpl<audienceitemrecord>)的Fields方法获取该Table的所有Field字段或者通过该Table的公共成员变量获取部分字段(eg: AUDIENCE_ITEM.ID).</audienceitemrecord></p>
<p>select方法返回一个<strong>SelectSelectStep</strong><record> 查询步骤对象,一般通过该对象调用from方法完成接下来的表拼接.eg:.from(AUDIENCE_OBJECT).</record></p>
<p>from方法接受一个TableLike&lt;?&gt;对象，该对象可以是表也可以是视图,最后返回一个<strong>SelectJoinStep</strong><r>对象.</r></p>
<p>SelectJoinStep对象继承自<strong>SelectWhereStep</strong>对象,通过该对象我们既可以直接后接where方法条件，也可以通过SelectJoinStep对象的join,innerjoin等方法继续关联表进行查询.</p>
<p>SelectJoinStep对象调用join等方法后(eg:.leftJoin(AUDIENCE_ITEM))返回SelectJoinPartitionByStep<r>对象,该对象继承自<strong>SelectOnStep</strong>对象.</r></p>
<p><strong>SelectOnStep</strong>对象的主要方法是on,通过on方法来完成join之后的条件拼装(eg:.on(AUDIENCE_OBJECT.ITEM_ID.eq(AUDIENCE_ITEM.ID)),调用完成之后返回SelectOnConditionStep<r>对象.</r></p>
<p>通过<strong>SelectOnConditionStep</strong><r>对象,可以继续接join,where或者直接调用fetch方法结束sql拼接.</r></p>
<p>fetch方法返回一个泛型结果集Result<r>,一般通过该结果集的into方法直接转化得到实体列表,具体实例如下:</r></p>
<pre><code>DSLContext dsl = DSL.using(configuration);
dsl.select(Fields.start().add(AUDIENCE_ITEM).end())
                .from(AUDIENCE_OBJECT).leftJoin(AUDIENCE_ITEM)
                .on(AUDIENCE_OBJECT.ITEM_ID.eq(AUDIENCE_ITEM.ID).and(AUDIENCE_OBJECT.BUSINESS_TYPE.eq(businessType)))
                .where(AUDIENCE_OBJECT.BUSINESS_ID.eq(id).and(AUDIENCE_ITEM.ID.isNotNull())).fetch()
                .into(AudienceItem.class)
</code></pre><p>另:on方法和where方法都是接受一个Condition可变数组为入参,Condition条件对象可由TableImpl对象的TableField字段调用and,eq等条件方法得到.</p>
<h2 id="1-2-使用DSLContext进行新增-修改-删除"><a href="#1-2-使用DSLContext进行新增-修改-删除" class="headerlink" title="1.2 使用DSLContext进行新增,修改,删除"></a>1.2 使用DSLContext进行新增,修改,删除</h2><pre><code>//新增
DSL.using(conf).insertInto(AUDIENCE_OBJECT,AUDIENCE_OBJECT.ID).values(&quot;1&quot;).execute();
//更新        
DSL.using(conf).update(AUDIENCE_OBJECT).set(AUDIENCE_OBJECT.BUSINESS_ID, AUDIENCE_OBJECT.BUSINESS_ID.add(1)).execute();
//删除        
DSL.using(conf).delete(AUDIENCE_OBJECT).where(AUDIENCE_OBJECT.BUSINESS_ID.eq(&quot;1&quot;)).execute();
</code></pre><h2 id="2-1-使用UpdatableRecord完成新增-修改-删除"><a href="#2-1-使用UpdatableRecord完成新增-修改-删除" class="headerlink" title="2.1 使用UpdatableRecord完成新增,修改,删除"></a>2.1 使用UpdatableRecord完成新增,修改,删除</h2><p>jooq的新增，修改，删除方法都可以通过<strong>UpdatableRecord</strong>对象完成,示例如下:</p>
<pre><code>DSLContext dsl = DSL.using(conf);

UpdatableRecord r = (UpdatableRecord) dsl.newRecord(AUDIENCE_OBJECT, objects.get(0));
        //只有不为空的才进行更新
        int size = r.size();
        for (int i = 0; i &lt; size; ++i) {
            if (r.getValue(i) != null || r.field(i).getDataType().nullable())
                continue;
            r.changed(i, false);//标记该字段不更新
        }
        r.update();

        r.insert();

        r.delete();
</code></pre><h2 id="2-2-批量方法"><a href="#2-2-批量方法" class="headerlink" title="2.2 批量方法"></a>2.2 批量方法</h2><p>新增,修改,删除批量方法都是接受一个UpdatableRecord对象集合来进行批量新增或批量修改.</p>
<pre><code>//批量添加
DSL.using(conf).batchInsert(rs).execute();

//批量修改
DSL.using(conf).batchUpdate(rs).execute();

//批量删除
DSL.using(conf).batchDelete(rs).execute();
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> jooq </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot应用启动事件]]></title>
      <url>/2017/12/17/SpringBoot%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E4%BA%8B%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p><strong>SpringBoot应用启动事件</strong></p>
<a id="more"></a>
<p><strong>监听Spring boot应用的事件只需实现ApplicationListener接口来监听对应事件.</strong></p>
<p>有些事件实际上是在    ApplicationContext    创建前触发的，所以你不能在那些</p>
<p>事件（处理类）中通过    @Bean    注册监听器，只能通</p>
<p>过    SpringApplication.addListeners(…)    或    SpringApplicationBuilder.lis</p>
<p>teners(…)    方法注册.</p>
<p>应用运行时，事件会以下面的次序发送：</p>
<ol>
<li>在运行开始，但除了监听器注册和初始化以外的任何处理之前，会发送一</li>
</ol>
<p>个    ApplicationStartedEvent    。</p>
<ol>
<li>在Environment将被用于已知的上下文，但在上下文被创建前，会发送一</li>
</ol>
<p>个    ApplicationEnvironmentPreparedEvent    。</p>
<ol>
<li>在refresh开始前，但在bean定义已被加载后，会发送一</li>
</ol>
<p>个    ApplicationPreparedEvent    。</p>
<ol>
<li>在refresh之后，相关的回调处理完，会发送一个    ApplicationReadyEvent    ，</li>
</ol>
<p>表示应用准备好接收请求了。</p>
<ol>
<li>启动过程中如果出现异常，会发送一个    ApplicationFailedEvent    。</li>
</ol>
<p>注    通常不需要使用application事件，但知道它们的存在是有用的（在某些场合可能</p>
<p>会使用到），比如，在Spring    Boot内部会使用事件处理各种任务。</p>
]]></content>
      
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> event </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring WebMVC框架]]></title>
      <url>/2017/12/17/Spring_Web_MVC%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<p><strong>Spring WebMVC框架</strong></p>
<a id="more"></a>
<p>Spring    Web    MVC框架（通常简称为”SpringMVC”）是一个富“模型，视图，控制器”web框架，    允许用户创建特定的     @Controller    或     @RestController        beans来处理传入的HTTP请求，通过@RequestMapping注解可以将控制器中的方法映射到相应的HTTP请求。<br>示例：</p>
<pre><code>@RestController
@RequestMapping(value=&quot;/users&quot;)
public    class    MyRestController    {
                @RequestMapping(value=&quot;/{user}&quot;,    method=RequestMethod.GET)
                public    User    getUser(@PathVariable    Long    user)    {
                                //    ...
                }
                @RequestMapping(value=&quot;/{user}/customers&quot;,    method=RequestMet
hod.GET)
                List&lt;Customer&gt;    getUserCustomers(@PathVariable    Long    user)    {
                                //    ...
                }
                @RequestMapping(value=&quot;/{user}&quot;,    method=RequestMethod.DELETE
)
                public    User    deleteUser(@PathVariable    Long    user)    {
                                //    ...
                }
}
</code></pre><p>Spring    MVC是Spring框架的核心部分，详细信息可以参考reference<br>documentation，spring.io/guides也有一些可用的指导覆盖Spring    MVC。</p>
<h2 id="Spring-MVC自动配置"><a href="#Spring-MVC自动配置" class="headerlink" title="Spring    MVC自动配置"></a>Spring    MVC自动配置</h2><p>Spring    Boot为Spring    MVC提供的auto-configuration适用于大多数应用，并在<br>Spring默认功能上添加了以下特性：</p>
<ol>
<li>引入     ContentNegotiatingViewResolver    和     BeanNameViewResolver<br>beans。</li>
<li>对静态资源的支持，包括对WebJars的支持。</li>
<li>自动注册     Converter    ，     GenericConverter    ，     Formatter        beans。</li>
<li>对     HttpMessageConverters    的支持。</li>
<li>自动注册     MessageCodeResolver    。</li>
<li>对静态     index.html    的支持。</li>
<li>对自定义     Favicon    的支持。</li>
<li>自动使用     ConfigurableWebBindingInitializer        bean。</li>
</ol>
<p>如果保留Spring    Boot    MVC特性，你只需添加其他的MVC配置（拦截器，格式化处理器，视图控制器等）。你可以添加自己的     WebMvcConfigurerAdapter    类型的@Configuration类，而不需要注解@EnableWebMvc。如果希望使用自定义的     RequestMappingHandlerMapping    ，RequestMappingHandlerAdapter    ，或     ExceptionHandlerExceptionResolver，你可以声明一个WebMvcRegistrationsAdapter    实例提供这些组件。</p>
<p>如果想全面控制Spring    MVC，你可以添加自己的     @Configuration    ，并使用     @EnableWebMvc    注解。</p>
<p>##HttpMessageConverters##</p>
<p>Spring    MVC使用     HttpMessageConverter    接口转换HTTP请求和响应，合适的默认配置可以开箱即用，例如对象自动转换为JSON（使用Jackson库）或XML（如果Jackson XML扩展可用，否则使用JAXB），字符串默认使用     UTF-8    编码。<br>可以使用Spring    Boot的     HttpMessageConverters    类添加或自定义转换类：</p>
<pre><code>import    org.springframework.boot.autoconfigure.web.HttpMessageCon
verters;
import    org.springframework.context.annotation.*;
import    org.springframework.http.converter.*;
@Configuration
public    class    MyConfiguration    {
                @Bean
                public    HttpMessageConverters    customConverters()    {
                                HttpMessageConverter&lt;?&gt;    additional    =    ...
                                HttpMessageConverter&lt;?&gt;    another    =    ...
                                return    new    HttpMessageConverters(additional,    another);
                }
}
</code></pre><p>上下文中出现的所有     HttpMessageConverter        bean都将添加到converters列表，你可以通过这种方式覆盖默认的转换器列表（converters）。    </p>
<p>##自定义JSON序列化器和反序列化器##</p>
<p>如果使用Jackson序列化，反序列化JSON数据，你可能想编写自己的     JsonSerializer    和     JsonDeserializer    类。自定义序列化器（serializers）通常通过Module注册到Jackson，但Spring    Boot提供了     @JsonComponent    注解这一替代方式，它能轻松的将序列化器注册为Spring    Beans。</p>
<p>##MessageCodesResolver##</p>
<p>Spring    MVC有一个实现策略，用于从绑定的errors产生用来渲染错误信息的错误码：     MessageCodesResolver    。SpringBoot会自动为你创建该实现，只要设置spring.mvc.message-codes-resolver.format    属性为     PREFIX_ERROR_CODE    或     POSTFIX_ERROR_CODE    （具体查看     DefaultMessageCodesResolver.Format    枚举值）。</p>
<p>##静态内容##</p>
<p>默认情况下，Spring    Boot从classpath下的     /static    （     /public    ，     /resources    或     /META-INF/resources    ）文件夹，或从ServletContext    根目录提供静态内容。</p>
<p>这是通过Spring    MVC的     ResourceHttpRequestHandler    实现的，你可以自定义WebMvcConfigurerAdapter    并覆写addResourceHandlers    方法来改变该行为（加载静态文件）。</p>
<p>在单机web应用中，容器会启动默认的servlet，并用它加载     ServletContext    根目录下的内容以响应那些Spring不处理的请求。大多数情况下这都不会发生（除非你修改默认的MVC配置），因为Spring总能够通过     DispatcherServlet    处理这些请求。</p>
<p>你可以设置     spring.resources.staticLocations    属性自定义静态资源的位置（配置一系列目录位置代替默认的值），如果你这样做，默认的欢迎页面将从自定义位置加载，所以只要这些路径中的任何地方有一个     index.html    ，它都会成为应用的主页。</p>
<p>此外，除了上述标准的静态资源位置，有个例外情况是Webjars内容。任何在 /webjars/**    路径下的资源都将从jar文件中提供，只要它们以Webjars的格式<br>打包。</p>
<p>注    如果你的应用将被打包成jar，那就不要使用     src/main/webapp文件夹。尽管该文件夹是通常的标准格式，但它仅在打包成war的情况下起作用，在打包成jar时，多数构建工具都会默认忽略它。</p>
<p>Spring    Boot也支持SpringMVC提供的高级资源处理特性，可用于清除缓存的静态资源或对WebJar使用版本无感知的URLs。</p>
<p>如果想使用针对WebJars版本无感知的URLs（version    agnostic），只需要添<br>加     webjars-locator    依赖，然后声明你的Webjar。以jQuery为例，     “/webjars/jquery/dist/jquery.min.js”    实际<br>为     “/webjars/jquery/x.y.z/dist/jquery.min.js”    ，     x.y.z为Webjar的版<br>本。</p>
<p>注    如果使用JBoss，你需要声明     webjars-locator-jboss-vfs    依赖而不是     webjars-locator    ，否则所有的Webjars将解析为     404    。</p>
<p>以下的配置为所有的静态资源提供一种缓存清除（cache    busting）方案，实际上是<br>将内容hash添加到URLs中，比如     <link href="/css/spring-
2a2d595e6ed9a0b24f027f2b63b134d6.css">    ：</p>
<pre><code>spring.resources.chain.strategy.content.enabled=true
spring.resources.chain.strategy.content.paths=/**
</code></pre><p>注    实现该功能的是     ResourceUrlEncodingFilter    ，它在模板运行期会重写资源链接，Thymeleaf，Velocity和FreeMarker会自动配置该filter，JSP需要手动配置。<br>其他模板引擎还没自动支持，不过你可以使用ResourceUrlProvider自定义模块宏或<br>帮助类。<br>当使用比如JavaScript模块加载器动态加载资源时，重命名文件是不行的，这也是提供其他策略并能结合使用的原因。下面是一个”fixed”策略，在URL中添加一个静态version字符串而不需要改变文件名：    </p>
<pre><code>spring.resources.chain.strategy.content.enabled=true
spring.resources.chain.strategy.content.paths=/**
spring.resources.chain.strategy.fixed.enabled=true
spring.resources.chain.strategy.fixed.paths=/js/lib/
spring.resources.chain.strategy.fixed.version=v12
</code></pre><p>使用以上策略，JavaScript模块加载器加载     “/js/lib/“下的文件时会使用一个固定的版本策略     “/v12/js/lib/mymodule.js”    ，其他资源仍旧使用内容hash的方式     <link href="/css/spring-
2a2d595e6ed9a0b24f027f2b63b134d6.css">    。</p>
<p>查看ResourceProperties获取更多支持的选项。<br>注    该特性在一个专门的博文和Spring框架参考文档中有透彻描述。    </p>
<p>##ConfigurableWebBindingInitializer##</p>
<p>Spring    MVC使用     WebBindingInitializer    为每个特殊的请求初始化相应的WebDataBinder    ，如果你创建自己的     ConfigurableWebBindingInitializer @Bean    ，Spring    Boot会自动配置Spring    MVC使用它。</p>
<p>##模板引擎##</p>
<p>正如REST    web服务，你也可以使用Spring    MVC提供动态HTML内容。Spring    MVC<br>支持各种各样的模板技术，包括Velocity,    FreeMarker和JSPs，很多其他的模板引擎也提供它们自己的Spring    MVC集成。</p>
<p>Spring    Boot为以下的模板引擎提供自动配置支持：</p>
<ol>
<li>FreeMarker</li>
<li>Groovy</li>
<li>Thymeleaf</li>
<li>Velocity（1.4已不再支持）</li>
<li>Mustache</li>
<li>注：由于在内嵌servlet容器中使用JSPs存在一些已知的限制，所以建议尽量不使用它们。</li>
</ol>
<p>使用以上引擎中的任何一种，并采用默认配置，则模块会从src/main/resources/templates    自动加载。</p>
<p>注：IntelliJ    IDEA根据你运行应用的方式会对classpath进行不同的排序。<br>在IDE里通过main方法运行应用，跟从Maven，或Gradle，或打包好的jar中运行相比会导致不同的顺序，这可能导致SpringBoot不能从classpath下成功地找到模板。<br>如果遇到这个问题，你可以在IDE里重新对classpath进行排序，将模块的类和资源放到第一位。<br>或者，你可以配置模块的前缀为     classpath*:/templates/    ，这样会查找<br>classpath下的所有模板目录。</p>
<p>##错误处理##</p>
<p>Spring    Boot默认提供一个     /error    映射用来以合适的方式处理所有的错误，并将它注册为servlet容器中全局的    错误页面。<br>对于机器客户端（相对于浏览器而言，浏览器偏重于人的行为），它会产生一个具有详细错误，HTTP状态，异常信息的JSON响应。对于浏览器客户端，它会产生一个白色标签样式（whitelabel）的错误视图，该视图将以HTML格式显示同样的数据（可以添加一个解析为’error’的View来自定义它）。<br>为了完全替换默认的行为，你可以实现     ErrorController    ，并注册一个该类型的bean定义，或简单地添加一个     ErrorAttributes    类型的bean以使用现存的机制，只是替换显示的内容。</p>
<p>注          BasicErrorController    可以作为自定义     ErrorController    的基类，如果你想添加对新context    type的处理（默认处理     text/html    ），这会很有帮助。<br>你只需要继承     BasicErrorController，添加一个public方法，并注解带有     produces    属性的     @RequestMapping，然后创建该新类型的bean。<br>你也可以定义一个@ControllerAdvice去自定义某个特殊controller或exception类型的JSON文档：</p>
<pre><code>@ControllerAdvice(basePackageClasses    =    FooController.class)
public    class    FooControllerAdvice    extends    ResponseEntityException
Handler    {
                @ExceptionHandler(YourException.class)
                @ResponseBody
                ResponseEntity&lt;?&gt;    handleControllerException(HttpServletReque
st    request,    Throwable    ex)    {
                                HttpStatus    status    =    getStatus(request);
                                return    new    ResponseEntity&lt;&gt;(new    CustomErrorType(status.v
alue(),    ex.getMessage()),    status);
                }
                private    HttpStatus    getStatus(HttpServletRequest    request)    {
                                Integer    statusCode    =    (Integer)    request.getAttribute(&quot;jav
ax.servlet.error.status_code&quot;);
                                if    (statusCode    ==    null)    {
                                                return    HttpStatus.INTERNAL_SERVER_ERROR;
                                }
                                return    HttpStatus.valueOf(statusCode);
                }
}
</code></pre><p>在以上示例中，如果跟     FooController相同package的某个controller抛出     YourException    ，一个     CustomerErrorType    类型的POJO的json展示将代替     ErrorAttributes    展示。</p>
<p>自定义错误页面</p>
<p>如果想为某个给定的状态码展示一个自定义的HTML错误页面，你需要将文件添加到     /error    文件夹下。错误页面既可以是静态HTML（比如，任何静态资源文件夹下添加的），也可以是使用模板构建的，文件名必须是明确的状态码或一系列标签。</p>
<p>例如，映射     404    到一个静态HTML文件，你的目录结构可能如下：    </p>
<pre><code>src/
    +-    main/
            +-    java/
            |            +    &lt;source    code&gt;
            +-    resources/
                        +-    public/
                            +-    error/
                                |    +-    404.html
                            +-    &lt;other    public    assets&gt;    
</code></pre><p>使用FreeMarker模板映射所有     5xx    错误，你需要如下的目录结构：</p>
<pre><code>src/
    +-    main/
            +-    java/
            |            +    &lt;source    code&gt;
            +-    resources/
                    +-    templates/
                            +-    error/
                            |            +-    5xx.ftl
                            +-    &lt;other    templates&gt;
</code></pre><p>对于更复杂的映射，你可以添加实现     ErrorViewResolver接口的beans：</p>
<pre><code>public    class    MyErrorViewResolver    implements    ErrorViewResolver    {
                @Override
    public    ModelAndViewresolveErrorView(HttpServletRequest    requ
est,HttpStatus    status,Map&lt;String,    Object&gt;    model)    {
    //    Use    the    request    or    status    to    optionally    return    a    Mode
lAndView
                    return    ...
    }
}
</code></pre><p>你也可以使用Spring    MVC特性，比如@ExceptionHandler方法和@ControllerAdvice，ErrorController    将处理所有未处理的异常。</p>
<p>映射Spring    MVC以外的错误页面</p>
<p>对于不使用Spring    MVC的应用，你可以通过     ErrorPageRegistrar    接口直接注册     ErrorPages。<br>该抽象直接工作于底层内嵌servlet容器，即使你没有SpringMVC的DispatcherServlet    ，它们仍旧可以工作。    </p>
<pre><code>@Bean
public    ErrorPageRegistrar    errorPageRegistrar(){
                return    new    MyErrorPageRegistrar();
}
//    ...
private    static    class    MyErrorPageRegistrar    implements    ErrorPageRegistrar    {
                @Override
                public    void    registerErrorPages(ErrorPageRegistry    registry)    {
                                registry.addErrorPages(new    ErrorPage(HttpStatus.BAD_REQU
EST,    &quot;/400&quot;));
                }
}
</code></pre><p>注.如果你注册一个     ErrorPage    ，该页面需要被一个     Filter    处理（在一些非Spring    web框架中很常见，比如Jersey，Wicket），那么该     Filter    需要明确注册为一个     ERROR    分发器（dispatcher），例如：    </p>
<pre><code>@Bean
public    FilterRegistrationBean    myFilter()    {
                FilterRegistrationBean    registration    =    new    FilterRegistrationBean();
                registration.setFilter(new    MyFilter());
                ...
                registration.setDispatcherTypes(EnumSet.allOf(DispatcherType
.class));
                return    registration;
}
</code></pre><p>（默认的     FilterRegistrationBean    不包含     ERROR        dispatcher类型）。</p>
<p>WebSphere应用服务器的错误处理当部署到一个servlet容器时，Spring    Boot通过它的错误页面过滤器将带有错误状态的请求转发到恰当的错误页面。</p>
<p>request只有在response还没提交时才能转发（forwarded）到正确的错误页面，而WebSphere应用服务器8.0及后续版本默认情况会在servlet方法成功执行后提交response，你需要设置     com.ibm.ws.webcontainer.invokeFlushAfterService    属性为     false    来关闭该行为。    </p>
<p>##Spring HATEOAS##</p>
<p>如果正在开发基于超媒体的RESTful    API，你可能需要Spring    HATEOAS，而Spring<br>Boot会为其提供自动配置，这在大多数应用中都运作良好。</p>
<p>自动配置取代了     @EnableHypermediaSupport    ，只需注册一定数量的beans就能轻松构建基于超媒体的应用，这些beans包括     LinkDiscoverers    （客户端支持），     ObjectMapper    （用于将响应编排为想要的形式）。</p>
<p>ObjectMapper    可以根据     spring.jackson.*    属性或     Jackson2ObjectMapperBuilder        bean进行自定义。</p>
<p>通过注解     @EnableHypermediaSupport    ，你可以控制Spring    HATEOAS的配置，<br>但这会禁用上述     ObjectMapper    的自定义功能。</p>
<p>##CORS支持##</p>
<p>跨域资源共享（CORS）是一个大多数浏览器都实现了的W3C标准，它允许你以灵活的方式指定跨域请求如何被授权，而不是采用那些不安全，性能低的方式，比如IFRAME或JSONP。</p>
<p>从4.2版本开始，Spring MVC对CORS提供开箱即用的支持。不用添加任何特殊配置，只需要在Spring    Boot应用的controller方法上注解     @CrossOrigin    ，并添加CORS配置。<br>通过注册一个自定义     addCorsMappings(CorsRegistry)    方法的WebMvcConfigurer        bean可以指定全局CORS配置：</p>
<pre><code>@Configuration
public    class    MyConfiguration    {
            @Bean
            public    WebMvcConfigurer    corsConfigurer()    {
                                return    new    WebMvcConfigurerAdapter()    {
                                                @Override
            public    void    addCorsMappings(CorsRegistry    registry)    {
                                                                registry.addMapping(&quot;/api/**&quot;);
                                                }
                                };
            }
}
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> MVC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用YAML代替Properties]]></title>
      <url>/2017/12/17/%E4%BD%BF%E7%94%A8YAML%E4%BB%A3%E6%9B%BFProperties/</url>
      <content type="html"><![CDATA[<p><strong>使用YAML代替Properties</strong></p>
<a id="more"></a>
<p>##SpringBoot支持YAML##<br>YAML是JSON的一个超集，也是一种方便的定义层次配置数据的格式。只要你<br>将SnakeYAML    库放到classpath下，     SpringApplication    就会自动支持YAML，<br>以作为properties的替换。<br>注    如果你使用’Starters’，添加     spring-boot-starter    依赖会自动加载<br>SnakeYAML。</p>
<p>##加载YAML##</p>
<p>Spring框架提供两个便利的类用于加载YAML文档，YamlPropertiesFactoryBean    会将YAML加载为     Properties    ，     YamlMapFactoryBean    会将YAML加载为     Map    。<br>例如，下面的YAML文档：</p>
<pre><code>environments:
                dev:
                                url:    http://dev.bar.com
                                name:    Developer    Setup
                prod:
                                url:    http://foo.bar.com
                                name:    My    Cool    App
</code></pre><p>会被转化到这些属性：</p>
<pre><code>environments.dev.url=http://dev.bar.com
environments.dev.name=Developer    Setup
environments.prod.url=http://foo.bar.com
environments.prod.name=My    Cool    App
</code></pre><p>YAML列表被表示成使用[index]间接引用作为属性keys的形式，例如下面的<br>YAML：</p>
<pre><code>my:
            servers:
                            -    dev.bar.com
                            -    foo.bar.com
</code></pre><p>将会转化到这些属性:</p>
<pre><code>my.servers[0]=dev.bar.com
my.servers[1]=foo.bar.com
</code></pre><p>使用Spring          DataBinder    工具集绑定这些属性（这是@ConfigurationProperties    做的事）时，你需要确保目标bean有个     java.util.List    或     Set    类型的属性，并且需要提供一个setter或使用可变的值初始化它，比如，下面的代码将绑定上面的属性：</p>
<pre><code>@ConfigurationProperties(prefix=&quot;my&quot;)
public    class    Config    {
        private    List&lt;String&gt;    servers    =    new    ArrayList&lt;String&gt;();
        public    List&lt;String&gt;    getServers(){
                return    this.servers;
        }
}
</code></pre><p>##在Spring环境中使用YAML暴露属性##</p>
<p>YamlPropertySourceLoader类能够将YAML作为PropertySource导出到SprigEnvironment    ，这允许你使用常用的    @Value注解配合占位符语法访问YAML属<br>性。</p>
<p>##Multi-profile    YAML文档##</p>
<p>你可以在单个文件中定义多个特定配置（profile-specific）的YAML文档，并通过     spring.profiles    标示生效的文档，例如：</p>
<pre><code>server:
                address:    192.168.1.100
---
spring:
                profiles:    development
server:
                address:    127.0.0.1
---
spring:
                profiles:    production
server:
                address:    192.168.1.120
</code></pre><p>在以上例子中，如果     development        profile被激活，     server.address    属性将是     127.0.0.1    ；如果     development    和     production        profiles没有启用，则该属性的值将是     192.168.1.100    。<br>在应用上下文启动时，如果没有明确指定激活的profiles，则默认的profiles将生效。所以，在下面的文档中我们为     security.user.password    设置了一个值，该<br>值只在”default”    profile中有效：                    </p>
<pre><code>server:
        port:    8000
---
spring:
        profiles:    default
security:
        user:
                password:    weak
</code></pre><p>然而，在这个示例中，由于没有关联任何profile，密码总是会设置，并且如果有必要的话可以在其他profiles中显式重置：                    </p>
<pre><code>server:
        port:    8000
security:
        user:
                password:    weak                    
</code></pre><p>通过     !    可以对     spring.profiles指定的profiles进行取反（negated，跟java中的     !    作用一样），如果negated和non-negated    profiles都指定一个单一文件，至少需要匹配一个non-negated    profile，可能不会匹配任何negated    profiles。                    </p>
<p>##YAML缺点##                    </p>
<p>YAML文件不能通过     @PropertySource    注解加载，如果需要使用该方式，那就必须使用properties文件。</p>
<p>##合并YAML列表##</p>
<p>正如上面看到的，所有YAML最终都转换为properties，在通过一个profile覆<br>盖”list”属性时这个过程可能不够直观（counter    intuitive）。例如，假设有一<br>个     MyPojo    对象，默认它的     name    和     description    属性都为     null    ，下面我们<br>将从     FooProperties    暴露一个     MyPojo    对象列表（list）：</p>
<pre><code>@ConfigurationProperties(&quot;foo&quot;)
public    class    FooProperties    {
        private    final    List&lt;MyPojo&gt;    list    =    new    ArrayList&lt;&gt;();
        public    List&lt;MyPojo&gt;    getList()    {
                return    this.list;
        }
}
</code></pre><p>考虑如下配置：</p>
<pre><code>foo:
        list:
                -    name:    my    name
                        description:    my    description
---
spring:
        profiles:    dev
foo:
        list:
                -    name:    my    another    name
</code></pre><p> 如果     dev        profile没有激活，     FooProperties.list    将包括一个如上述定义的     MyPojo    实体，即使     dev    生效，该     list    仍旧只包含一个实体（     name    值为     my    another    name    ，description    值为     null    ）。<br>此配置不会向该列表添加第二个     MyPojo    实例，也不会对该项进行合并。<br>当一个集合定义在多个profiles时，只使用优先级最高的：       </p>
<pre><code>foo:
        list:
                -    name:    my    name
                        description:    my    description
                -    name:    another    name
                        description:    another    description
---
spring:
        profiles:    dev
foo:
        list:
                    -    name:    my    another    name
</code></pre><p> 在以上示例中，如果     dev        profile激活，     FooProperties.list将包含一个     MyPojo    实体（     name    值为     my    another    name    ，     description    值为     null    ）。   </p>
]]></content>
      
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> YAML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot日志]]></title>
      <url>/2017/12/17/SpringBoot%E6%97%A5%E5%BF%97/</url>
      <content type="html"><![CDATA[<p><strong>SpringBoot日志</strong></p>
<a id="more"></a>
<p>##日志格式##</p>
<p>Spring    Boot默认的日志输出格式如下：</p>
<pre><code>2014-03-05    10:57:51.112        INFO    45469    ---    [main]org.apache.catalina.core.StandardEngine        :    Starting    Servlet    Engine:    Apache    Tomcat/7.0.522014-03-05    10:57:51.253        INFO    45469    ---    [ost-startStop-1]    o.a.c.
c.C.[Tomcat].[localhost].[/]                            :    Initializing    Spring    embedde
d    WebApplicationContext
2014-03-05    10:57:51.253        INFO    45469    ---    [ost-startStop-1]    o.s.we
b.context.ContextLoader                                                :    Root    WebApplicationContext:
    initialization    completed    in    1358    ms
2014-03-05    10:57:51.698        INFO    45469    ---    [ost-startStop-1]    o.s.b.
c.e.ServletRegistrationBean                                :    Mapping    servlet:    &apos;dispatche
rServlet&apos;    to    [/]
2014-03-05    10:57:51.702        INFO    45469    ---    [ost-startStop-1]    o.s.b.
c.embedded.FilterRegistrationBean        :    Mapping    filter:    &apos;hiddenHttp
MethodFilter&apos;    to:    [/*]
</code></pre><p>输出的节点（items）如下：</p>
<ol>
<li>日期和时间    -    精确到毫秒，且易于排序。</li>
<li>日志级别    -          ERROR    ,          WARN    ,          INFO    ,          DEBUG        或          TRACE    。</li>
<li>Process    ID。</li>
<li>—    分隔符，用于区分实际日志信息开头。</li>
<li>线程名    -    包括在方括号中（控制台输出可能会被截断）。</li>
<li>日志名    -    通常是源class的类名（缩写）。</li>
<li>日志信息。<br>注    Logback没有     FATAL    级别，它会映射到     ERROR    。</li>
</ol>
<p>##控制台输出##</p>
<p>默认的日志配置会在写日志消息时将它们回显到控制台，级别为     ERROR    ,WARN    和     INFO    的消息会被记录。你可以在启动应用时，通过     –debug    标识开启控制台的DEBUG级别日志记录，也可以在application.properties    中指定     debug=true    。</p>
<pre><code>$    java    -jar    myapp.jar    --debug
</code></pre><p>当debug模式启用时，一系列核心loggers（内嵌容器，Hibernate，Spring    Boot<br>等）记录的日志会变多，但不会输出所有的信息。<br>相应地，你可以在启动应用时，通过     –trace    （或在     application.properties    设置     trace=true    ）启用”trace”模式，该模式能够追踪核心loggers（内嵌容器，Hibernate生成的schema，Spring全部的portfolio）的所有日志信息。    </p>
<p>##文件输出##</p>
<p>默认情况下，SpringBoot只会将日志记录到控制台，而不写进日志文件，如果需要，你可以设置     logging.file    或     logging.path    属性（例如     application.properties    ）。<br>下表展示如何组合使用     logging.*    ：</p>
<table>
<thead>
<tr>
<th style="text-align:center">logging.file</th>
<th style="text-align:center">logging.path</th>
<th style="text-align:center">示例</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">(none)</td>
<td style="text-align:center">(none)</td>
<td style="text-align:center"></td>
<td style="text-align:center">只记录到控制台</td>
</tr>
<tr>
<td style="text-align:center">Specific    file</td>
<td style="text-align:center">(none)</td>
<td style="text-align:center">my.log</td>
<td style="text-align:center">写到特定的日志文件，名称可以是精确的位置或相对于当前目录</td>
</tr>
<tr>
<td style="text-align:center">(none)</td>
<td style="text-align:center">Specific directory</td>
<td style="text-align:center">/var/log</td>
<td style="text-align:center">写到特定目录下的     spring.log    里，名称可以是精确的位置或相对于当前目录</td>
</tr>
</tbody>
</table>
<p>日志文件每达到10M就会被分割，跟控制台一样，默认记录     ERROR    ,WARN    和     INFO    级别的信息。</p>
<p>##日志级别##</p>
<p>所有Spring    Boot支持的日志系统都可以在Spring          Environment    中设置级别（     application.properties    里也一样），设置格式为’logging.level.*=LEVEL’，其中     LEVEL    是     TRACE    ,          DEBUG    ,          INFO    ,          WARN    ,          ERROR    ,          FATAL    ,          OFF    之一：<br>以下是     application.properties    示例：</p>
<pre><code>logging.level.root=WARN
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate=ERROR
</code></pre><p>注    默认情况，Spring    Boot会重新映射Thymeleaf的     INFO    信息到     DEBUG    级别，这<br>能减少标准日志输出的噪声。查看LevelRemappingAppender可以按自己的配置设<br>置映射。</p>
]]></content>
      
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> log </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用CommandLineRunner或ApplicationRunner]]></title>
      <url>/2017/12/17/%E4%BD%BF%E7%94%A8CommandLineRunner%E6%88%96ApplicationRunner/</url>
      <content type="html"><![CDATA[<p><strong>使用CommandLineRunner或ApplicationRunner</strong></p>
<a id="more"></a>
<p>如果需要在     SpringApplication    启动后执行一些特殊的代码，你可以实<br>现     ApplicationRunner    或     CommandLineRunner    接口，这两个接口工作方式相<br>同，都只提供单一的     run    方法，该方法仅在     SpringApplication.run(…)    完成<br>之前调用。<br>     CommandLineRunner    接口能够访问string数组类型的应用参数，<br>而     ApplicationRunner    使用的是上面描述过的     ApplicationArguments    接口：</p>
<pre><code>import    org.springframework.boot.*
import    org.springframework.stereotype.*
@Component
public    class    MyBean    implements    CommandLineRunner    {
                public    void    run(String...    args)    {
                                //    Do    something...
                }
}
</code></pre><p>如果某些定义的     CommandLineRunner    或     ApplicationRunner        beans需要以特定<br>的顺序调用，你可以实现     <strong>org.springframework.core.Ordered</strong>    接口或使<br>用     <strong>org.springframework.core.annotation.Order</strong>    注解。</p>
]]></content>
      
        
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Application属性文件]]></title>
      <url>/2017/12/17/Application%E5%B1%9E%E6%80%A7%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p><strong>Application属性文件</strong></p>
<a id="more"></a>
<p>SpringApplication    将从以下位置加载     application.properties    文件，并把<br>它们添加到Spring          Environment    中：</p>
<ol>
<li><p>当前目录下的     /config    子目录。</p>
</li>
<li><p>当前目录。</p>
</li>
<li><p>classpath下的     /config    包。</p>
</li>
<li><p>classpath根路径（root）。</p>
</li>
</ol>
<p>该列表是按优先级排序的（列表中位置高的路径下定义的属性将覆盖位置低的）。<br>注    你可以使用YAML（’.yml’）文件替代’.properties’。</p>
<p>如果不喜欢将     application.properties    作为配置文件名，你可以通过指<br>定     spring.config.name    环境属性来切换其他的名称，也可以使<br>用     spring.config.location    环境属性引用一个明确的路径（目录位置或文件路<br>径列表以逗号分割）。</p>
<pre><code>$    java    -jar    myproject.jar    --spring.config.name=myproject
或
$    java    -jar    myproject.jar    --spring.config.location=classpath:/de
fault.properties,classpath:/override.properties
</code></pre><p>注    在初期需要根据     spring.config.name    和     spring.config.location    决定加<br>载哪个文件，所以它们必须定义为environment属性（通常为OS    env，系统属性或<br>命令行参数）。</p>
<p>如果     spring.config.location    包含目录（相对于文件），那它们应该以     /    结尾<br>（在被加载前，     spring.config.name    关联的名称将被追加到后面，包括profile-<br>specific的文件名）。     spring.config.location    下定义的文件使用方法跟往常一<br>样，没有profile-specific变量支持的属性，将被profile-specific的属性覆盖。</p>
<p>不管     spring.config.location    配置什么值，默认总会按<br>照     classpath:,classpath:/config,file:,file:config/    的顺序进行搜索，优<br>先级由低到高，也就是     file:config/    获胜。<br>如果你指定自己的位置，它们会优先于所有的默认位置（locations），并使用相同的由低到高的优先级顺序。<br>那样，你就可以在     application.properties    为应用设置默认值，然后在运行的时候使<br>用不同的文件覆盖它，同时保留默认配置。</p>
<p>注    如果使用环境变量而不是系统属性，需要注意多数操作系统的key名称不允许以<br>句号分割（period-separated），但你可以使用下划线（underscores）代替（比<br>如，使用     SPRING_CONFIG_NAME    代替     spring.config.name    ）。<br>注    如果应用运行在容器中，那么JNDI属性（java:comp/env）或servlet上下文初始<br>化参数可以用来代替环境变量或系统属性，当然也可以使用环境变量或系统属性。</p>
]]></content>
      
        
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[第三方配置]]></title>
      <url>/2017/12/17/%E7%AC%AC%E4%B8%89%E6%96%B9%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p><strong>第三方配置</strong></p>
<a id="more"></a>
<p>@ConfigurationProperties    不仅可以注解在类上，也可以注解在public @Bean    方法上，当你需要为不受控的第三方组件绑定属性时，该方法将非常有<br>用。为了从     Environment属性中配置一个bean，你需要使用@ConfigurationProperties    注解该bean：</p>
<pre><code>@ConfigurationProperties(prefix    =    &quot;foo&quot;)
@Bean
public    FooComponent    fooComponent()    {
                ...
}
</code></pre><p>和上面     ConnectionSettings    的示例方式相同，所有以foo为前缀的属性定义都会被映射到     FooComponent    上。</p>
<p>##Relaxed绑定##</p>
<p>Spring    Boot将     Environment    属性绑定到     @ConfigurationProperties        beans时会使用一些宽松的规则，所以     Environment属性名和bean属性名不需要精确匹配。常见的示例中有用的包括虚线分割（比如，     context-path    绑定到     contextPath    ），将environment属性转为大写字母（比如，     PORT    绑定     port    ）。<br>例如，给定以下     @ConfigurationProperties    类：</p>
<pre><code>@ConfigurationProperties(prefix=&quot;person&quot;)
public    class    OwnerProperties    {
                private    String    firstName;
                public    String    getFirstName()    {
                                return    this.firstName;
                }
                public    void    setFirstName(String    firstName)    {
                                this.firstName    =    firstName;
                }
}
</code></pre><p>下面的属性名都能使用：</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">person.firstName</td>
<td style="text-align:center">标准驼峰规则</td>
</tr>
<tr>
<td style="text-align:center">person.first-name</td>
<td style="text-align:center">虚线表示，推荐用于     .properties    和     .yml文件中</td>
</tr>
<tr>
<td style="text-align:center">person.first_name</td>
<td style="text-align:center">下划线表示，用于     .properties    和     .yml    文件的可选格式</td>
</tr>
<tr>
<td style="text-align:center">PERSON_FIRST_NAME</td>
<td style="text-align:center">大写形式，使用系统环境变量时推荐</td>
</tr>
</tbody>
</table>
<p>##属性转换##</p>
<p>将外部应用配置绑定到     @ConfigurationProperties        beans时，Spring会尝试将属性强制转换为正确的类型。如果需要自定义类型转换器，你可以提供一个ConversionService        bean（bean    id为     conversionService    ），或自定义属性编辑器（通过     CustomEditorConfigurer        bean），或自定义     Converters    （bean定义时需要注解     @ConfigurationPropertiesBinding    ）。</p>
<p>注    由于该bean在应用程序生命周期的早期就需要使用，所以确保限制你的     ConversionService使用的依赖。通常，在创建时期任何你需要的依赖可能都<br>没完全初始化。        </p>
<p>##@ConfigurationProperties校验##</p>
<p>Spring    Boot将尝试校验外部配置，默认使用JSR-303（如果在classpath路径中），你只需要将JSR-303          javax.validation    约束注解添加到     @ConfigurationProperties    类上：</p>
<pre><code>@ConfigurationProperties(prefix=&quot;connection&quot;)
public    class    ConnectionProperties    {
                @NotNull
                private    InetAddress    remoteAddress;
                //    ...    getters    and    setters
}
</code></pre><p>为了校验内嵌属性的值，你需要使用     @Valid    注解关联的字段以触发它的校验，例<br>如：    </p>
<pre><code>@ConfigurationProperties(prefix=&quot;connection&quot;)
public    class    ConnectionProperties    {
                @NotNull
                @Valid
                private    RemoteAddress    remoteAddress;
                //    ...    getters    and    setters
                public    static    class    RemoteAddress    {
                                @NotEmpty
                                public    String    hostname;
                                //    ...    getters    and    setters
                }
}
</code></pre><p>你也可以通过创建一个叫做     configurationPropertiesValidator    的bean来添加自定义的Spring          Validator    。     @Bean    方法需要声明为     static    ，因为配置属性校验器在应用程序生命周期中创建的比较早，将     @Bean    方法声明为     static    允许该bean在创建时不需要实例化     @Configuration    类，从而避免了早期实例化（early    instantiation）的所有问题。相关的示例可以看这里。</p>
<p>注          spring-boot-actuator    模块包含一个暴露所有     @ConfigurationProperties        beans的端点（endpoint），通过浏览器打开     /configprops    进行浏览，或使用等效的JMX端点，具体参考Production    readyfeatures。    </p>
<h2 id="ConfigurationProperties-vs-Value"><a href="#ConfigurationProperties-vs-Value" class="headerlink" title="@ConfigurationProperties    vs.    @Value"></a>@ConfigurationProperties    vs.    @Value</h2><p>@Value    是Spring容器的一个核心特性，它没有提供跟type-safe    Configuration<br>Properties相同的特性。下面的表格总结了     @ConfigurationProperties    和     @Value    支持的特性：</p>
<table>
<thead>
<tr>
<th style="text-align:center">特性</th>
<th style="text-align:center">@ConfigurationProperties</th>
<th>@Value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Relaxed绑定</td>
<td style="text-align:center">Yes</td>
<td>No</td>
</tr>
<tr>
<td style="text-align:center">Meta-data支持</td>
<td style="text-align:center">Yes</td>
<td>No</td>
</tr>
<tr>
<td style="text-align:center">SpEL表达式</td>
<td style="text-align:center">No</td>
<td>Yes</td>
</tr>
</tbody>
</table>
<p>如果你为自己的组件定义了一系列的配置keys，我们建议你将它们以@ConfigurationProperties    注解的POJO进行分组。<br>由于     @Value    不支持relaxed绑定，所以如果你使用环境变量提供属性值的话，它就不是很好的选择。最后，尽管     @Value    可以写     SpEL表达式，但这些表达式不会处理来自Application属性文件的属性。</p>
]]></content>
      
        
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> config </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WEB环境下进行单元测试]]></title>
      <url>/2017/12/17/WEB%E7%8E%AF%E5%A2%83%E4%B8%8B%E8%BF%9B%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<p><strong>WEB环境下进行单元测试</strong></p>
<a id="more"></a>
<p> SpringApplication    将尝试为你创建正确类型的     ApplicationContext    ，默认<br>情况下，根据你开发的是否为web应用决定使<br>用     AnnotationConfigApplicationContext    或     AnnotationConfigEmbeddedWeb<br>ApplicationContext    。<br>用于确定是否为web环境的算法相当简单（判断是否存在某些类），你可以使<br>用     setWebEnvironment(boolean    webEnvironment)    覆盖默认行为。<br>通过调用     setApplicationContextClass(…)    ，你可以完全控<br>制     ApplicationContext    的类型。<br>注    在Junit测试中使用     SpringApplication    ，调<br>用     <strong>setWebEnvironment(false)</strong>    是很有意义的。</p>
]]></content>
      
        
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring boot简介]]></title>
      <url>/2017/12/02/spring-boot%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p><strong>spring boot</strong></p>
<p>spring boot 为所有spring框架开发者提供一种更加易于理解，更加便捷高效的开发方式；<br>通过提供更为直观的spring平台和第三方依赖库，只需要极其少量的spring配置，便能部署运行spring boot应用。</p>
<a id="more"></a>
<p>1.环境要求</p>
<p>Spring Boot 2.0.0.BUILD-SNAPSHOT 需要 Java 8 以及 Spring Framework 5.0.2.RELEASE 或者以上版本.<br>当使用maven或者gradle构建spring boot时需要 Maven 3.2+ 或者 Gradle 4及其以上版本.</p>
<p>2.spring boot安装</p>
<p>2.1使用maven 构建spring boot应用</p>
<p>pom.xml配置:</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;groupId&gt;com.example&lt;/groupId&gt;
    &lt;artifactId&gt;myproject&lt;/artifactId&gt;
    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;

    &lt;!-- Inherit defaults from Spring Boot --&gt;
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.0.0.BUILD-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;

    &lt;!-- Add typical dependencies for a web application --&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;!-- Package as an executable jar --&gt;
    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

    &lt;!-- Add Spring repositories --&gt;
    &lt;!-- (you don&apos;t need this if you are using a .RELEASE version) --&gt;
    &lt;repositories&gt;
        &lt;repository&gt;
            &lt;id&gt;spring-snapshots&lt;/id&gt;
            &lt;url&gt;http://repo.spring.io/snapshot&lt;/url&gt;
            &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;
        &lt;/repository&gt;
        &lt;repository&gt;
            &lt;id&gt;spring-milestones&lt;/id&gt;
            &lt;url&gt;http://repo.spring.io/milestone&lt;/url&gt;
        &lt;/repository&gt;
    &lt;/repositories&gt;
    &lt;pluginRepositories&gt;
        &lt;pluginRepository&gt;
            &lt;id&gt;spring-snapshots&lt;/id&gt;
            &lt;url&gt;http://repo.spring.io/snapshot&lt;/url&gt;
        &lt;/pluginRepository&gt;
        &lt;pluginRepository&gt;
            &lt;id&gt;spring-milestones&lt;/id&gt;
            &lt;url&gt;http://repo.spring.io/milestone&lt;/url&gt;
        &lt;/pluginRepository&gt;
    &lt;/pluginRepositories&gt;
&lt;/project&gt;
</code></pre><p>2.2安装Spring Boot CLI</p>
<p>The Spring Boot CLI (Command Line Interface)是一个用于快速建立spring原型的命令行工具.<br>通过它你能运行Groovy scripts,使用熟悉的类java语法。</p>
<p>使用CLI来运行spring boot不是必须的,但它是使spring应用运行起来的最快方法.</p>
<p>2.2.1 手动安装</p>
<p>你可以在spring 软件仓库下载Spring CLI</p>
<p><a href="https://repo.spring.io/snapshot/org/springframework/boot/spring-boot-cli/2.0.0.BUILD-SNAPSHOT/spring-boot-cli-2.0.0.BUILD-SNAPSHOT-bin.zip" target="_blank" rel="external">spring-boot-cli-2.0.0.BUILD-SNAPSHOT-bin.zip</a></p>
<p><a href="https://repo.spring.io/snapshot/org/springframework/boot/spring-boot-cli/2.0.0.BUILD-SNAPSHOT/spring-boot-cli-2.0.0.BUILD-SNAPSHOT-bin.tar.gz" target="_blank" rel="external">spring-boot-cli-2.0.0.BUILD-SNAPSHOT-bin.tar.gz</a></p>
<p>2.2.2 通过SDKMAN安装</p>
<p>SDKMAN!(The Software Development Kit Manager)可以用来管理不同版本的二进制sdks,包括 Groovy和Spring Boot CLI.<br>从<a href="http://sdkman.io/" target="_blank" rel="external">sdkman.io</a>获取SDKMAN!并且通过以下命令来安装Spring Boot</p>
<pre><code>$ sdk install springboot
$ spring --version
Spring Boot v2.0.0.BUILD-SNAPSHOT
</code></pre><p>上述的安装方式都会在本地建立一个名为dev的Spring实例,它指向你的安装路径,所以你每次重建Spring Boot时,<br>spring 都会更新到最新.</p>
<p>你能通过以下命令看到它是如何进行的:</p>
<p>$ sdk ls springboot</p>
<pre><code>================================================================================
Available Springboot Versions
================================================================================
&gt; + dev
* 2.0.0.BUILD-SNAPSHOT

================================================================================
+ - local version
* - installed
&gt; - currently in use
================================================================================    
</code></pre><p>3.开发你首个Spring Boot 应用</p>
<p>这个章节描述了如何区开发一个\”五脏俱全\”的Spring Boot \”Hello World!\”应用.<br>我们使用Maven来构建这个项目,因为大部分IDES都支持它.</p>
<p><a href="https://spring.io/" target="_blank" rel="external">spring.io</a>web网站包含很多”Getting Started”的spring boot教程,<br>如果你需要解决一些特定的问题,首先查看这里.</p>
<p>开始之前首先检查jdk版本和maven版本是否满足要求</p>
<p>java -version</p>
<p>mvn -v</p>
<p>pom.xml 配置如下:</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;groupId&gt;com.example&lt;/groupId&gt;
    &lt;artifactId&gt;myproject&lt;/artifactId&gt;
    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;

    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.0.0.BUILD-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;

    &lt;!-- Additional lines to be added here... --&gt;

    &lt;!-- (you don&apos;t need this if you are using a .RELEASE version) --&gt;
    &lt;repositories&gt;
        &lt;repository&gt;
            &lt;id&gt;spring-snapshots&lt;/id&gt;
            &lt;url&gt;http://repo.spring.io/snapshot&lt;/url&gt;
            &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;
        &lt;/repository&gt;
        &lt;repository&gt;
            &lt;id&gt;spring-milestones&lt;/id&gt;
            &lt;url&gt;http://repo.spring.io/milestone&lt;/url&gt;
        &lt;/repository&gt;
    &lt;/repositories&gt;
    &lt;pluginRepositories&gt;
        &lt;pluginRepository&gt;
            &lt;id&gt;spring-snapshots&lt;/id&gt;
            &lt;url&gt;http://repo.spring.io/snapshot&lt;/url&gt;
        &lt;/pluginRepository&gt;
        &lt;pluginRepository&gt;
            &lt;id&gt;spring-milestones&lt;/id&gt;
            &lt;url&gt;http://repo.spring.io/milestone&lt;/url&gt;
        &lt;/pluginRepository&gt;
    &lt;/pluginRepositories&gt;
&lt;/project&gt;
</code></pre><p>3.2 Spring Boot提供了大量的”Starters”开始器使你能在classpath路径添加jars.<br>我们普通的例子应用已经在POM的父节点使用 spring-boot-starter-parent .</p>
<p>spring-boot-starter-parent是一个提供了众多有用Maven默认配置的特殊启动器.<br>它同样提供了dependency-management配置使你能够为一些dependencies依赖省略 version 配置.</p>
<p>但你开发其它特殊类型的应用时可能需要使用到其它启动器(Starters),例如,当我们开发一个web应用时,<br>我们添加spring-boot-starter-web 依赖.在那之前,我们可以通过以下命令查看依赖树:</p>
<p>mvn dependency:tree</p>
<p>通过mvn dependency:tree命令我们可以查看项目的依赖树结构,<br>你可以看到  spring-boot-starter-parent 本身没有提供其它依赖.<br>通过编辑pom.xml添加必要的依赖</p>
<dependencies><br>    <dependency><br>        <groupid>org.springframework.boot</groupid><br>        <artifactid>spring-boot-starter-web</artifactid><br>    </dependency><br></dependencies>

<p>如果你再次运行 mvn dependency:tree 命令,你就能看到一系列新添加的依赖,<br>包括tomcat 服务器以及spring boot本身.</p>
<p>3.3 代码编写</p>
<p>为了完成应用，我们首先需要创建一个java文件.<br>在src/main/java下创建Example.java文件并添加以下代码:</p>
<pre><code>import org.springframework.boot.*;
import org.springframework.boot.autoconfigure.*;
import org.springframework.web.bind.annotation.*;

@RestController
@EnableAutoConfiguration
public class Example {

    @RequestMapping(&quot;/&quot;)
    String home() {
        return &quot;Hello World!&quot;;
    }

    public static void main(String[] args) throws Exception {
        SpringApplication.run(Example.class, args);
    }

}
</code></pre><p>3.3.1 @RestController 和 @RequestMapping 注解</p>
]]></content>
      
        
        <tags>
            
            <tag> spring </tag>
            
            <tag> 框架 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[快速排序]]></title>
      <url>/2017/12/02/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p><strong>快速排序</strong></p>
<p>堆排序是指利用堆这种数据结构所设计的一种排序算法.堆是一种特殊的二叉树,每个子节点的值总是小于(或大于)它的父节点,相应的分为最大堆或最小堆,<br>通过最大堆或最小堆不断输出堆顶元素,直到全部元素都已输出,得到的输出元素序列即为有序序列.</p>
<a id="more"></a>]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[堆排序]]></title>
      <url>/2017/12/01/%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p><strong>堆排序</strong></p>
<p>堆排序是指利用堆这种数据结构所设计的一种排序算法.堆是一种特殊的二叉树,每个子节点的值总是小于(或大于)它的父节点,相应的分为最大堆或最小堆,<br>通过最大堆或最小堆不断输出堆顶元素,直到全部元素都已输出,得到的输出元素序列即为有序序列.</p>
<a id="more"></a>
<pre><code>import java.util.Arrays;

public class HeapSort3 {

    public static void main(String[] args){

        int[] test = new int[]{8,11,3,6,23,14,18,7,55,34};

        System.out.println(&quot;初始数组:&quot; + Arrays.toString(test));

        HeapSort3.heapSort(test);

        System.out.println(Arrays.toString(test));

    }

    public static int leftChild(int child){


        return child * 2 + 1;

    }

    public static void precDown(int[] a,int i,int n){

        int child;

        int temp;
        for(temp = a[i];leftChild(i) &lt; n;i = child){

            child = leftChild(i);

            if(i != n - 1 &amp;&amp; a[child] &lt; a[child + 1]){
                child++;
            }
            if(a[i] &lt; a[child]){
                a[i] = a[child];
            }

        }
        a[i] = temp;
    }


    public static void swapReferences(int[] a,int index){

        int temp = a[0];
        a[0] = a[index];

        a[index] = temp;




    }

    public static void heapSort(int[] a){

        for(int i = a.length / 2;i &gt; 0;i--){

            precDown(a,i,a.length - 1);

        }
        System.out.println(&quot;max二叉堆构建完毕:&quot; + Arrays.toString(a));


        for(int k = a.length - 1;k &gt; 0;k--){

            swapReferences(a,k);
            precDown(a,0,k);


        }

    }


}
</code></pre><p><strong>最差时间复杂度:O(N*logN),平均时间复杂度O(N*logN),空间复杂度:O(1),不稳定算法</strong>        </p>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[归并排序]]></title>
      <url>/2017/11/21/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p><strong>归并排序</strong></p>
<p>将一个无序序列进行折半递归,直到得到单个元素的有序序列,然后递归的将折半后左右两边的有序序列依次进行合并,最终得到有序序列.</p>
<a id="more"></a>
<pre><code>import java.util.Arrays;

public class MergeSort {


    public static void main(String[] args){

        int[] a = new int[]{11,2,5,15,23,44,24,8};

        mergeSort(a);

        System.out.println(Arrays.toString(a));

    }

    private static  void mergeSort(int[] a,int[] tmpArray,int left,int right){

        if(left &lt; right){
            int center = (left + right) / 2;
            mergeSort(a,tmpArray,left,center);
            mergeSort(a,tmpArray,center + 1,right);
            merge(a,tmpArray,left,center + 1,right);
        }
        System.out.println(&quot;left:&quot; + left + &quot;,right:&quot; + right);

    }


    public static  void mergeSort(int[] a){
        int[] tmpArray = new int[a.length];
        mergeSort(a,tmpArray,0,a.length - 1);
    }


    private static  void merge(int[] a,int[] tmpArray,int leftPos,int rightPos,int rightEnd){

        System.out.println(&quot;leftPos:&quot; + leftPos + &quot;,rightPos:&quot; + rightPos + &quot;,rightEnd:&quot; + rightEnd);


        int leftEnd = rightPos - 1;
        int tmpPos = leftPos;
        int numElements = rightEnd - leftPos + 1;

        //Main loop

        while(leftPos &lt;= leftEnd &amp;&amp; rightPos &lt;= rightEnd){
            if(a[leftPos] &lt; a[rightPos]){
                tmpArray[tmpPos++] = a[leftPos++];
            }else{
                tmpArray[tmpPos++] = a[rightPos++];
            }
        }
        while(leftPos &lt;= leftEnd){
            tmpArray[tmpPos++] = a[leftPos++];
        }

        while(rightPos &lt;= rightEnd){
            tmpArray[tmpPos++] = a[rightPos++];
        }

        for(int i = 0;i &lt; numElements;i++,rightEnd--){
            a[rightEnd] = tmpArray[rightEnd];
        }

    }



}
</code></pre><p><strong>最差时间复杂度:O(N^2) 平均时间复杂度O(N*logN) 空间复杂度:O(N) 稳定算法</strong>    </p>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[希尔排序]]></title>
      <url>/2017/11/20/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p><strong>希尔排序</strong></p>
<p>希尔排序(ShellSort)的名称源于它的发明者Donald Shell.<br>它通过比较相距一定间隔(h[k])的元素来工作,各躺比较所用的距离随着算法的进行而减小(h[k-1]),直到只比较相邻元素的最后一趟排序为止,因此希尔排序也称为缩减增量排序.<br>希尔排序所使用的增量序列只要h[1]=1,任何增量序列都是可行的,但其时间复杂度会有所不同.<br><a id="more"></a></p>
<pre><code>import java.util.*;

public class Test {
    public static void main(String[] args){

        int[] test = new int[]{11,3,8,25,22};


        Test.shellSort(test);


    }


    /**
     * 希尔排序,使用ht=N/2 hk=h(k+1)/2的增量序列
     * @param a
     */
    public static void shellSort(int[] a){

        int hk;
        int j;
        for(hk = a.length / 2;hk &gt; 0 ;hk /= 2){



            for(int k = hk;k &lt; a.length;k++){
                int temp = a[k];
                for(j = k;j &gt;= hk &amp;&amp; a[j - hk] &gt; temp;j -= hk){
                    a[j] = a[j- hk];
                }
                a[j] = temp;
            }
        }
        System.out.println(Arrays.toString(a));
    }



}
</code></pre><p><strong>不稳定算法 空间复杂度O(1)</strong>    </p>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[插入排序]]></title>
      <url>/2017/11/20/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p><strong>插入排序</strong></p>
<p>插入排序由N-1趟排序组成,对于p=1到N-1趟,插入排序保证从位置0到位置p上的元素为已排序状态.</p>
<a id="more"></a>
<pre><code>import java.util.Arrays;

public class InsertSort2 {


    public static void main(String[] args){
        int[] a = new int[]{11,3,6,22,15};
        sort(a);
        System.out.println(Arrays.toString(a));
    }

    //插入排序：
    //将无序的元素插入到有序的元素序列中，插入后仍然有序
    public static void sort(int[] a){
        int k;
        for(int p = 1;p &lt; a.length;p++){
            int temp = a[p];
            for(k = p;k &gt; 0 &amp;&amp; a[k- 1] &gt; temp;k--){
                a[k] = a[k- 1];
            }
            a[k] = temp;
        }


    }


}
</code></pre><p><strong>最差时间复杂度:O(n^2) 平均时间复杂度O(n^2) 空间复杂度:O(1) 稳定算法</strong></p>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[冒泡排序]]></title>
      <url>/2017/11/20/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p><strong>冒泡排序</strong><br><a id="more"></a></p>
<pre><code>import java.util.Arrays;

public class MTest {

    //冒泡排序：
    //比较相邻元素，直到序列变为有序为止
    public static void main(String[] args){


        int[] a = new int[]{7,2,8,11,3,5,4};


        //int[] a = new int[]{1,2,3,4,5,6};

        for(int i = 0;i &lt; a.length - 1;i++){
            boolean flag =false;
            for(int k = 0;k &lt; a.length - 1 -i;k++){
                if(a[k] &gt; a[k + 1]){
                    int temp = a[k];
                    a[k] = a[k + 1];
                    a[k + 1] = temp;
                    flag = true;
                }

            }
            if(!flag){
                break;
            }
        }
        System.out.println(Arrays.toString(a));

    }


}
</code></pre><p><strong>每次循环对每对相邻元素依次进行比较,比较过后最后的元素也是最大的元素,重复n-1次即可得到有序序列</strong><br><strong>最差时间复杂度:O(n^2) 平均时间复杂度O(n^2) 空间复杂度:O(1) 稳定算法</strong></p>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
