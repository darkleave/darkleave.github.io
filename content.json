{"meta":{"title":"静默的魔法书","subtitle":"零","description":"A Salty Fish","author":"Hans Chung","url":"http://www.zhz.gift"},"pages":[{"title":"tags","date":"2018-01-09T11:10:05.000Z","updated":"2018-01-09T14:05:39.629Z","comments":true,"path":"tags/index.html","permalink":"http://www.zhz.gift/tags/index.html","excerpt":"","text":""},{"title":"About Me","date":"2017-11-18T11:35:43.000Z","updated":"2017-11-18T11:58:26.965Z","comments":true,"path":"about/index.html","permalink":"http://www.zhz.gift/about/index.html","excerpt":"","text":"I’m only a salty fish.. i will make more efforts.i promise..maybe"}],"posts":[{"title":"Ubuntu docker 安装","slug":"Ubuntu docker 安装","date":"2018-02-03T16:07:42.000Z","updated":"2018-02-03T16:24:48.814Z","comments":true,"path":"2018/02/04/Ubuntu docker 安装/","link":"","permalink":"http://www.zhz.gift/2018/02/04/Ubuntu docker 安装/","excerpt":"Docker是什么?Docker是一种容器技术.Docker容器技术已在云计算市场上风靡一时了，使docker容器技术如此受欢迎的原因是，容器技术可实现不同云计算之间应用程序的可移植性，以及提供了一个把应用程序拆分为分布式组件的方法，此外，用户还可以管理和扩展这些组件成为集群.","text":"Docker是什么?Docker是一种容器技术.Docker容器技术已在云计算市场上风靡一时了，使docker容器技术如此受欢迎的原因是，容器技术可实现不同云计算之间应用程序的可移植性，以及提供了一个把应用程序拆分为分布式组件的方法，此外，用户还可以管理和扩展这些组件成为集群. 官网链接 一旦你完成docker的安装后,可以用如下命令对你的docker进行测试: $ docker run hello-world Unable to find image &apos;hello-world:latest&apos; locally latest: Pulling from library/hello-world 03f4658f8b78: Pull complete a3ed95caeb02: Pull complete Digest: sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7 Status: Downloaded newer image for hello-world:latest Hello from Docker. This message shows that your installation appears to be working correctly. ... 卸载老版本老版本的Docker一般命名为 docker 或者 docker-engine.在安装新版本前需要对他们进行卸载. $ sudo apt-get remove docker docker-engine docker.io 即时apt-get命令提示没有上述的任意包被安装也没有影响./var/lib/docker/ 文件夹一般包含images, containers, volumes, and networks等. Docker CE包现在被命名为: docker-ce 安装Docker CE你可以根据需要选择以下合适的方式来安装Docker CE： 通过repository进行安装在你第一次在一台新主机上安装docker之前,你需要先设置Docker仓库,之后,你就可以直接通过仓库安装和更新Docker.设置仓库 更新apt命令的包索引 1sudo apt-get update 安装仓库使用所需的https依赖包 12345sudo apt-get install \\apt-transport-https \\ca-certificates \\curl \\software-properties-common 添加Docker的官方GPG key 12$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - 验证你现在拥有的指纹秘钥:(eg:)9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88搜索最后八个长度的指纹: 123456789 $ sudo apt-key fingerprint 0EBFCD88 pub 4096R/0EBFCD88 2017-02-22 Key fingerprint = 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 uid Docker Release (CE deb) &lt;docker@docker.com&gt; sub 4096R/F273FCD8 2017-02-22 ``` 4. 使用以下命令来设置你的stable repository(稳定仓库).你总是需要stable repository,即使你想要从edge或者test仓库安装构建也一样.想要添加edge或者test仓库,只需在以下命令的stable后面添加相应的edge或者test即可. 提示：lsb_release -cs 子命令返回你Ubuntu发布版本的名称,例如xenial.有时候,一些发布版本,比如Linux Mint,你可能需要把 $(lsb_release -cs)命令换成你对应的父级 Ubuntu 发布版本比如,如果你正在使用Linux Mint Rafaela,你可能要使用 trusty. 1**x86_64 / amd64** $ sudo add-apt-repository \\ &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable&quot; 1234567 **提示:从17.06版本开始,stable 发布时会同样推送到edge和test仓库.** [Learn about stable and edge channels.](https://docs.docker.com/install/) **Docker CE安装步骤** 1. 更新apt包索引... $ sudo apt-get update 123 2. 安装最新版本的Docker CE或者直接到下一步安装特定版本的Docker CE. 任何当前的版本会被替换为安装的版本. $ sudo apt-get install docker-ce 1 获取多个Docker仓库? 如果你有多个可用的Docker仓库,安装或者更新操作没有指定特定的版本,apt-get install 或者apt-get update 命令总是会按照最高的可用版本,可能并不满足你稳定性的需要. 12345678910111213141516171819202122232425262728293031 3. 在生产环境,你需要使用特定版本的Docker CE版本而不是一直使用最新的. 以下命令会列出所有可用版本(输出只展示了一部分): ``` $ apt-cache madison docker-ce docker-ce | 17.12.0~ce-0~ubuntu | https://download.docker.com/linux/ubuntu xenial/stable amd64 Packages ``` 该列表数据依赖于你可用的仓库.选择一个特定的版本去安装.第二列是版本字符串.第三列是仓库名,用来表明该仓库的来源地址和稳定性等级,stable,edge或者test.想要安装特定的版本,只需在包名后面添加(=)后和版本字符串即可. ``` $ sudo apt-get install docker-ce=&lt;VERSION&gt; ``` Docker守护进程在安装完成后会自动启动.4. 通过运行hello-world image 来验证Docker CE是否已经正确安装.``` $ sudo docker run hello-world ``` 这个命令会下载一个测试镜像并且在容器中运行它.当容器运行,它会打印提示信息并且退出.Dcoker CE 已经安装并且运行.docker group 已经创建但是没有用户添加到它上面.你需要通过使用sudo命令去运行Docker命令.继续到[Linux postinstall](https://docs.docker.com/install/linux/linux-postinstall/)去允许未授权的用户能够运行Docker命令和一些可选的配置步骤.**升级 DOCKER CE**升级Docker CE,首先同样通过sudo命令更新包索引apt-get update,然后按照按照指令,选择新的版本直接进行安装即可.**卸载Docker CE**1. 卸载Docker CE包: $ sudo apt-get purge docker-ce 12. 手动删除镜像，容器等文件(Images, containers, volumes, or customized configuration files) $ sudo rm -rf /var/lib/docker ``` 你必须删除所有已编辑的配置文件.","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://www.zhz.gift/tags/docker/"}]},{"title":"运行你的第一个容器","slug":"运行你的第一个容器","date":"2018-02-03T16:07:42.000Z","updated":"2018-02-03T16:24:21.720Z","comments":true,"path":"2018/02/04/运行你的第一个容器/","link":"","permalink":"http://www.zhz.gift/2018/02/04/运行你的第一个容器/","excerpt":"运行你的第一个容器现在你已经准备好了所有的东西,是时候开始实践了.在这个章节,我们将要运行一个 Alpine Linux 容器(一个轻量级的linux 发布版本)在你的系统上并且尝试一下docker的运行命令.","text":"运行你的第一个容器现在你已经准备好了所有的东西,是时候开始实践了.在这个章节,我们将要运行一个 Alpine Linux 容器(一个轻量级的linux 发布版本)在你的系统上并且尝试一下docker的运行命令. 首先运行以下命令: $ docker pull alpine Note:根据你在系统中安装docker的方式,在运行以上命令后你可能会看到一个ermission denied的错误.尝试在安装教程中的命令去验证你的安装.如果你是Linux系统,你可能需要在你的命令前面加上sudo.或者你可以创建一个docker group来拜托这个问题. pull命令从Dcoker仓库获取 alpine 镜像并且保存在我们的系统中.你可以使用docker images 命令来查看在你系统中的所有镜像. $ docker images REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE alpine latest c51f86c28340 4 weeks ago 1.109 MB hello-world latest 690ed74de00f 5 months ago 960 B Docker Run接下来基于这个镜像运行一个Docker 容器.只需要通过 docker run命令我们就能做到这一点. $ docker run alpine ls -l total 48 drwxr-xr-x 2 root root 4096 Mar 2 16:20 bin drwxr-xr-x 5 root root 360 Mar 18 09:47 dev drwxr-xr-x 13 root root 4096 Mar 18 09:47 etc drwxr-xr-x 2 root root 4096 Mar 2 16:20 home drwxr-xr-x 5 root root 4096 Mar 2 16:20 lib ...... ...... 当你运行 docker run命令的时候,Docker 客户端联系Docker守护进程. Docker 守护进程会首先检查所有本地存储,确定镜像(本例是alpine)在本地可用,如果不可用的话，从Docker Store 下载.(直到我们发布docker pull alpine 之前,下载步骤不是必须的) Docker 守护进程创建容器接下来在容器内运行一个命令. Docker守护进程将该命令的输出以流的形式返回给客户端. 接下来运行如下命令: $ docker run alpine echo &quot;hello from alpine&quot; hello from alpine “hello from alpine”就是实际的输出.在这个场景,Docker 客户端忠实地在我们的alpine容器运行echo命令然后自动退出.如果你多加注意的话，你会发现所有的一切发生的相当快.镜像在虚拟机中启动,运行一个命令然后销毁它.现在你知道为什么容器运行速度如此之快！ 接下来运行另一个命令: $ docker run alpine /bin/sh 什么都没有发生,这些交互式shell会在运行任意scripted命令之后退出.除非它们是在一个交互式终端中运行 - 所以为了让它不自动退出，你需要用docker run -it alpine /bin/sh命令来代替. 你现在便处于容器 shell 当中 ,并且可以尝试使用一些命令比如:ls -l,uname -a 或者其它等等.通过exit命令来退出容器. docker ps命令向你展示所有正确运行的容器. $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 因为没有运行中的容器,所以展示列表是空的.接下来尝试使用一个有用的变量,运行 docker ps -a命令 $ docker ps -a $ docker ps -a|CONTAINER ID |IMAGE |COMMAND |CREATED |STATUS | PORTS |NAMES||:—-:|:—-:|:—-:|:—-:|:—-:|:—-:|:—-:||36171a5da744 |alpine | “/bin/sh” | 5 minutes ago |Exited (0) 2 minutes ago | |fervent_newton||a6a9d46d0b2f | alpine | “echo ‘hello from alp” |6 minutes ago |Exited (0) 6 minutes ago | |lonely_kilby|ff0a5c3750b9 | alpine | “ls -l” |8 minutes ago | Exited (0) 8 minutes ago | |elated_ramanujan|c317d0a9e3d2 | hello-world | “/hello” |34 seconds ago |Exited (0) 12 minutes ago | |stupefied_mcclintock 上面是所有你能够运行的容器.可以注意到STATUS列展示了容器是在几分钟前推出的.接下来尝试在一个容器中运行多条命令. $ docker run -it alpine /bin/sh / # ls bin dev etc home lib linuxrc media mnt proc root run sbin sys tmp usr var / # uname -a Linux 97916e8cb5dc 4.4.27-moby #1 SMP Wed Oct 26 14:01:48 UTC 2016 x86_64 Linux 通过运行run命令附加-it标志的方式使我们能在容器中以交互式终端的方式进行交互.现在你能在容器运行任意数量的命令. 如上述我们已经展示了你可能使用最频繁的命令,你可以通过使用docker run –help来展示该命令所有支持的附加选项.随着你继续深入的学习,我们也将会看到docker run命令支持的更多变量. Terminology(术语)在上一小节,你已经看到了许多Docker 特殊的术语,你可能会对其中一些感到困惑.所以在我们继续深入之前,先阐述一下一些我们在Docker 生态系统(ecosystem)中经常性使用的术语. Images - 用来创建容器的属于我们应用的文件系统和相关配置.想要知道更多关于Docker镜像,运行docker inspect alpine命令.在上面的demo中,我们通过docker pull命令来下载alpine镜像.当你执行docker run hello-world命令,它同样会在后台运行docker pull命令以下载hello-world镜像. Containers - 用以运行Docker镜像的实例 - 容器会运行实际的应用.一个容器包含一个应用和它的所有依赖.它和其它容器共享内核,并且在宿主操作系统上面的用户空间以一个隔离进程运行.你通过docker run命令创建一个容器以运行alpine image 的实例.通过docker ps命令来展示一系列正在运行的容器. Docker daemon - Docker 守护进程是一个运行在主机上的后台服务,它用于提供管理构建,运行和分配Docker容器. Docker client - Docker 客户端,这是一个命令行工具，允许用户和Docker守护进程进行交互. Docker Store - Docker 商店,一个Docker镜像的登记处,在这个平台上你可以查询找到可信以及可供企业使用的容器,插件以及 其它Docker的特别版本.在这个教程中你将在之后使用到它. 参考链接","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://www.zhz.gift/tags/docker/"}]},{"title":"HikariCP 配置说明","slug":"HikariCP 配置说明","date":"2018-01-29T16:07:42.000Z","updated":"2018-01-30T14:37:52.602Z","comments":true,"path":"2018/01/30/HikariCP 配置说明/","link":"","permalink":"http://www.zhz.gift/2018/01/30/HikariCP 配置说明/","excerpt":"Fast, simple, reliable. HikariCP is a “zero-overhead” production ready JDBC connection pool. At roughly 130Kb, the library is very light.","text":"Fast, simple, reliable. HikariCP is a “zero-overhead” production ready JDBC connection pool. At roughly 130Kb, the library is very light. 官网连接 必要配置 dataSourceClassName 数据源驱动名 jdbcUrl jdbc数据库连接 username 用户名 password 密码 其中dataSourceClassName和jdbcUrl二选一，当使用比较老版本的驱动时，需要同时设置jdbcUrl和driverClassName，dataSourceClassName则不用进行设置 可选配置 常用属性 connectionTimeout 连接超时时间,最小时间为250 ms，默认为30000ms(30秒) idleTimeout 空闲超时时间，这个属性用来控制空闲连接允许保留在连接池中的最大时间，这个属性只有在minimumIdle（最小空闲连接数）小于maximumPoolSize(最大连接数)时才会生效,空闲连接断开会有15s-30s的延迟变动时间.在这个超时时间之前空闲连接永远不会断开,当连接池达到minimumIdle,连接将永远不会断开，即使处于闲置状态.值为0表示空闲连接将永远不会从连接池中移除，最小值为10000ms （10s),默认值为600000(10min) maxLifetime 最大生命周期.这个属性用来控制连接池中连接的最大生命周期,一个使用中的连接永远不会被断开,只有当它处于关闭状态然后才会被移除.推荐设置比任何数据库或基础设施规定的连接时间限制少至少30秒。 值为0表示没有最大寿命（无限寿命）， 默认：1800000（30分钟）,由于HikariCP的housekeeper默认每30s运行一次,以维护minimumIdle最小空闲连接数，它可能添加新连接或者断开空闲连接，所以你必须设置maxLifetime属性比（mysql)wait_timeout时间少一些来避免 broken connection / exceptions.意思就是说比如mysql wait_timeout为10min,此时有一个连接由于达到超时时间，mysql主动断开了连接，而HakariCP仍然持有此连接，如果再使用此连接去请求数据库则会发生异常,设置maxLifetime最大生命周期比wait_timeout少30s后,就能确保再housekeeper运行期间提前断开此连接，避免发生异常. connectionTestQuery 连接测试查询,如果你的驱动支持jdbc4，则不需要设置此属性，这个属性是为那些不支持Connection.isValid() API的古董级驱动准备的，这是一个查询，用来确保所有请求得到的连接都是alive有效的，尝试不设置这个属性运行连接池，如果你的驱动不支持jdbc4，HikariCP会有错误日志提示.Default:None minimumIdle 最小空闲连接，当空闲连接小于这个值并且总连接数小于maximumPoolSize（最大连接数)HikariCP会尽可能快速有效率地创建额外的连接，然而为了最大限度地提高性能和响应能力，不建议设置这个值，而是用固定大小的连接池取代.Default:与maximumPoolSize相同 maximumPoolSize 最大连接池数量，包括使用中和空闲的连接，当达到最大连接池数量时，再尝试获取连接，只能得到connectionTimeout 超时信息.Default:10. metricRegistry 度量注册, Default: none 参考链接 healthCheckRegistry 健康检查注册 Default: none poolName 连接池名字,一般用于日志输出 Default: auto-generated 不常使用 initializationFailTimeout 初始化失败超时时间 Default: 1 isolateInternalQueries 是否隔离默认查询 Default: 1 allowPoolSuspension 是否允许连接池暂停 Default: false readOnly 连接是否只读 Default: false registerMbeans 是否注册JMX Management Beans Default: false catalog 目录服务 connectionInitSql 连接初始化sql Default: none driverClassName 驱动名称 Default: none transactionIsolation 事务隔离 Default: driver default validationTimeout 验证超时时间 Default: 5000 leakDetectionThreshold 最低发现阈值 Default: 0 dataSource 数据源 Default: none schema 架构 Default: driver default threadFactory 线程工厂 Default: none scheduledExecutor 计划执行器 Default: none Statement CacheMany connection pools, including Apache DBCP, Vibur, c3p0 and others offer PreparedStatement caching. HikariCP does not. Why?许多连接池，包括Aache DBCP,Vibur,c3p0 等都是提供PreparedStatement caching.HikariCP并不这样做，为什么？ At the connection pool layer PreparedStatements can only be cached per connection. If your application has 250 commonly executed queries and a pool of 20 connections you are asking your database to hold on to 5000 query execution plans – and similarly the pool must cache this many PreparedStatements and their related graph of objects. 在连接池中每个连接只能缓存各自的PreparedStatements对象.如果你的应用有250个要执行的普通查询和一个20个连接的连接池，然后你需要不间断地请求你的数据库去完成一个5000查询的执行计划，显然你的连接池必须缓存这所有的PreparedStatements对象和它们相关联的表对象. Most major database JDBC drivers already have a Statement cache that can be configured, including PostgreSQL, Oracle, Derby, MySQL, DB2, and many others. JDBC drivers are in a unique position to exploit database specific features, and nearly all of the caching implementations are capable of sharing execution plans across connections. This means that instead of 5000 statements in memory and associated execution plans, your 250 commonly executed queries result in exactly 250 execution plans in the database. Clever implementations do not even retain PreparedStatement objects in memory at the driver-level but instead merely attach new instances to existing plan IDs. 许多主流的数据库，它们的jdbc驱动已经有了一个可配置的Statement缓存，包括PostgreSQL, Oracle, Derby, MySQL, DB2等等.JDBC驱动是唯一能利用数据库特定属性的方式，并且近乎所有的缓存实现都可以通过连接共享执行计划.这意味着你的250个普通查询结果在数据库中就是250个执行计划，而不是存储在内存中的5000个statements及其相关联的执行计划.聪明的缓存实现在驱动这一级别并不保持PreparedStatement对象在内存当中，而是为已存在的计划创建新的PreparedStatement实例. Using a statement cache at the pooling layer is an anti-pattern, and will negatively impact your application performance compared to driver-provided caches. 在连接池层使用statement缓存是一个反面教材,并且相较驱动提供的缓存会对你的应用性能造成更大的消极影响. Log Statement Text / Slow Query LoggingLike Statement caching, most major database vendors support statement logging through properties of their own driver. This includes Oracle, MySQL, Derby, MSSQL, and others. Some even support slow query logging. For those few databases that do not support it, several options are available. We have received a report that p6spy works well, and also note the availability of log4jdbc and jdbcdslog-exp. 就像Statement缓存，许多主流数据库供应商支持通过它们驱动的属性配置来添加statement logging的日志功能.这些数据库包括racle, MySQL, Derby, MSSQL等等.一些甚至支持慢查询日志记录功能.对于那些少数不支持的数据库,还有许多可用的其它方式.比如,p6spy,log4jdbc以及jdbcdslog-exp等等. mysql推荐配置Statement和PreparedStatement对象的区别","categories":[],"tags":[{"name":"pool","slug":"pool","permalink":"http://www.zhz.gift/tags/pool/"}]},{"title":"git 换行符LF与CRLF转换问题","slug":"git 换行符LF与CRLF转换问题","date":"2018-01-28T16:07:42.000Z","updated":"2018-01-29T14:04:28.319Z","comments":true,"path":"2018/01/29/git 换行符LF与CRLF转换问题/","link":"","permalink":"http://www.zhz.gift/2018/01/29/git 换行符LF与CRLF转换问题/","excerpt":"一、背景在各操作系统下，文本文件所使用的换行符是不一样的。UNIX/Linux 使用的是 0x0A（LF），早期的 Mac OS 使用的是0x0D（CR），后来的 OS X 在更换内核后与 UNIX 保持一致了。但 DOS/Windows 一直使用 0x0D0A（CRLF）作为换行符。Git提供了一个“换行符自动转换”功能。这个功能默认处于“自动模式”，当你在签出文件时，它试图将 UNIX 换行符（LF）替换为 Windows 的换行符（CRLF）；当你在提交文件时，它又试图将 CRLF 替换为 LF。Git 的“换行符自动转换”功能听起来似乎很智能、很贴心，因为它试图一方面保持仓库内文件的一致性（UNIX 风格），一方面又保证本地文件的兼容性（Windows 风格）。但遗憾的是，这个功能是有 bug 的，而且在短期内都不太可能会修正。","text":"一、背景在各操作系统下，文本文件所使用的换行符是不一样的。UNIX/Linux 使用的是 0x0A（LF），早期的 Mac OS 使用的是0x0D（CR），后来的 OS X 在更换内核后与 UNIX 保持一致了。但 DOS/Windows 一直使用 0x0D0A（CRLF）作为换行符。Git提供了一个“换行符自动转换”功能。这个功能默认处于“自动模式”，当你在签出文件时，它试图将 UNIX 换行符（LF）替换为 Windows 的换行符（CRLF）；当你在提交文件时，它又试图将 CRLF 替换为 LF。Git 的“换行符自动转换”功能听起来似乎很智能、很贴心，因为它试图一方面保持仓库内文件的一致性（UNIX 风格），一方面又保证本地文件的兼容性（Windows 风格）。但遗憾的是，这个功能是有 bug 的，而且在短期内都不太可能会修正。 二、解决方案1.Git设置 git config –global core.autocrlf falsegit config –global core.safecrlf true含义：AutoCRLF提交时转换为LF，检出时转换为CRLFgit config –global core.autocrlf true 提交时转换为LF，检出时不转换git config –global core.autocrlf input 提交检出均不转换git config –global core.autocrlf falseSafeCRLF拒绝提交包含混合换行符的文件git config –global core.safecrlf true 允许提交包含混合换行符的文件git config –global core.safecrlf false 提交包含混合换行符的文件时给出警告git config –global core.safecrlf warn 一般在开发中为了保持项目换行符转换不出错，将autocrlf设置为false,然后重新clone项目。 也可以直接修改git全局配置文件，windows配置路径:C:\\Users\\Administrator.gitconfig [filter &quot;lfs&quot;] required = true clean = git-lfs clean %f smudge = git-lfs smudge %f [user] name = zhonghanzhong [user] email = yyesnnovv@aliyun.com [credential] helper = manager [http] sslVerify = false [core] autocrlf = false","categories":[],"tags":[{"name":"DevelopNote","slug":"DevelopNote","permalink":"http://www.zhz.gift/tags/DevelopNote/"},{"name":"git","slug":"git","permalink":"http://www.zhz.gift/tags/git/"}]},{"title":"jooq介绍","slug":"jooq介绍","date":"2018-01-14T16:07:42.000Z","updated":"2018-01-15T14:05:22.807Z","comments":true,"path":"2018/01/15/jooq介绍/","link":"","permalink":"http://www.zhz.gift/2018/01/15/jooq介绍/","excerpt":"jooq是什么jOOQ（Java Object Oriented Querying，即面向Java对象查询）是基于Java访问关系型数据库的工具包，轻量，简单，并且足够灵活，可以轻松的使用Java面向对象语法来实现各种复杂的sql;是一个高效地合并了复杂SQL、类型安全、源码生成、ActiveRecord、存储过程以及高级数据类型的Java API的类库.","text":"jooq是什么jOOQ（Java Object Oriented Querying，即面向Java对象查询）是基于Java访问关系型数据库的工具包，轻量，简单，并且足够灵活，可以轻松的使用Java面向对象语法来实现各种复杂的sql;是一个高效地合并了复杂SQL、类型安全、源码生成、ActiveRecord、存储过程以及高级数据类型的Java API的类库. jooq的特点 类型安全(TypeSafe SQL)jooq使用内部的DSL(domain specific language领域专用语言)对sql进行模块化，并且使用java编译器去编译你的sql语法，元数据以及数据类型. 映射代码生成jooq可以从你的数据库元数据生成对应的java映射类，生成的实体类按照数据库字段以驼峰命名法重新命名，同时用户可以通过继承实体类的方式来添加自定义属性及方法. ActiveRecords我们jooq通过代码生成器生成的ActiveReocrds可以直接对POJO(Plain Old Java Object)映射对象进行CRUD(Create Retrieve Update Delete)操作 多架构(多模式Schema)jooq允许你在运行时环境动态配置数据库模式和表并且支持行级别的安全性,即通过不同的jooq Configuration配置得到对应的DSLContext上下文再对数据库进行CRUD操作. 标准化jooq可以通过配置数据库方言来支持不同的数据库:mysql,oracle等等,比如通过spring配置spring.jooq.sql-dialect = mysql 来支持mysql数据库 查询生命周期jooq通过一些接口开放SQL生成的生命周期，包括日志，事务处理，id生成，sql转换等等。 存储过程jooq允许你在模块化sql语句中嵌入存储过程调用. 强大的Fluent API和完善文档,使用方便流畅 参考链接https://www.jianshu.com/p/46164f9ba53chttps://www.jooq.org/","categories":[],"tags":[{"name":"jooq","slug":"jooq","permalink":"http://www.zhz.gift/tags/jooq/"}]},{"title":"Pom.xml详解","slug":"Pom.xml详解","date":"2018-01-10T16:07:42.000Z","updated":"2018-01-11T15:29:33.547Z","comments":true,"path":"2018/01/11/Pom.xml详解/","link":"","permalink":"http://www.zhz.gift/2018/01/11/Pom.xml详解/","excerpt":"Maven pom.xml详细配置说明","text":"Maven pom.xml详细配置说明 1.概述pom中节点如下分布 &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;!-- 基本配置 --&gt; &lt;groupId&gt;...&lt;/groupId&gt; &lt;artifactId&gt;...&lt;/artifactId&gt; &lt;version&gt;...&lt;/version&gt; &lt;packaging&gt;...&lt;/packaging&gt; &lt;!-- 依赖配置 --&gt; &lt;dependencies&gt;...&lt;/dependencies&gt; &lt;parent&gt;...&lt;/parent&gt; &lt;dependencyManagement&gt;...&lt;/dependencyManagement&gt; &lt;modules&gt;...&lt;/modules&gt; &lt;properties&gt;...&lt;/properties&gt; &lt;!-- 构建配置 --&gt; &lt;build&gt;...&lt;/build&gt; &lt;reporting&gt;...&lt;/reporting&gt; &lt;!-- 项目信息 --&gt; &lt;name&gt;...&lt;/name&gt; &lt;description&gt;...&lt;/description&gt; &lt;url&gt;...&lt;/url&gt; &lt;inceptionYear&gt;...&lt;/inceptionYear&gt; &lt;licenses&gt;...&lt;/licenses&gt; &lt;organization&gt;...&lt;/organization&gt; &lt;developers&gt;...&lt;/developers&gt; &lt;contributors&gt;...&lt;/contributors&gt; &lt;!-- 环境设置 --&gt; &lt;issueManagement&gt;...&lt;/issueManagement&gt; &lt;ciManagement&gt;...&lt;/ciManagement&gt; &lt;mailingLists&gt;...&lt;/mailingLists&gt; &lt;scm&gt;...&lt;/scm&gt; &lt;prerequisites&gt;...&lt;/prerequisites&gt; &lt;repositories&gt;...&lt;/repositories&gt; &lt;pluginRepositories&gt;...&lt;/pluginRepositories&gt; &lt;distributionManagement&gt;...&lt;/distributionManagement&gt; &lt;profiles&gt;...&lt;/profiles&gt; &lt;/project&gt; 2.基本配置 modelVersion：pom模型版本，maven2和3只能为4.0.0 groupId：组ID，maven用于定位 artifactId：在组中的唯一ID用于定位 version：项目版本 packaging：项目打包方式，有以下值：pom, jar, maven-plugin, ejb, war, ear, rar, par 3.依赖配置parent 用于确定父项目的坐标。 &lt;parent&gt; &lt;groupId&gt;com.learnPro&lt;/groupId&gt; &lt;artifactId&gt;SIP-parent&lt;/artifactId&gt; &lt;relativePath&gt;&lt;/relativePath&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; groupId：父项目的构件标识符 artifactId：父项目的唯一标识符 relativePath：Maven首先在当前项目的找父项目的pom，然后在文件系统的这个位置（relativePath），然后在本地仓库，再在远程仓库找。 version：父项目的版本 modules 有些maven项目会做成多模块的，这个标签用于指定当前项目所包含的所有模块。之后对这个项目进行的maven操作，会让所有子模块也进行相同操作。 &lt;modules&gt; &lt;module&gt;com-a&lt;/module&gt; &lt;module&gt;com-b&lt;/module&gt; &lt;module&gt;com-c&lt;/module&gt; &lt;/modules&gt; properties 用于定义pom常量 &lt;properties&gt; &lt;java.version&gt;1.7&lt;/java.version&gt; &lt;/properties&gt; 上面这个常量可以在pom文件的任意地方通过${java.version}来引用 dependencies 项目相关依赖配置，如果在父项目写的依赖，会被子项目引用，一般父项目会将子项目公用的依赖引入（将在之后详细讲解） &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; 这边依赖和中央仓库中的一致，就可以引入对应的jar dependencyManagement 配置写法同dependencies &lt;dependencyManagement&gt; &lt;dependencies&gt; ..... &lt;/dependencies&gt; &lt;/dependencyManagement&gt; 在父模块中定义后，子模块不会直接使用对应依赖，但是在使用相同依赖的时候可以不加版本号： 父项目： &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; 子项目： &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;/dependency&gt; 这样的好处是，父项目统一了版本，而且子项目可以在需要的时候才引用对应的依赖 4.构建配置build 用于配置项目构建相关信息 &lt;build&gt; &lt;!--该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。--&gt; &lt;sourceDirectory/&gt; &lt;!--该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。--&gt; &lt;scriptSourceDirectory/&gt; &lt;!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。--&gt; &lt;testSourceDirectory/&gt; &lt;!--被编译过的应用程序class文件存放的目录。--&gt; &lt;outputDirectory/&gt; &lt;!--被编译过的测试class文件存放的目录。--&gt; &lt;testOutputDirectory/&gt; &lt;!--使用来自该项目的一系列构建扩展--&gt; &lt;extensions&gt; &lt;!--描述使用到的构建扩展。--&gt; &lt;extension&gt; &lt;!--构建扩展的groupId--&gt; &lt;groupId/&gt; &lt;!--构建扩展的artifactId--&gt; &lt;artifactId/&gt; &lt;!--构建扩展的版本--&gt; &lt;version/&gt; &lt;/extension&gt; &lt;/extensions&gt; &lt;!--当项目没有规定目标（Maven2 叫做阶段）时的默认值--&gt; &lt;defaultGoal/&gt; &lt;!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。--&gt; &lt;resources&gt; &lt;!--这个元素描述了项目相关或测试相关的所有资源路径--&gt; &lt;resource&gt; &lt;!-- 描述了资源的目标路径。该路径相对target/classes目录（例如${project.build.outputDirectory}）。举个例 子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven /messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。--&gt; &lt;targetPath/&gt; &lt;!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。--&gt; &lt;filtering/&gt; &lt;!--描述存放资源的目录，该路径相对POM路径--&gt; &lt;directory/&gt; &lt;!--包含的模式列表，例如**/*.xml.--&gt; &lt;includes/&gt; &lt;!--排除的模式列表，例如**/*.xml--&gt; &lt;excludes/&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。--&gt; &lt;testResources&gt; &lt;!--这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明--&gt; &lt;testResource&gt; &lt;targetPath/&gt;&lt;filtering/&gt;&lt;directory/&gt;&lt;includes/&gt;&lt;excludes/&gt; &lt;/testResource&gt; &lt;/testResources&gt; &lt;!--构建产生的所有文件存放的目录--&gt; &lt;directory/&gt; &lt;!--产生的构件的文件名，默认值是${artifactId}-${version}。--&gt; &lt;finalName/&gt; &lt;!--当filtering开关打开时，使用到的过滤器属性文件列表--&gt; &lt;filters/&gt; &lt;!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置--&gt; &lt;pluginManagement&gt; &lt;!--使用的插件列表 。--&gt; &lt;plugins&gt; &lt;!--plugin元素包含描述插件所需要的信息。--&gt; &lt;plugin&gt; &lt;!--插件在仓库里的group ID--&gt; &lt;groupId/&gt; &lt;!--插件在仓库里的artifact ID--&gt; &lt;artifactId/&gt; &lt;!--被使用的插件的版本（或版本范围）--&gt; &lt;version/&gt; &lt;!--是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。--&gt; &lt;extensions/&gt; &lt;!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。--&gt; &lt;executions&gt; &lt;!--execution元素包含了插件执行需要的信息--&gt; &lt;execution&gt; &lt;!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标--&gt; &lt;id/&gt; &lt;!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段--&gt; &lt;phase/&gt; &lt;!--配置的执行目标--&gt; &lt;goals/&gt; &lt;!--配置是否被传播到子POM--&gt; &lt;inherited/&gt; &lt;!--作为DOM对象的配置--&gt; &lt;configuration/&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;!--项目引入插件所需要的额外依赖--&gt; &lt;dependencies&gt; &lt;!--参见dependencies/dependency元素--&gt; &lt;dependency&gt; ...... &lt;/dependency&gt; &lt;/dependencies&gt; &lt;!--任何配置是否被传播到子项目--&gt; &lt;inherited/&gt; &lt;!--作为DOM对象的配置--&gt; &lt;configuration/&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/pluginManagement&gt; &lt;!--使用的插件列表--&gt; &lt;plugins&gt; &lt;!--参见build/pluginManagement/plugins/plugin元素--&gt; &lt;plugin&gt; &lt;groupId/&gt;&lt;artifactId/&gt;&lt;version/&gt;&lt;extensions/&gt; &lt;executions&gt; &lt;execution&gt; &lt;id/&gt;&lt;phase/&gt;&lt;goals/&gt;&lt;inherited/&gt;&lt;configuration/&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;dependencies&gt; &lt;!--参见dependencies/dependency元素--&gt; &lt;dependency&gt; ...... &lt;/dependency&gt; &lt;/dependencies&gt; &lt;goals/&gt;&lt;inherited/&gt;&lt;configuration/&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; reporting 该元素描述使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看到所有报表的链接。 &lt;reporting&gt; &lt;!--true，则，网站不包括默认的报表。这包括“项目信息”菜单中的报表。--&gt; &lt;excludeDefaults/&gt; &lt;!--所有产生的报表存放到哪里。默认值是${project.build.directory}/site。--&gt; &lt;outputDirectory/&gt; &lt;!--使用的报表插件和他们的配置。--&gt; &lt;plugins&gt; &lt;!--plugin元素包含描述报表插件需要的信息--&gt; &lt;plugin&gt; &lt;!--报表插件在仓库里的group ID--&gt; &lt;groupId/&gt; &lt;!--报表插件在仓库里的artifact ID--&gt; &lt;artifactId/&gt; &lt;!--被使用的报表插件的版本（或版本范围）--&gt; &lt;version/&gt; &lt;!--任何配置是否被传播到子项目--&gt; &lt;inherited/&gt; &lt;!--报表插件的配置--&gt; &lt;configuration/&gt; &lt;!--一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。例如，有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报表集，对应另一个执行目标--&gt; &lt;reportSets&gt; &lt;!--表示报表的一个集合，以及产生该集合的配置--&gt; &lt;reportSet&gt; &lt;!--报表集合的唯一标识符，POM继承时用到--&gt; &lt;id/&gt; &lt;!--产生报表集合时，被使用的报表的配置--&gt; &lt;configuration/&gt; &lt;!--配置是否被继承到子POMs--&gt; &lt;inherited/&gt; &lt;!--这个集合里使用到哪些报表--&gt; &lt;reports/&gt; &lt;/reportSet&gt; &lt;/reportSets&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/reporting&gt; 5.项目信息 name：给用户提供更为友好的项目名 description：项目描述，maven文档中保存 url：主页的URL，maven文档中保存 inceptionYear：项目创建年份，4位数字。当产生版权信息时需要使用这个值 licenses：该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。如果列出多个license，用户可以选择它们中的一个而不是接受所有license。（如下） &lt;license&gt; &lt;!--license用于法律上的名称--&gt; &lt;name&gt;...&lt;/name&gt; &lt;!--官方的license正文页面的URL--&gt; &lt;url&gt;....&lt;/url&gt; &lt;!--项目分发的主要方式：repo，可以从Maven库下载 manual， 用户必须手动下载和安装依赖--&gt; &lt;distribution&gt;repo&lt;/distribution&gt; &lt;!--关于license的补充信息--&gt; &lt;comments&gt;....&lt;/comments&gt; &lt;/license&gt; organization：1.name 组织名 2.url 组织主页url developers：项目开发人员列表（如下） contributors：项目其他贡献者列表，同developers &lt;developers&gt; &lt;!--某个开发者信息--&gt; &lt;developer&gt; &lt;!--开发者的唯一标识符--&gt; &lt;id&gt;....&lt;/id&gt; &lt;!--开发者的全名--&gt; &lt;name&gt;...&lt;/name&gt; &lt;!--开发者的email--&gt; &lt;email&gt;...&lt;/email&gt; &lt;!--开发者的主页--&gt; &lt;url&gt;...&lt;url/&gt; &lt;!--开发者在项目中的角色--&gt; &lt;roles&gt; &lt;role&gt;Java Dev&lt;/role&gt; &lt;role&gt;Web UI&lt;/role&gt; &lt;/roles&gt; &lt;!--开发者所属组织--&gt; &lt;organization&gt;sun&lt;/organization&gt; &lt;!--开发者所属组织的URL--&gt; &lt;organizationUrl&gt;...&lt;/organizationUrl&gt; &lt;!--开发者属性，如即时消息如何处理等--&gt; &lt;properties&gt; &lt;!-- 和主标签中的properties一样，可以随意定义子标签 --&gt; &lt;/properties&gt; &lt;!--开发者所在时区， -11到12范围内的整数。--&gt; &lt;timezone&gt;-5&lt;/timezone&gt; &lt;/developer&gt; &lt;/developers&gt; 6.环境设置issueManagement 目的问题管理系统(Bugzilla, Jira, Scarab)的名称和URL &lt;issueManagement&gt; &lt;system&gt;Bugzilla&lt;/system&gt; &lt;url&gt;http://127.0.0.1/bugzilla/&lt;/url&gt; &lt;/issueManagement&gt; system：系统类型 url：路径 ciManagement 项目的持续集成信息 &lt;ciManagement&gt; &lt;system&gt;continuum&lt;/system&gt; &lt;url&gt;http://127.0.0.1:8080/continuum&lt;/url&gt; &lt;notifiers&gt; &lt;notifier&gt; &lt;type&gt;mail&lt;/type&gt; &lt;sendOnError&gt;true&lt;/sendOnError&gt; &lt;sendOnFailure&gt;true&lt;/sendOnFailure&gt; &lt;sendOnSuccess&gt;false&lt;/sendOnSuccess&gt; &lt;sendOnWarning&gt;false&lt;/sendOnWarning&gt; &lt;address&gt;continuum@127.0.0.1&lt;/address&gt; &lt;configuration&gt;&lt;/configuration&gt; &lt;/notifier&gt; &lt;/notifiers&gt; &lt;/ciManagement&gt; system：持续集成系统的名字 url：持续集成系统的URL notifiers：构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告） type：通知方式 sendOnError：错误时是否通知 sendOnFailure：失败时是否通知 sendOnSuccess：成功时是否通知 sendOnWarning：警告时是否通知 address：通知发送到的地址 configuration：扩展项 mailingLists 项目相关邮件列表信息 &lt;mailingLists&gt; &lt;mailingList&gt; &lt;name&gt;User List&lt;/name&gt; &lt;subscribe&gt;user-subscribe@127.0.0.1&lt;/subscribe&gt; &lt;unsubscribe&gt;user-unsubscribe@127.0.0.1&lt;/unsubscribe&gt; &lt;post&gt;user@127.0.0.1&lt;/post&gt; &lt;archive&gt;http://127.0.0.1/user/&lt;/archive&gt; &lt;otherArchives&gt; &lt;otherArchive&gt;http://base.google.com/base/1/127.0.0.1&lt;/otherArchive&gt; &lt;/otherArchives&gt; &lt;/mailingList&gt; ..... &lt;/mailingLists&gt; subscribe, unsubscribe: 订阅邮件（取消订阅）的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 archive：浏览邮件信息的URL post：接收邮件的地址 scm 允许你配置你的代码库，供Maven web站点和其它插件使用 &lt;scm&gt; &lt;connection&gt;scm:svn:http://127.0.0.1/svn/my-project&lt;/connection&gt; &lt;developerConnection&gt;scm:svn:https://127.0.0.1/svn/my-project&lt;/developerConnection&gt; &lt;tag&gt;HEAD&lt;/tag&gt; &lt;url&gt;http://127.0.0.1/websvn/my-project&lt;/url&gt; &lt;/scm&gt; connection, developerConnection：这两个表示我们如何连接到maven的版本库。connection只提供读，developerConnection将提供写的请求 写法如：scm:[provider]:[provider_specific] 如果连接到CVS仓库，可以配置如下：scm:cvs:pserver:127.0.0.1:/cvs/root:my-project tag：项目标签，默认HEAD url：共有仓库路径 prerequisites 项目构建的前提 &lt;prerequisites&gt; &lt;maven&gt;2.0.6&lt;/maven&gt; &lt;/prerequisites&gt; repositories,pluginRepositories 依赖和扩展的远程仓库列表，同上篇文章，setting.xml配置中介绍的。 &lt;repositories&gt; &lt;repository&gt; &lt;releases&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;updatePolicy&gt;always&lt;/updatePolicy&gt; &lt;checksumPolicy&gt;warn&lt;/checksumPolicy&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;updatePolicy&gt;never&lt;/updatePolicy&gt; &lt;checksumPolicy&gt;fail&lt;/checksumPolicy&gt; &lt;/snapshots&gt; &lt;id&gt;codehausSnapshots&lt;/id&gt; &lt;name&gt;Codehaus Snapshots&lt;/name&gt; &lt;url&gt;http://snapshots.maven.codehaus.org/maven2&lt;/url&gt; &lt;layout&gt;default&lt;/layout&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;pluginRepositories&gt; ... &lt;/pluginRepositories&gt; releases, snapshots:这是各种构件的策略，release或者snapshot。这两个集合，POM就可以根据独立仓库任意类型的依赖改变策略。如：一个人可能只激活下载snapshot用来开发。 enable：true或者false，决定仓库是否对于各自的类型激活(release 或者 snapshot)。 updatePolicy: 这个元素决定更新频率。maven将比较本地pom的时间戳（存储在仓库的maven数据文件中）和远程的. 有以下选择: always, daily (默认), interval:X (x是代表分钟的整型) ， never. checksumPolicy：当Maven向仓库部署文件的时候，它也部署了相应的校验和文件。可选的为：ignore，fail，warn，或者不正确的校验和。 layout：在上面描述仓库的时候，提到他们有统一的布局。Maven 2有它仓库默认布局。然而，Maven 1.x有不同布局。使用这个元素来表明它是default还是legacy。 distributionManagement 它管理的分布在整个构建过程生成的工件和支持文件 &lt;distributionManagement&gt; ... &lt;downloadUrl&gt;http://mojo.codehaus.org/my-project&lt;/downloadUrl&gt; &lt;status&gt;deployed&lt;/status&gt; &lt;/distributionManagement&gt; downloadUrl: 其他pom可以通过此url的仓库抓取组件 status：给出该构件在远程仓库的状态 none: 默认 converted: 将被早期Maven 2 POM转换过来 partner: 这个项目会从合作者仓库同步过来 deployed: 从Maven 2或3实例部署 verified: 被核实时正确的和最终的 Repository 指定Maven pom从远程下载控件到当前项目的位置和方式，如果snapshotRepository没有被定义则使用repository相关的配置 &lt;distributionManagement&gt; &lt;repository&gt; &lt;uniqueVersion&gt;false&lt;/uniqueVersion&gt; &lt;id&gt;corp1&lt;/id&gt; &lt;name&gt;Corporate Repository&lt;/name&gt; &lt;url&gt;scp://repo/maven2&lt;/url&gt; &lt;layout&gt;default&lt;/layout&gt; &lt;/repository&gt; &lt;snapshotRepository&gt; &lt;uniqueVersion&gt;true&lt;/uniqueVersion&gt; &lt;id&gt;propSnap&lt;/id&gt; &lt;name&gt;Propellors Snapshots&lt;/name&gt; &lt;url&gt;sftp://propellers.net/maven&lt;/url&gt; &lt;layout&gt;legacy&lt;/layout&gt; &lt;/snapshotRepository&gt; ... &lt;/distributionManagement&gt; id, name：仓库的唯一标识 uniqueVersion：true或false，指明控件部署的时候是否获取独立的版本号。 url：repository元素的核心。指定位置和部署协议发布控件到仓库。 layout：布局，default或legacy Site Distribution 多分布存储库,distributionManagement负责定义如何部署项目的网站和文档。 &lt;distributionManagement&gt; ... &lt;site&gt; &lt;id&gt;mojo.website&lt;/id&gt; &lt;name&gt;Mojo Website&lt;/name&gt; &lt;url&gt;scp://beaver.codehaus.org/home/projects/mojo/public_html/&lt;/url&gt; &lt;/site&gt; ... &lt;/distributionManagement&gt; id, name, url: 这些元素与distributionManagement repository中的相同 Relocation 重新部署-项目不是静态的，是活的。他们需要被搬到更合适的地方。如：当你的下个成功的开源项目移到Apache下，重命名为org.apache:my-project:1.0 对你项目更有好处。 &lt;distributionManagement&gt; ... &lt;relocation&gt; &lt;groupId&gt;org.apache&lt;/groupId&gt; &lt;artifactId&gt;my-project&lt;/artifactId&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;message&gt;We have moved the Project under Apache&lt;/message&gt; &lt;/relocation&gt; ... &lt;/distributionManagement&gt; 原文链接: http://blog.csdn.net/oDeviloo/article/details/52050277参考官方文档： http://maven.apache.org/pom.html","categories":[],"tags":[{"name":"Maven","slug":"Maven","permalink":"http://www.zhz.gift/tags/Maven/"}]},{"title":"setting.xml详解","slug":"setting.xml详解","date":"2018-01-10T16:07:42.000Z","updated":"2018-01-11T15:27:17.915Z","comments":true,"path":"2018/01/11/setting.xml详解/","link":"","permalink":"http://www.zhz.gift/2018/01/11/setting.xml详解/","excerpt":"Maven setting.xml详细配置说明","text":"Maven setting.xml详细配置说明 1.文件概览&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt; &lt;localRepository/&gt; &lt;interactiveMode/&gt; &lt;offline/&gt; &lt;pluginGroups/&gt; &lt;servers/&gt; &lt;mirrors/&gt; &lt;proxies/&gt; &lt;profiles/&gt; &lt;activeProfiles/&gt; &lt;/settings&gt; 通过配置文件中的注释，我们可以看到，有两种配置此文件的方法 1.用户级别 ${user.home}/.m2/settings.xml 可以通过指令 -s /path/to/user/settings.xml 2.全局级别 ${maven.home}/conf/settings.xml. 可以通过指令 -gs /path/to/global/settings.xml 2.localRepositorylocalRepository用于构建系统的本地仓库的路径。默认的值是${user.home}/.m2/repository。 Default: ${user.home}/.m2/repository &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt; 3.interactiveModeinteractiveMode 用于决定maven是否在需要输出的时候提示你，默认true。如果是false，它将使用合理的默认值，或者基于一些设置。 4.offline决定maven是否在构建的时候进行网络传输。默认false，表示联网状态，true为取消联网。在某些情况下设置为true是很有用的，比如jar无法从网上下载等 5.pluginGroupspluginGroups 插件组 &lt;pluginGroups&gt; &lt;pluginGroup&gt;org.mortbay.jetty&lt;/pluginGroup&gt; &lt;/pluginGroups&gt; 这样Maven可以使用简单的命令执行org.morbay.jetty:jetty-maven-plugin:run mvn jetty run 我们同样可以在pom文件中看到相似的配置，只是在这配置了就起到全局的作用，而不用每个项目中pom配置jetty 6.proxies此项用于设置http代理有时候由于安全问题，需要配置http代理，通过代理服务才能正常访问外部仓库下载资源可以ping repo1.maven.org来访问中央仓库telnet 218.14.227.197 3128 来查看代理地址以及端口是否畅通 &lt;proxies&gt; &lt;proxy&gt; &lt;id&gt;optional&lt;/id&gt; &lt;active&gt;true&lt;/active&gt; &lt;protocol&gt;http&lt;/protocol&gt;&lt;!--代理协议--&gt; &lt;username&gt;proxyuser&lt;/username&gt; &lt;password&gt;proxypass&lt;/password&gt; &lt;host&gt;proxy.host.net&lt;/host&gt; &lt;port&gt;80&lt;/port&gt; &lt;nonProxyHosts&gt;local.net|some.host.com&lt;/nonProxyHosts&gt; &lt;/proxy&gt; &lt;/proxies&gt; id：proxy的唯一标识，用来区别proxy元素。 active：表示是否激活代理，如果配置多个，默认是第一个生效 username，password：提供连接代理服务器时的认证。 host，port：主机地址，端口号 nonProxyHosts：用来表示哪些主机名不需要代理，可以用|来分割多个，此外也支持通配符，如：*.goole.com表示所有以goole.com结尾的都不需要通过代理 7.servers这是一个认证配置的列表,根据系统中使用的server-id控制。认证配置在maven连接到远程服务时使用。 &lt;servers&gt; &lt;!--使用登录方式--&gt; &lt;server&gt; &lt;id&gt;deploymentRepo&lt;/id&gt; &lt;username&gt;repouser&lt;/username&gt; &lt;password&gt;repopwd&lt;/password&gt; &lt;/server&gt; &lt;!-- 使用秘钥认证 --&gt; &lt;server&gt; &lt;id&gt;siteServer&lt;/id&gt; &lt;privateKey&gt;/path/to/private/key&lt;/privateKey&gt; &lt;passphrase&gt;可空&lt;/passphrase&gt; &lt;/server&gt; &lt;/servers&gt; 8.mirrors指定镜像仓库位置用于从远程仓库下载资源 &lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;mirrorId&lt;/id&gt; &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt; &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt; &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt; &lt;/mirror&gt; &lt;/mirrors&gt; id：用于继承和直接查找，唯一 mirrorOf：镜像所包含的仓库的Id name：唯一标识，用于区分镜像站 url：镜像路径 9.profiles settings.xml中时意味着该profile是全局的，所以只能配置范围宽泛一点配置信息，比如远程仓库等。而一些比较细致一点的需要定义在项目的pom.xml中。 profile可以让我们定义一系列的配置信息，然后指定其激活条件。根据每个profile对应不同的激活条件和配置信息，从而达到不同环境使用不同配置。 例子：通过profile定义jdk1.5以上使用一套配置，jdk1.5以下使用另外一套配置；或者通过操作系统来使用不同的配置信息。 settings.xml中的信息有repositories、pluginRepositories和properties。定义在properties的值可以在pom.xml中使用。 Activation &lt;profiles&gt; &lt;profile&gt; &lt;id&gt;test&lt;/id&gt; &lt;activation&gt; &lt;activeByDefault&gt;false&lt;/activeByDefault&gt; &lt;jdk&gt;1.5&lt;/jdk&gt; &lt;os&gt; &lt;name&gt;Windows XP&lt;/name&gt; &lt;family&gt;Windows&lt;/family&gt; &lt;arch&gt;x86&lt;/arch&gt; &lt;version&gt;5.1.2600&lt;/version&gt; &lt;/os&gt; &lt;property&gt; &lt;name&gt;mavenVersion&lt;/name&gt; &lt;value&gt;2.0.3&lt;/value&gt; &lt;/property&gt; &lt;file&gt; &lt;exists&gt;${basedir}/file2.properties&lt;/exists&gt; &lt;missing&gt;${basedir}/file1.properties&lt;/missing&gt; &lt;/file&gt; &lt;/activation&gt; &lt;/profile&gt; &lt;/profiles&gt; jdk：检测到对应jdk版本就激活 os：针对不同操作系统 property：当maven检测到property（pom中如${name}这样的）profile将被激活 file：如果存在文件，激活，不存在文件激活 通过以下命令查看哪些profile将生效 mvn help:active-profiles properites Maven的属性是值占位符，就像Ant中的一样。如果X是一个属性的话，在POM中可以使用${X}来进行任意地方的访问。他们来自于五种不同的风格，所有都可以从settings.xml文件中访问到。 1. env.x：“env.”前缀会返回当前的环境变量。如${env.PATH}就是使用了$path环境变量（windosws中的%PATH%）。 2. project.x：一个点“.”分割的路径，在POM中就是相关的元素的值。例如：&lt;project&gt;&lt;version&gt;1.0&lt;/version&gt;&lt;/project&gt;就可以通过${project.version}来访问。 3. settings.x：一个点“.”分割的路径，在settings.xml中就是相对应的元素的值，例如：&lt;settings&gt;&lt;offline&gt;false&lt;/offline&gt;&lt;/settings&gt;就可以通过${settings.offline}来访问。 4. Java系统属性：通过java.lang.System.getProperties()来访问的属性都可以像POM中的属性一样访问，例如：${java.home} x：被或者外部文件定义的属性，值可以这样访问${someVar} … ${user.home}/our-project … 上面这个profile如果被激活，那么在pom中${user.install}就可以被访问了。 Repositories Repositories是远程项目集合maven用来移植到本地仓库用于构建系统。如果来自本地仓库，Maven调用它的插件和依赖关系。不同的远程仓库可能包含不同的项目，当profile被激活，他们就会需找匹配的release或者snapshot构件。 &lt;profiles&gt; &lt;profile&gt; ... &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;codehausSnapshots&lt;/id&gt; &lt;name&gt;Codehaus Snapshots&lt;/name&gt; &lt;releases&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;updatePolicy&gt;always&lt;/updatePolicy&gt; &lt;checksumPolicy&gt;warn&lt;/checksumPolicy&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;updatePolicy&gt;never&lt;/updatePolicy&gt; &lt;checksumPolicy&gt;fail&lt;/checksumPolicy&gt; &lt;/snapshots&gt; &lt;url&gt;http://snapshots.maven.codehaus.org/maven2&lt;/url&gt; &lt;layout&gt;default&lt;/layout&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;pluginRepositories&gt; ... &lt;/pluginRepositories&gt; ... &lt;/profile&gt; &lt;/profiles&gt; releases，snapshots：这是各种构件的策略，release或者snapshot。这两个集合，POM就可以根据独立仓库任意类型的依赖改变策略。如：一个人可能只激活下载snapshot用来开发。 enable：true或者false，决定仓库是否对于各自的类型激活(release 或者 snapshot)。 updatePolicy: 这个元素决定更新频率。maven将比较本地pom的时间戳（存储在仓库的maven数据文件中）和远程的. 有以下选择: always, daily (默认), interval:X (x是代表分钟的整型) ， never. checksumPolicy：当Maven向仓库部署文件的时候，它也部署了相应的校验和文件。可选的为：ignore，fail，warn，或者不正确的校验和。 layout：在上面描述仓库的时候，提到他们有统一的布局。Maven 2有它仓库默认布局。然而，Maven 1.x有不同布局。使用这个元素来表明它是default还是legacy。 10.activeProfiles&lt;activeProfiles&gt; &lt;activeProfile&gt;alwaysActiveProfile&lt;/activeProfile&gt; &lt;activeProfile&gt;anotherAlwaysActiveProfile&lt;/activeProfile&gt; &lt;/activeProfiles&gt; 每个activeProfile元素对应一个profile id的值，任何profile id被定义到activeProfile的profile将被激活。 原文:http://blog.csdn.net/odeviloo/article/details/51999878 参考：http://maven.apache.org/settings.html","categories":[],"tags":[{"name":"Maven","slug":"Maven","permalink":"http://www.zhz.gift/tags/Maven/"}]},{"title":"jooq基本操作介绍","slug":"jooq基本操作介绍","date":"2018-01-08T16:07:42.000Z","updated":"2018-01-09T13:45:00.293Z","comments":true,"path":"2018/01/09/jooq基本操作介绍/","link":"","permalink":"http://www.zhz.gift/2018/01/09/jooq基本操作介绍/","excerpt":"jooq基本操作介绍","text":"jooq基本操作介绍 1.1jooq select查询select方法接受一个SelectField查询字段集合,org.jooq.Field可以通过生成的任意jooq.tables.*(eg:AudienceItem extends TableImpl)的Fields方法获取该Table的所有Field字段或者通过该Table的公共成员变量获取部分字段(eg: AUDIENCE_ITEM.ID). select方法返回一个SelectSelectStep 查询步骤对象,一般通过该对象调用from方法完成接下来的表拼接.eg:.from(AUDIENCE_OBJECT). from方法接受一个TableLike&lt;?&gt;对象，该对象可以是表也可以是视图,最后返回一个SelectJoinStep对象. SelectJoinStep对象继承自SelectWhereStep对象,通过该对象我们既可以直接后接where方法条件，也可以通过SelectJoinStep对象的join,innerjoin等方法继续关联表进行查询. SelectJoinStep对象调用join等方法后(eg:.leftJoin(AUDIENCE_ITEM))返回SelectJoinPartitionByStep对象,该对象继承自SelectOnStep对象. SelectOnStep对象的主要方法是on,通过on方法来完成join之后的条件拼装(eg:.on(AUDIENCE_OBJECT.ITEM_ID.eq(AUDIENCE_ITEM.ID)),调用完成之后返回SelectOnConditionStep对象. 通过SelectOnConditionStep对象,可以继续接join,where或者直接调用fetch方法结束sql拼接. fetch方法返回一个泛型结果集Result,一般通过该结果集的into方法直接转化得到实体列表,具体实例如下: DSLContext dsl = DSL.using(configuration); dsl.select(Fields.start().add(AUDIENCE_ITEM).end()) .from(AUDIENCE_OBJECT).leftJoin(AUDIENCE_ITEM) .on(AUDIENCE_OBJECT.ITEM_ID.eq(AUDIENCE_ITEM.ID).and(AUDIENCE_OBJECT.BUSINESS_TYPE.eq(businessType))) .where(AUDIENCE_OBJECT.BUSINESS_ID.eq(id).and(AUDIENCE_ITEM.ID.isNotNull())).fetch() .into(AudienceItem.class) 另:on方法和where方法都是接受一个Condition可变数组为入参,Condition条件对象可由TableImpl对象的TableField字段调用and,eq等条件方法得到. 1.2 使用DSLContext进行新增,修改,删除//新增 DSL.using(conf).insertInto(AUDIENCE_OBJECT,AUDIENCE_OBJECT.ID).values(&quot;1&quot;).execute(); //更新 DSL.using(conf).update(AUDIENCE_OBJECT).set(AUDIENCE_OBJECT.BUSINESS_ID, AUDIENCE_OBJECT.BUSINESS_ID.add(1)).execute(); //删除 DSL.using(conf).delete(AUDIENCE_OBJECT).where(AUDIENCE_OBJECT.BUSINESS_ID.eq(&quot;1&quot;)).execute(); 2.1 使用UpdatableRecord完成新增,修改,删除jooq的新增，修改，删除方法都可以通过UpdatableRecord对象完成,示例如下: DSLContext dsl = DSL.using(conf); UpdatableRecord r = (UpdatableRecord) dsl.newRecord(AUDIENCE_OBJECT, objects.get(0)); //只有不为空的才进行更新 int size = r.size(); for (int i = 0; i &lt; size; ++i) { if (r.getValue(i) != null || r.field(i).getDataType().nullable()) continue; r.changed(i, false);//标记该字段不更新 } r.update(); r.insert(); r.delete(); 2.2 批量方法新增,修改,删除批量方法都是接受一个UpdatableRecord对象集合来进行批量新增或批量修改. //批量添加 DSL.using(conf).batchInsert(rs).execute(); //批量修改 DSL.using(conf).batchUpdate(rs).execute(); //批量删除 DSL.using(conf).batchDelete(rs).execute();","categories":[],"tags":[{"name":"jooq","slug":"jooq","permalink":"http://www.zhz.gift/tags/jooq/"}]},{"title":"Spring WebMVC框架","slug":"Spring_Web_MVC框架","date":"2017-12-16T16:07:42.000Z","updated":"2017-12-17T12:11:43.347Z","comments":true,"path":"2017/12/17/Spring_Web_MVC框架/","link":"","permalink":"http://www.zhz.gift/2017/12/17/Spring_Web_MVC框架/","excerpt":"Spring WebMVC框架","text":"Spring WebMVC框架 Spring Web MVC框架（通常简称为”SpringMVC”）是一个富“模型，视图，控制器”web框架， 允许用户创建特定的 @Controller 或 @RestController beans来处理传入的HTTP请求，通过@RequestMapping注解可以将控制器中的方法映射到相应的HTTP请求。示例： @RestController @RequestMapping(value=&quot;/users&quot;) public class MyRestController { @RequestMapping(value=&quot;/{user}&quot;, method=RequestMethod.GET) public User getUser(@PathVariable Long user) { // ... } @RequestMapping(value=&quot;/{user}/customers&quot;, method=RequestMet hod.GET) List&lt;Customer&gt; getUserCustomers(@PathVariable Long user) { // ... } @RequestMapping(value=&quot;/{user}&quot;, method=RequestMethod.DELETE ) public User deleteUser(@PathVariable Long user) { // ... } } Spring MVC是Spring框架的核心部分，详细信息可以参考referencedocumentation，spring.io/guides也有一些可用的指导覆盖Spring MVC。 Spring MVC自动配置Spring Boot为Spring MVC提供的auto-configuration适用于大多数应用，并在Spring默认功能上添加了以下特性： 引入 ContentNegotiatingViewResolver 和 BeanNameViewResolverbeans。 对静态资源的支持，包括对WebJars的支持。 自动注册 Converter ， GenericConverter ， Formatter beans。 对 HttpMessageConverters 的支持。 自动注册 MessageCodeResolver 。 对静态 index.html 的支持。 对自定义 Favicon 的支持。 自动使用 ConfigurableWebBindingInitializer bean。 如果保留Spring Boot MVC特性，你只需添加其他的MVC配置（拦截器，格式化处理器，视图控制器等）。你可以添加自己的 WebMvcConfigurerAdapter 类型的@Configuration类，而不需要注解@EnableWebMvc。如果希望使用自定义的 RequestMappingHandlerMapping ，RequestMappingHandlerAdapter ，或 ExceptionHandlerExceptionResolver，你可以声明一个WebMvcRegistrationsAdapter 实例提供这些组件。 如果想全面控制Spring MVC，你可以添加自己的 @Configuration ，并使用 @EnableWebMvc 注解。 ##HttpMessageConverters## Spring MVC使用 HttpMessageConverter 接口转换HTTP请求和响应，合适的默认配置可以开箱即用，例如对象自动转换为JSON（使用Jackson库）或XML（如果Jackson XML扩展可用，否则使用JAXB），字符串默认使用 UTF-8 编码。可以使用Spring Boot的 HttpMessageConverters 类添加或自定义转换类： import org.springframework.boot.autoconfigure.web.HttpMessageCon verters; import org.springframework.context.annotation.*; import org.springframework.http.converter.*; @Configuration public class MyConfiguration { @Bean public HttpMessageConverters customConverters() { HttpMessageConverter&lt;?&gt; additional = ... HttpMessageConverter&lt;?&gt; another = ... return new HttpMessageConverters(additional, another); } } 上下文中出现的所有 HttpMessageConverter bean都将添加到converters列表，你可以通过这种方式覆盖默认的转换器列表（converters）。 ##自定义JSON序列化器和反序列化器## 如果使用Jackson序列化，反序列化JSON数据，你可能想编写自己的 JsonSerializer 和 JsonDeserializer 类。自定义序列化器（serializers）通常通过Module注册到Jackson，但Spring Boot提供了 @JsonComponent 注解这一替代方式，它能轻松的将序列化器注册为Spring Beans。 ##MessageCodesResolver## Spring MVC有一个实现策略，用于从绑定的errors产生用来渲染错误信息的错误码： MessageCodesResolver 。SpringBoot会自动为你创建该实现，只要设置spring.mvc.message-codes-resolver.format 属性为 PREFIX_ERROR_CODE 或 POSTFIX_ERROR_CODE （具体查看 DefaultMessageCodesResolver.Format 枚举值）。 ##静态内容## 默认情况下，Spring Boot从classpath下的 /static （ /public ， /resources 或 /META-INF/resources ）文件夹，或从ServletContext 根目录提供静态内容。 这是通过Spring MVC的 ResourceHttpRequestHandler 实现的，你可以自定义WebMvcConfigurerAdapter 并覆写addResourceHandlers 方法来改变该行为（加载静态文件）。 在单机web应用中，容器会启动默认的servlet，并用它加载 ServletContext 根目录下的内容以响应那些Spring不处理的请求。大多数情况下这都不会发生（除非你修改默认的MVC配置），因为Spring总能够通过 DispatcherServlet 处理这些请求。 你可以设置 spring.resources.staticLocations 属性自定义静态资源的位置（配置一系列目录位置代替默认的值），如果你这样做，默认的欢迎页面将从自定义位置加载，所以只要这些路径中的任何地方有一个 index.html ，它都会成为应用的主页。 此外，除了上述标准的静态资源位置，有个例外情况是Webjars内容。任何在 /webjars/** 路径下的资源都将从jar文件中提供，只要它们以Webjars的格式打包。 注 如果你的应用将被打包成jar，那就不要使用 src/main/webapp文件夹。尽管该文件夹是通常的标准格式，但它仅在打包成war的情况下起作用，在打包成jar时，多数构建工具都会默认忽略它。 Spring Boot也支持SpringMVC提供的高级资源处理特性，可用于清除缓存的静态资源或对WebJar使用版本无感知的URLs。 如果想使用针对WebJars版本无感知的URLs（version agnostic），只需要添加 webjars-locator 依赖，然后声明你的Webjar。以jQuery为例， “/webjars/jquery/dist/jquery.min.js” 实际为 “/webjars/jquery/x.y.z/dist/jquery.min.js” ， x.y.z为Webjar的版本。 注 如果使用JBoss，你需要声明 webjars-locator-jboss-vfs 依赖而不是 webjars-locator ，否则所有的Webjars将解析为 404 。 以下的配置为所有的静态资源提供一种缓存清除（cache busting）方案，实际上是将内容hash添加到URLs中，比如 ： spring.resources.chain.strategy.content.enabled=true spring.resources.chain.strategy.content.paths=/** 注 实现该功能的是 ResourceUrlEncodingFilter ，它在模板运行期会重写资源链接，Thymeleaf，Velocity和FreeMarker会自动配置该filter，JSP需要手动配置。其他模板引擎还没自动支持，不过你可以使用ResourceUrlProvider自定义模块宏或帮助类。当使用比如JavaScript模块加载器动态加载资源时，重命名文件是不行的，这也是提供其他策略并能结合使用的原因。下面是一个”fixed”策略，在URL中添加一个静态version字符串而不需要改变文件名： spring.resources.chain.strategy.content.enabled=true spring.resources.chain.strategy.content.paths=/** spring.resources.chain.strategy.fixed.enabled=true spring.resources.chain.strategy.fixed.paths=/js/lib/ spring.resources.chain.strategy.fixed.version=v12 使用以上策略，JavaScript模块加载器加载 “/js/lib/“下的文件时会使用一个固定的版本策略 “/v12/js/lib/mymodule.js” ，其他资源仍旧使用内容hash的方式 。 查看ResourceProperties获取更多支持的选项。注 该特性在一个专门的博文和Spring框架参考文档中有透彻描述。 ##ConfigurableWebBindingInitializer## Spring MVC使用 WebBindingInitializer 为每个特殊的请求初始化相应的WebDataBinder ，如果你创建自己的 ConfigurableWebBindingInitializer @Bean ，Spring Boot会自动配置Spring MVC使用它。 ##模板引擎## 正如REST web服务，你也可以使用Spring MVC提供动态HTML内容。Spring MVC支持各种各样的模板技术，包括Velocity, FreeMarker和JSPs，很多其他的模板引擎也提供它们自己的Spring MVC集成。 Spring Boot为以下的模板引擎提供自动配置支持： FreeMarker Groovy Thymeleaf Velocity（1.4已不再支持） Mustache 注：由于在内嵌servlet容器中使用JSPs存在一些已知的限制，所以建议尽量不使用它们。 使用以上引擎中的任何一种，并采用默认配置，则模块会从src/main/resources/templates 自动加载。 注：IntelliJ IDEA根据你运行应用的方式会对classpath进行不同的排序。在IDE里通过main方法运行应用，跟从Maven，或Gradle，或打包好的jar中运行相比会导致不同的顺序，这可能导致SpringBoot不能从classpath下成功地找到模板。如果遇到这个问题，你可以在IDE里重新对classpath进行排序，将模块的类和资源放到第一位。或者，你可以配置模块的前缀为 classpath*:/templates/ ，这样会查找classpath下的所有模板目录。 ##错误处理## Spring Boot默认提供一个 /error 映射用来以合适的方式处理所有的错误，并将它注册为servlet容器中全局的 错误页面。对于机器客户端（相对于浏览器而言，浏览器偏重于人的行为），它会产生一个具有详细错误，HTTP状态，异常信息的JSON响应。对于浏览器客户端，它会产生一个白色标签样式（whitelabel）的错误视图，该视图将以HTML格式显示同样的数据（可以添加一个解析为’error’的View来自定义它）。为了完全替换默认的行为，你可以实现 ErrorController ，并注册一个该类型的bean定义，或简单地添加一个 ErrorAttributes 类型的bean以使用现存的机制，只是替换显示的内容。 注 BasicErrorController 可以作为自定义 ErrorController 的基类，如果你想添加对新context type的处理（默认处理 text/html ），这会很有帮助。你只需要继承 BasicErrorController，添加一个public方法，并注解带有 produces 属性的 @RequestMapping，然后创建该新类型的bean。你也可以定义一个@ControllerAdvice去自定义某个特殊controller或exception类型的JSON文档： @ControllerAdvice(basePackageClasses = FooController.class) public class FooControllerAdvice extends ResponseEntityException Handler { @ExceptionHandler(YourException.class) @ResponseBody ResponseEntity&lt;?&gt; handleControllerException(HttpServletReque st request, Throwable ex) { HttpStatus status = getStatus(request); return new ResponseEntity&lt;&gt;(new CustomErrorType(status.v alue(), ex.getMessage()), status); } private HttpStatus getStatus(HttpServletRequest request) { Integer statusCode = (Integer) request.getAttribute(&quot;jav ax.servlet.error.status_code&quot;); if (statusCode == null) { return HttpStatus.INTERNAL_SERVER_ERROR; } return HttpStatus.valueOf(statusCode); } } 在以上示例中，如果跟 FooController相同package的某个controller抛出 YourException ，一个 CustomerErrorType 类型的POJO的json展示将代替 ErrorAttributes 展示。 自定义错误页面 如果想为某个给定的状态码展示一个自定义的HTML错误页面，你需要将文件添加到 /error 文件夹下。错误页面既可以是静态HTML（比如，任何静态资源文件夹下添加的），也可以是使用模板构建的，文件名必须是明确的状态码或一系列标签。 例如，映射 404 到一个静态HTML文件，你的目录结构可能如下： src/ +- main/ +- java/ | + &lt;source code&gt; +- resources/ +- public/ +- error/ | +- 404.html +- &lt;other public assets&gt; 使用FreeMarker模板映射所有 5xx 错误，你需要如下的目录结构： src/ +- main/ +- java/ | + &lt;source code&gt; +- resources/ +- templates/ +- error/ | +- 5xx.ftl +- &lt;other templates&gt; 对于更复杂的映射，你可以添加实现 ErrorViewResolver接口的beans： public class MyErrorViewResolver implements ErrorViewResolver { @Override public ModelAndViewresolveErrorView(HttpServletRequest requ est,HttpStatus status,Map&lt;String, Object&gt; model) { // Use the request or status to optionally return a Mode lAndView return ... } } 你也可以使用Spring MVC特性，比如@ExceptionHandler方法和@ControllerAdvice，ErrorController 将处理所有未处理的异常。 映射Spring MVC以外的错误页面 对于不使用Spring MVC的应用，你可以通过 ErrorPageRegistrar 接口直接注册 ErrorPages。该抽象直接工作于底层内嵌servlet容器，即使你没有SpringMVC的DispatcherServlet ，它们仍旧可以工作。 @Bean public ErrorPageRegistrar errorPageRegistrar(){ return new MyErrorPageRegistrar(); } // ... private static class MyErrorPageRegistrar implements ErrorPageRegistrar { @Override public void registerErrorPages(ErrorPageRegistry registry) { registry.addErrorPages(new ErrorPage(HttpStatus.BAD_REQU EST, &quot;/400&quot;)); } } 注.如果你注册一个 ErrorPage ，该页面需要被一个 Filter 处理（在一些非Spring web框架中很常见，比如Jersey，Wicket），那么该 Filter 需要明确注册为一个 ERROR 分发器（dispatcher），例如： @Bean public FilterRegistrationBean myFilter() { FilterRegistrationBean registration = new FilterRegistrationBean(); registration.setFilter(new MyFilter()); ... registration.setDispatcherTypes(EnumSet.allOf(DispatcherType .class)); return registration; } （默认的 FilterRegistrationBean 不包含 ERROR dispatcher类型）。 WebSphere应用服务器的错误处理当部署到一个servlet容器时，Spring Boot通过它的错误页面过滤器将带有错误状态的请求转发到恰当的错误页面。 request只有在response还没提交时才能转发（forwarded）到正确的错误页面，而WebSphere应用服务器8.0及后续版本默认情况会在servlet方法成功执行后提交response，你需要设置 com.ibm.ws.webcontainer.invokeFlushAfterService 属性为 false 来关闭该行为。 ##Spring HATEOAS## 如果正在开发基于超媒体的RESTful API，你可能需要Spring HATEOAS，而SpringBoot会为其提供自动配置，这在大多数应用中都运作良好。 自动配置取代了 @EnableHypermediaSupport ，只需注册一定数量的beans就能轻松构建基于超媒体的应用，这些beans包括 LinkDiscoverers （客户端支持）， ObjectMapper （用于将响应编排为想要的形式）。 ObjectMapper 可以根据 spring.jackson.* 属性或 Jackson2ObjectMapperBuilder bean进行自定义。 通过注解 @EnableHypermediaSupport ，你可以控制Spring HATEOAS的配置，但这会禁用上述 ObjectMapper 的自定义功能。 ##CORS支持## 跨域资源共享（CORS）是一个大多数浏览器都实现了的W3C标准，它允许你以灵活的方式指定跨域请求如何被授权，而不是采用那些不安全，性能低的方式，比如IFRAME或JSONP。 从4.2版本开始，Spring MVC对CORS提供开箱即用的支持。不用添加任何特殊配置，只需要在Spring Boot应用的controller方法上注解 @CrossOrigin ，并添加CORS配置。通过注册一个自定义 addCorsMappings(CorsRegistry) 方法的WebMvcConfigurer bean可以指定全局CORS配置： @Configuration public class MyConfiguration { @Bean public WebMvcConfigurer corsConfigurer() { return new WebMvcConfigurerAdapter() { @Override public void addCorsMappings(CorsRegistry registry) { registry.addMapping(&quot;/api/**&quot;); } }; } }","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://www.zhz.gift/tags/SpringBoot/"},{"name":"MVC","slug":"MVC","permalink":"http://www.zhz.gift/tags/MVC/"}]},{"title":"SpringBoot应用启动事件","slug":"SpringBoot应用启动事件","date":"2017-12-16T16:07:42.000Z","updated":"2017-12-17T12:10:53.646Z","comments":true,"path":"2017/12/17/SpringBoot应用启动事件/","link":"","permalink":"http://www.zhz.gift/2017/12/17/SpringBoot应用启动事件/","excerpt":"SpringBoot应用启动事件","text":"SpringBoot应用启动事件 监听Spring boot应用的事件只需实现ApplicationListener接口来监听对应事件. 有些事件实际上是在 ApplicationContext 创建前触发的，所以你不能在那些 事件（处理类）中通过 @Bean 注册监听器，只能通 过 SpringApplication.addListeners(…) 或 SpringApplicationBuilder.lis teners(…) 方法注册. 应用运行时，事件会以下面的次序发送： 在运行开始，但除了监听器注册和初始化以外的任何处理之前，会发送一 个 ApplicationStartedEvent 。 在Environment将被用于已知的上下文，但在上下文被创建前，会发送一 个 ApplicationEnvironmentPreparedEvent 。 在refresh开始前，但在bean定义已被加载后，会发送一 个 ApplicationPreparedEvent 。 在refresh之后，相关的回调处理完，会发送一个 ApplicationReadyEvent ， 表示应用准备好接收请求了。 启动过程中如果出现异常，会发送一个 ApplicationFailedEvent 。 注 通常不需要使用application事件，但知道它们的存在是有用的（在某些场合可能 会使用到），比如，在Spring Boot内部会使用事件处理各种任务。","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://www.zhz.gift/tags/SpringBoot/"},{"name":"event","slug":"event","permalink":"http://www.zhz.gift/tags/event/"}]},{"title":"SpringBoot日志","slug":"SpringBoot日志","date":"2017-12-16T16:07:42.000Z","updated":"2017-12-17T12:12:51.622Z","comments":true,"path":"2017/12/17/SpringBoot日志/","link":"","permalink":"http://www.zhz.gift/2017/12/17/SpringBoot日志/","excerpt":"SpringBoot日志","text":"SpringBoot日志 ##日志格式## Spring Boot默认的日志输出格式如下： 2014-03-05 10:57:51.112 INFO 45469 --- [main]org.apache.catalina.core.StandardEngine : Starting Servlet Engine: Apache Tomcat/7.0.522014-03-05 10:57:51.253 INFO 45469 --- [ost-startStop-1] o.a.c. c.C.[Tomcat].[localhost].[/] : Initializing Spring embedde d WebApplicationContext 2014-03-05 10:57:51.253 INFO 45469 --- [ost-startStop-1] o.s.we b.context.ContextLoader : Root WebApplicationContext: initialization completed in 1358 ms 2014-03-05 10:57:51.698 INFO 45469 --- [ost-startStop-1] o.s.b. c.e.ServletRegistrationBean : Mapping servlet: &apos;dispatche rServlet&apos; to [/] 2014-03-05 10:57:51.702 INFO 45469 --- [ost-startStop-1] o.s.b. c.embedded.FilterRegistrationBean : Mapping filter: &apos;hiddenHttp MethodFilter&apos; to: [/*] 输出的节点（items）如下： 日期和时间 - 精确到毫秒，且易于排序。 日志级别 - ERROR , WARN , INFO , DEBUG 或 TRACE 。 Process ID。 — 分隔符，用于区分实际日志信息开头。 线程名 - 包括在方括号中（控制台输出可能会被截断）。 日志名 - 通常是源class的类名（缩写）。 日志信息。注 Logback没有 FATAL 级别，它会映射到 ERROR 。 ##控制台输出## 默认的日志配置会在写日志消息时将它们回显到控制台，级别为 ERROR ,WARN 和 INFO 的消息会被记录。你可以在启动应用时，通过 –debug 标识开启控制台的DEBUG级别日志记录，也可以在application.properties 中指定 debug=true 。 $ java -jar myapp.jar --debug 当debug模式启用时，一系列核心loggers（内嵌容器，Hibernate，Spring Boot等）记录的日志会变多，但不会输出所有的信息。相应地，你可以在启动应用时，通过 –trace （或在 application.properties 设置 trace=true ）启用”trace”模式，该模式能够追踪核心loggers（内嵌容器，Hibernate生成的schema，Spring全部的portfolio）的所有日志信息。 ##文件输出## 默认情况下，SpringBoot只会将日志记录到控制台，而不写进日志文件，如果需要，你可以设置 logging.file 或 logging.path 属性（例如 application.properties ）。下表展示如何组合使用 logging.* ： logging.file logging.path 示例 描述 (none) (none) 只记录到控制台 Specific file (none) my.log 写到特定的日志文件，名称可以是精确的位置或相对于当前目录 (none) Specific directory /var/log 写到特定目录下的 spring.log 里，名称可以是精确的位置或相对于当前目录 日志文件每达到10M就会被分割，跟控制台一样，默认记录 ERROR ,WARN 和 INFO 级别的信息。 ##日志级别## 所有Spring Boot支持的日志系统都可以在Spring Environment 中设置级别（ application.properties 里也一样），设置格式为’logging.level.*=LEVEL’，其中 LEVEL 是 TRACE , DEBUG , INFO , WARN , ERROR , FATAL , OFF 之一：以下是 application.properties 示例： logging.level.root=WARN logging.level.org.springframework.web=DEBUG logging.level.org.hibernate=ERROR 注 默认情况，Spring Boot会重新映射Thymeleaf的 INFO 信息到 DEBUG 级别，这能减少标准日志输出的噪声。查看LevelRemappingAppender可以按自己的配置设置映射。","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://www.zhz.gift/tags/SpringBoot/"},{"name":"log","slug":"log","permalink":"http://www.zhz.gift/tags/log/"}]},{"title":"Application属性文件","slug":"Application属性文件","date":"2017-12-16T16:07:42.000Z","updated":"2017-12-17T12:10:39.804Z","comments":true,"path":"2017/12/17/Application属性文件/","link":"","permalink":"http://www.zhz.gift/2017/12/17/Application属性文件/","excerpt":"Application属性文件","text":"Application属性文件 SpringApplication 将从以下位置加载 application.properties 文件，并把它们添加到Spring Environment 中： 当前目录下的 /config 子目录。 当前目录。 classpath下的 /config 包。 classpath根路径（root）。 该列表是按优先级排序的（列表中位置高的路径下定义的属性将覆盖位置低的）。注 你可以使用YAML（’.yml’）文件替代’.properties’。 如果不喜欢将 application.properties 作为配置文件名，你可以通过指定 spring.config.name 环境属性来切换其他的名称，也可以使用 spring.config.location 环境属性引用一个明确的路径（目录位置或文件路径列表以逗号分割）。 $ java -jar myproject.jar --spring.config.name=myproject 或 $ java -jar myproject.jar --spring.config.location=classpath:/de fault.properties,classpath:/override.properties 注 在初期需要根据 spring.config.name 和 spring.config.location 决定加载哪个文件，所以它们必须定义为environment属性（通常为OS env，系统属性或命令行参数）。 如果 spring.config.location 包含目录（相对于文件），那它们应该以 / 结尾（在被加载前， spring.config.name 关联的名称将被追加到后面，包括profile-specific的文件名）。 spring.config.location 下定义的文件使用方法跟往常一样，没有profile-specific变量支持的属性，将被profile-specific的属性覆盖。 不管 spring.config.location 配置什么值，默认总会按照 classpath:,classpath:/config,file:,file:config/ 的顺序进行搜索，优先级由低到高，也就是 file:config/ 获胜。如果你指定自己的位置，它们会优先于所有的默认位置（locations），并使用相同的由低到高的优先级顺序。那样，你就可以在 application.properties 为应用设置默认值，然后在运行的时候使用不同的文件覆盖它，同时保留默认配置。 注 如果使用环境变量而不是系统属性，需要注意多数操作系统的key名称不允许以句号分割（period-separated），但你可以使用下划线（underscores）代替（比如，使用 SPRING_CONFIG_NAME 代替 spring.config.name ）。注 如果应用运行在容器中，那么JNDI属性（java:comp/env）或servlet上下文初始化参数可以用来代替环境变量或系统属性，当然也可以使用环境变量或系统属性。","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://www.zhz.gift/tags/SpringBoot/"}]},{"title":"使用CommandLineRunner或ApplicationRunner","slug":"使用CommandLineRunner或ApplicationRunner","date":"2017-12-16T16:07:42.000Z","updated":"2017-12-17T12:11:22.286Z","comments":true,"path":"2017/12/17/使用CommandLineRunner或ApplicationRunner/","link":"","permalink":"http://www.zhz.gift/2017/12/17/使用CommandLineRunner或ApplicationRunner/","excerpt":"使用CommandLineRunner或ApplicationRunner","text":"使用CommandLineRunner或ApplicationRunner 如果需要在 SpringApplication 启动后执行一些特殊的代码，你可以实现 ApplicationRunner 或 CommandLineRunner 接口，这两个接口工作方式相同，都只提供单一的 run 方法，该方法仅在 SpringApplication.run(…) 完成之前调用。 CommandLineRunner 接口能够访问string数组类型的应用参数，而 ApplicationRunner 使用的是上面描述过的 ApplicationArguments 接口： import org.springframework.boot.* import org.springframework.stereotype.* @Component public class MyBean implements CommandLineRunner { public void run(String... args) { // Do something... } } 如果某些定义的 CommandLineRunner 或 ApplicationRunner beans需要以特定的顺序调用，你可以实现 org.springframework.core.Ordered 接口或使用 org.springframework.core.annotation.Order 注解。","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://www.zhz.gift/tags/SpringBoot/"}]},{"title":"使用YAML代替Properties","slug":"使用YAML代替Properties","date":"2017-12-16T16:07:42.000Z","updated":"2017-12-17T12:12:19.322Z","comments":true,"path":"2017/12/17/使用YAML代替Properties/","link":"","permalink":"http://www.zhz.gift/2017/12/17/使用YAML代替Properties/","excerpt":"使用YAML代替Properties","text":"使用YAML代替Properties ##SpringBoot支持YAML##YAML是JSON的一个超集，也是一种方便的定义层次配置数据的格式。只要你将SnakeYAML 库放到classpath下， SpringApplication 就会自动支持YAML，以作为properties的替换。注 如果你使用’Starters’，添加 spring-boot-starter 依赖会自动加载SnakeYAML。 ##加载YAML## Spring框架提供两个便利的类用于加载YAML文档，YamlPropertiesFactoryBean 会将YAML加载为 Properties ， YamlMapFactoryBean 会将YAML加载为 Map 。例如，下面的YAML文档： environments: dev: url: http://dev.bar.com name: Developer Setup prod: url: http://foo.bar.com name: My Cool App 会被转化到这些属性： environments.dev.url=http://dev.bar.com environments.dev.name=Developer Setup environments.prod.url=http://foo.bar.com environments.prod.name=My Cool App YAML列表被表示成使用[index]间接引用作为属性keys的形式，例如下面的YAML： my: servers: - dev.bar.com - foo.bar.com 将会转化到这些属性: my.servers[0]=dev.bar.com my.servers[1]=foo.bar.com 使用Spring DataBinder 工具集绑定这些属性（这是@ConfigurationProperties 做的事）时，你需要确保目标bean有个 java.util.List 或 Set 类型的属性，并且需要提供一个setter或使用可变的值初始化它，比如，下面的代码将绑定上面的属性： @ConfigurationProperties(prefix=&quot;my&quot;) public class Config { private List&lt;String&gt; servers = new ArrayList&lt;String&gt;(); public List&lt;String&gt; getServers(){ return this.servers; } } ##在Spring环境中使用YAML暴露属性## YamlPropertySourceLoader类能够将YAML作为PropertySource导出到SprigEnvironment ，这允许你使用常用的 @Value注解配合占位符语法访问YAML属性。 ##Multi-profile YAML文档## 你可以在单个文件中定义多个特定配置（profile-specific）的YAML文档，并通过 spring.profiles 标示生效的文档，例如： server: address: 192.168.1.100 --- spring: profiles: development server: address: 127.0.0.1 --- spring: profiles: production server: address: 192.168.1.120 在以上例子中，如果 development profile被激活， server.address 属性将是 127.0.0.1 ；如果 development 和 production profiles没有启用，则该属性的值将是 192.168.1.100 。在应用上下文启动时，如果没有明确指定激活的profiles，则默认的profiles将生效。所以，在下面的文档中我们为 security.user.password 设置了一个值，该值只在”default” profile中有效： server: port: 8000 --- spring: profiles: default security: user: password: weak 然而，在这个示例中，由于没有关联任何profile，密码总是会设置，并且如果有必要的话可以在其他profiles中显式重置： server: port: 8000 security: user: password: weak 通过 ! 可以对 spring.profiles指定的profiles进行取反（negated，跟java中的 ! 作用一样），如果negated和non-negated profiles都指定一个单一文件，至少需要匹配一个non-negated profile，可能不会匹配任何negated profiles。 ##YAML缺点## YAML文件不能通过 @PropertySource 注解加载，如果需要使用该方式，那就必须使用properties文件。 ##合并YAML列表## 正如上面看到的，所有YAML最终都转换为properties，在通过一个profile覆盖”list”属性时这个过程可能不够直观（counter intuitive）。例如，假设有一个 MyPojo 对象，默认它的 name 和 description 属性都为 null ，下面我们将从 FooProperties 暴露一个 MyPojo 对象列表（list）： @ConfigurationProperties(&quot;foo&quot;) public class FooProperties { private final List&lt;MyPojo&gt; list = new ArrayList&lt;&gt;(); public List&lt;MyPojo&gt; getList() { return this.list; } } 考虑如下配置： foo: list: - name: my name description: my description --- spring: profiles: dev foo: list: - name: my another name 如果 dev profile没有激活， FooProperties.list 将包括一个如上述定义的 MyPojo 实体，即使 dev 生效，该 list 仍旧只包含一个实体（ name 值为 my another name ，description 值为 null ）。此配置不会向该列表添加第二个 MyPojo 实例，也不会对该项进行合并。当一个集合定义在多个profiles时，只使用优先级最高的： foo: list: - name: my name description: my description - name: another name description: another description --- spring: profiles: dev foo: list: - name: my another name 在以上示例中，如果 dev profile激活， FooProperties.list将包含一个 MyPojo 实体（ name 值为 my another name ， description 值为 null ）。","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://www.zhz.gift/tags/SpringBoot/"},{"name":"YAML","slug":"YAML","permalink":"http://www.zhz.gift/tags/YAML/"}]},{"title":"第三方配置","slug":"第三方配置","date":"2017-12-16T16:07:42.000Z","updated":"2017-12-17T12:12:37.019Z","comments":true,"path":"2017/12/17/第三方配置/","link":"","permalink":"http://www.zhz.gift/2017/12/17/第三方配置/","excerpt":"第三方配置","text":"第三方配置 @ConfigurationProperties 不仅可以注解在类上，也可以注解在public @Bean 方法上，当你需要为不受控的第三方组件绑定属性时，该方法将非常有用。为了从 Environment属性中配置一个bean，你需要使用@ConfigurationProperties 注解该bean： @ConfigurationProperties(prefix = &quot;foo&quot;) @Bean public FooComponent fooComponent() { ... } 和上面 ConnectionSettings 的示例方式相同，所有以foo为前缀的属性定义都会被映射到 FooComponent 上。 ##Relaxed绑定## Spring Boot将 Environment 属性绑定到 @ConfigurationProperties beans时会使用一些宽松的规则，所以 Environment属性名和bean属性名不需要精确匹配。常见的示例中有用的包括虚线分割（比如， context-path 绑定到 contextPath ），将environment属性转为大写字母（比如， PORT 绑定 port ）。例如，给定以下 @ConfigurationProperties 类： @ConfigurationProperties(prefix=&quot;person&quot;) public class OwnerProperties { private String firstName; public String getFirstName() { return this.firstName; } public void setFirstName(String firstName) { this.firstName = firstName; } } 下面的属性名都能使用： 属性 说明 person.firstName 标准驼峰规则 person.first-name 虚线表示，推荐用于 .properties 和 .yml文件中 person.first_name 下划线表示，用于 .properties 和 .yml 文件的可选格式 PERSON_FIRST_NAME 大写形式，使用系统环境变量时推荐 ##属性转换## 将外部应用配置绑定到 @ConfigurationProperties beans时，Spring会尝试将属性强制转换为正确的类型。如果需要自定义类型转换器，你可以提供一个ConversionService bean（bean id为 conversionService ），或自定义属性编辑器（通过 CustomEditorConfigurer bean），或自定义 Converters （bean定义时需要注解 @ConfigurationPropertiesBinding ）。 注 由于该bean在应用程序生命周期的早期就需要使用，所以确保限制你的 ConversionService使用的依赖。通常，在创建时期任何你需要的依赖可能都没完全初始化。 ##@ConfigurationProperties校验## Spring Boot将尝试校验外部配置，默认使用JSR-303（如果在classpath路径中），你只需要将JSR-303 javax.validation 约束注解添加到 @ConfigurationProperties 类上： @ConfigurationProperties(prefix=&quot;connection&quot;) public class ConnectionProperties { @NotNull private InetAddress remoteAddress; // ... getters and setters } 为了校验内嵌属性的值，你需要使用 @Valid 注解关联的字段以触发它的校验，例如： @ConfigurationProperties(prefix=&quot;connection&quot;) public class ConnectionProperties { @NotNull @Valid private RemoteAddress remoteAddress; // ... getters and setters public static class RemoteAddress { @NotEmpty public String hostname; // ... getters and setters } } 你也可以通过创建一个叫做 configurationPropertiesValidator 的bean来添加自定义的Spring Validator 。 @Bean 方法需要声明为 static ，因为配置属性校验器在应用程序生命周期中创建的比较早，将 @Bean 方法声明为 static 允许该bean在创建时不需要实例化 @Configuration 类，从而避免了早期实例化（early instantiation）的所有问题。相关的示例可以看这里。 注 spring-boot-actuator 模块包含一个暴露所有 @ConfigurationProperties beans的端点（endpoint），通过浏览器打开 /configprops 进行浏览，或使用等效的JMX端点，具体参考Production readyfeatures。 @ConfigurationProperties vs. @Value@Value 是Spring容器的一个核心特性，它没有提供跟type-safe ConfigurationProperties相同的特性。下面的表格总结了 @ConfigurationProperties 和 @Value 支持的特性： 特性 @ConfigurationProperties @Value Relaxed绑定 Yes No Meta-data支持 Yes No SpEL表达式 No Yes 如果你为自己的组件定义了一系列的配置keys，我们建议你将它们以@ConfigurationProperties 注解的POJO进行分组。由于 @Value 不支持relaxed绑定，所以如果你使用环境变量提供属性值的话，它就不是很好的选择。最后，尽管 @Value 可以写 SpEL表达式，但这些表达式不会处理来自Application属性文件的属性。","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://www.zhz.gift/tags/SpringBoot/"},{"name":"config","slug":"config","permalink":"http://www.zhz.gift/tags/config/"}]},{"title":"WEB环境下进行单元测试","slug":"WEB环境下进行单元测试","date":"2017-12-16T16:07:42.000Z","updated":"2017-12-17T12:11:06.369Z","comments":true,"path":"2017/12/17/WEB环境下进行单元测试/","link":"","permalink":"http://www.zhz.gift/2017/12/17/WEB环境下进行单元测试/","excerpt":"WEB环境下进行单元测试","text":"WEB环境下进行单元测试 SpringApplication 将尝试为你创建正确类型的 ApplicationContext ，默认情况下，根据你开发的是否为web应用决定使用 AnnotationConfigApplicationContext 或 AnnotationConfigEmbeddedWebApplicationContext 。用于确定是否为web环境的算法相当简单（判断是否存在某些类），你可以使用 setWebEnvironment(boolean webEnvironment) 覆盖默认行为。通过调用 setApplicationContextClass(…) ，你可以完全控制 ApplicationContext 的类型。注 在Junit测试中使用 SpringApplication ，调用 setWebEnvironment(false) 是很有意义的。","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://www.zhz.gift/tags/SpringBoot/"}]},{"title":"spring boot简介","slug":"spring-boot简介","date":"2017-12-02T14:22:54.000Z","updated":"2017-12-03T10:38:50.690Z","comments":true,"path":"2017/12/02/spring-boot简介/","link":"","permalink":"http://www.zhz.gift/2017/12/02/spring-boot简介/","excerpt":"spring boot spring boot 为所有spring框架开发者提供一种更加易于理解，更加便捷高效的开发方式；通过提供更为直观的spring平台和第三方依赖库，只需要极其少量的spring配置，便能部署运行spring boot应用。","text":"spring boot spring boot 为所有spring框架开发者提供一种更加易于理解，更加便捷高效的开发方式；通过提供更为直观的spring平台和第三方依赖库，只需要极其少量的spring配置，便能部署运行spring boot应用。 1.环境要求 Spring Boot 2.0.0.BUILD-SNAPSHOT 需要 Java 8 以及 Spring Framework 5.0.2.RELEASE 或者以上版本.当使用maven或者gradle构建spring boot时需要 Maven 3.2+ 或者 Gradle 4及其以上版本. 2.spring boot安装 2.1使用maven 构建spring boot应用 pom.xml配置: &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.example&lt;/groupId&gt; &lt;artifactId&gt;myproject&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;!-- Inherit defaults from Spring Boot --&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.0.0.BUILD-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;!-- Add typical dependencies for a web application --&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;!-- Package as an executable jar --&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; &lt;!-- Add Spring repositories --&gt; &lt;!-- (you don&apos;t need this if you are using a .RELEASE version) --&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;spring-snapshots&lt;/id&gt; &lt;url&gt;http://repo.spring.io/snapshot&lt;/url&gt; &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;spring-milestones&lt;/id&gt; &lt;url&gt;http://repo.spring.io/milestone&lt;/url&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;pluginRepositories&gt; &lt;pluginRepository&gt; &lt;id&gt;spring-snapshots&lt;/id&gt; &lt;url&gt;http://repo.spring.io/snapshot&lt;/url&gt; &lt;/pluginRepository&gt; &lt;pluginRepository&gt; &lt;id&gt;spring-milestones&lt;/id&gt; &lt;url&gt;http://repo.spring.io/milestone&lt;/url&gt; &lt;/pluginRepository&gt; &lt;/pluginRepositories&gt; &lt;/project&gt; 2.2安装Spring Boot CLI The Spring Boot CLI (Command Line Interface)是一个用于快速建立spring原型的命令行工具.通过它你能运行Groovy scripts,使用熟悉的类java语法。 使用CLI来运行spring boot不是必须的,但它是使spring应用运行起来的最快方法. 2.2.1 手动安装 你可以在spring 软件仓库下载Spring CLI spring-boot-cli-2.0.0.BUILD-SNAPSHOT-bin.zip spring-boot-cli-2.0.0.BUILD-SNAPSHOT-bin.tar.gz 2.2.2 通过SDKMAN安装 SDKMAN!(The Software Development Kit Manager)可以用来管理不同版本的二进制sdks,包括 Groovy和Spring Boot CLI.从sdkman.io获取SDKMAN!并且通过以下命令来安装Spring Boot $ sdk install springboot $ spring --version Spring Boot v2.0.0.BUILD-SNAPSHOT 上述的安装方式都会在本地建立一个名为dev的Spring实例,它指向你的安装路径,所以你每次重建Spring Boot时,spring 都会更新到最新. 你能通过以下命令看到它是如何进行的: $ sdk ls springboot ================================================================================ Available Springboot Versions ================================================================================ &gt; + dev * 2.0.0.BUILD-SNAPSHOT ================================================================================ + - local version * - installed &gt; - currently in use ================================================================================ 3.开发你首个Spring Boot 应用 这个章节描述了如何区开发一个\\”五脏俱全\\”的Spring Boot \\”Hello World!\\”应用.我们使用Maven来构建这个项目,因为大部分IDES都支持它. spring.ioweb网站包含很多”Getting Started”的spring boot教程,如果你需要解决一些特定的问题,首先查看这里. 开始之前首先检查jdk版本和maven版本是否满足要求 java -version mvn -v pom.xml 配置如下: &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.example&lt;/groupId&gt; &lt;artifactId&gt;myproject&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.0.0.BUILD-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;!-- Additional lines to be added here... --&gt; &lt;!-- (you don&apos;t need this if you are using a .RELEASE version) --&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;spring-snapshots&lt;/id&gt; &lt;url&gt;http://repo.spring.io/snapshot&lt;/url&gt; &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;spring-milestones&lt;/id&gt; &lt;url&gt;http://repo.spring.io/milestone&lt;/url&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;pluginRepositories&gt; &lt;pluginRepository&gt; &lt;id&gt;spring-snapshots&lt;/id&gt; &lt;url&gt;http://repo.spring.io/snapshot&lt;/url&gt; &lt;/pluginRepository&gt; &lt;pluginRepository&gt; &lt;id&gt;spring-milestones&lt;/id&gt; &lt;url&gt;http://repo.spring.io/milestone&lt;/url&gt; &lt;/pluginRepository&gt; &lt;/pluginRepositories&gt; &lt;/project&gt; 3.2 Spring Boot提供了大量的”Starters”开始器使你能在classpath路径添加jars.我们普通的例子应用已经在POM的父节点使用 spring-boot-starter-parent . spring-boot-starter-parent是一个提供了众多有用Maven默认配置的特殊启动器.它同样提供了dependency-management配置使你能够为一些dependencies依赖省略 version 配置. 但你开发其它特殊类型的应用时可能需要使用到其它启动器(Starters),例如,当我们开发一个web应用时,我们添加spring-boot-starter-web 依赖.在那之前,我们可以通过以下命令查看依赖树: mvn dependency:tree 通过mvn dependency:tree命令我们可以查看项目的依赖树结构,你可以看到 spring-boot-starter-parent 本身没有提供其它依赖.通过编辑pom.xml添加必要的依赖 org.springframework.boot spring-boot-starter-web 如果你再次运行 mvn dependency:tree 命令,你就能看到一系列新添加的依赖,包括tomcat 服务器以及spring boot本身. 3.3 代码编写 为了完成应用，我们首先需要创建一个java文件.在src/main/java下创建Example.java文件并添加以下代码: import org.springframework.boot.*; import org.springframework.boot.autoconfigure.*; import org.springframework.web.bind.annotation.*; @RestController @EnableAutoConfiguration public class Example { @RequestMapping(&quot;/&quot;) String home() { return &quot;Hello World!&quot;; } public static void main(String[] args) throws Exception { SpringApplication.run(Example.class, args); } } 3.3.1 @RestController 和 @RequestMapping 注解","categories":[],"tags":[{"name":"spring","slug":"spring","permalink":"http://www.zhz.gift/tags/spring/"},{"name":"框架","slug":"框架","permalink":"http://www.zhz.gift/tags/框架/"}]},{"title":"快速排序","slug":"快速排序","date":"2017-12-01T16:24:16.000Z","updated":"2017-12-01T16:24:49.088Z","comments":true,"path":"2017/12/02/快速排序/","link":"","permalink":"http://www.zhz.gift/2017/12/02/快速排序/","excerpt":"快速排序 堆排序是指利用堆这种数据结构所设计的一种排序算法.堆是一种特殊的二叉树,每个子节点的值总是小于(或大于)它的父节点,相应的分为最大堆或最小堆,通过最大堆或最小堆不断输出堆顶元素,直到全部元素都已输出,得到的输出元素序列即为有序序列.","text":"快速排序 堆排序是指利用堆这种数据结构所设计的一种排序算法.堆是一种特殊的二叉树,每个子节点的值总是小于(或大于)它的父节点,相应的分为最大堆或最小堆,通过最大堆或最小堆不断输出堆顶元素,直到全部元素都已输出,得到的输出元素序列即为有序序列.","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://www.zhz.gift/tags/java/"},{"name":"算法","slug":"算法","permalink":"http://www.zhz.gift/tags/算法/"}]},{"title":"堆排序","slug":"堆排序","date":"2017-11-30T16:07:42.000Z","updated":"2017-11-30T16:53:14.523Z","comments":true,"path":"2017/12/01/堆排序/","link":"","permalink":"http://www.zhz.gift/2017/12/01/堆排序/","excerpt":"堆排序 堆排序是指利用堆这种数据结构所设计的一种排序算法.堆是一种特殊的二叉树,每个子节点的值总是小于(或大于)它的父节点,相应的分为最大堆或最小堆,通过最大堆或最小堆不断输出堆顶元素,直到全部元素都已输出,得到的输出元素序列即为有序序列.","text":"堆排序 堆排序是指利用堆这种数据结构所设计的一种排序算法.堆是一种特殊的二叉树,每个子节点的值总是小于(或大于)它的父节点,相应的分为最大堆或最小堆,通过最大堆或最小堆不断输出堆顶元素,直到全部元素都已输出,得到的输出元素序列即为有序序列. import java.util.Arrays; public class HeapSort3 { public static void main(String[] args){ int[] test = new int[]{8,11,3,6,23,14,18,7,55,34}; System.out.println(&quot;初始数组:&quot; + Arrays.toString(test)); HeapSort3.heapSort(test); System.out.println(Arrays.toString(test)); } public static int leftChild(int child){ return child * 2 + 1; } public static void precDown(int[] a,int i,int n){ int child; int temp; for(temp = a[i];leftChild(i) &lt; n;i = child){ child = leftChild(i); if(i != n - 1 &amp;&amp; a[child] &lt; a[child + 1]){ child++; } if(a[i] &lt; a[child]){ a[i] = a[child]; } } a[i] = temp; } public static void swapReferences(int[] a,int index){ int temp = a[0]; a[0] = a[index]; a[index] = temp; } public static void heapSort(int[] a){ for(int i = a.length / 2;i &gt; 0;i--){ precDown(a,i,a.length - 1); } System.out.println(&quot;max二叉堆构建完毕:&quot; + Arrays.toString(a)); for(int k = a.length - 1;k &gt; 0;k--){ swapReferences(a,k); precDown(a,0,k); } } } 最差时间复杂度:O(N*logN),平均时间复杂度O(N*logN),空间复杂度:O(1),不稳定算法","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://www.zhz.gift/tags/java/"},{"name":"算法","slug":"算法","permalink":"http://www.zhz.gift/tags/算法/"}]},{"title":"归并排序","slug":"归并排序","date":"2017-11-20T16:15:34.000Z","updated":"2017-11-20T16:32:40.377Z","comments":true,"path":"2017/11/21/归并排序/","link":"","permalink":"http://www.zhz.gift/2017/11/21/归并排序/","excerpt":"归并排序 将一个无序序列进行折半递归,直到得到单个元素的有序序列,然后递归的将折半后左右两边的有序序列依次进行合并,最终得到有序序列.","text":"归并排序 将一个无序序列进行折半递归,直到得到单个元素的有序序列,然后递归的将折半后左右两边的有序序列依次进行合并,最终得到有序序列. import java.util.Arrays; public class MergeSort { public static void main(String[] args){ int[] a = new int[]{11,2,5,15,23,44,24,8}; mergeSort(a); System.out.println(Arrays.toString(a)); } private static void mergeSort(int[] a,int[] tmpArray,int left,int right){ if(left &lt; right){ int center = (left + right) / 2; mergeSort(a,tmpArray,left,center); mergeSort(a,tmpArray,center + 1,right); merge(a,tmpArray,left,center + 1,right); } System.out.println(&quot;left:&quot; + left + &quot;,right:&quot; + right); } public static void mergeSort(int[] a){ int[] tmpArray = new int[a.length]; mergeSort(a,tmpArray,0,a.length - 1); } private static void merge(int[] a,int[] tmpArray,int leftPos,int rightPos,int rightEnd){ System.out.println(&quot;leftPos:&quot; + leftPos + &quot;,rightPos:&quot; + rightPos + &quot;,rightEnd:&quot; + rightEnd); int leftEnd = rightPos - 1; int tmpPos = leftPos; int numElements = rightEnd - leftPos + 1; //Main loop while(leftPos &lt;= leftEnd &amp;&amp; rightPos &lt;= rightEnd){ if(a[leftPos] &lt; a[rightPos]){ tmpArray[tmpPos++] = a[leftPos++]; }else{ tmpArray[tmpPos++] = a[rightPos++]; } } while(leftPos &lt;= leftEnd){ tmpArray[tmpPos++] = a[leftPos++]; } while(rightPos &lt;= rightEnd){ tmpArray[tmpPos++] = a[rightPos++]; } for(int i = 0;i &lt; numElements;i++,rightEnd--){ a[rightEnd] = tmpArray[rightEnd]; } } } 最差时间复杂度:O(N^2) 平均时间复杂度O(N*logN) 空间复杂度:O(N) 稳定算法","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://www.zhz.gift/tags/java/"},{"name":"算法","slug":"算法","permalink":"http://www.zhz.gift/tags/算法/"}]},{"title":"希尔排序","slug":"希尔排序","date":"2017-11-20T15:57:35.000Z","updated":"2017-11-20T16:14:06.358Z","comments":true,"path":"2017/11/20/希尔排序/","link":"","permalink":"http://www.zhz.gift/2017/11/20/希尔排序/","excerpt":"希尔排序 希尔排序(ShellSort)的名称源于它的发明者Donald Shell.它通过比较相距一定间隔(h[k])的元素来工作,各躺比较所用的距离随着算法的进行而减小(h[k-1]),直到只比较相邻元素的最后一趟排序为止,因此希尔排序也称为缩减增量排序.希尔排序所使用的增量序列只要h[1]=1,任何增量序列都是可行的,但其时间复杂度会有所不同.","text":"希尔排序 希尔排序(ShellSort)的名称源于它的发明者Donald Shell.它通过比较相距一定间隔(h[k])的元素来工作,各躺比较所用的距离随着算法的进行而减小(h[k-1]),直到只比较相邻元素的最后一趟排序为止,因此希尔排序也称为缩减增量排序.希尔排序所使用的增量序列只要h[1]=1,任何增量序列都是可行的,但其时间复杂度会有所不同. import java.util.*; public class Test { public static void main(String[] args){ int[] test = new int[]{11,3,8,25,22}; Test.shellSort(test); } /** * 希尔排序,使用ht=N/2 hk=h(k+1)/2的增量序列 * @param a */ public static void shellSort(int[] a){ int hk; int j; for(hk = a.length / 2;hk &gt; 0 ;hk /= 2){ for(int k = hk;k &lt; a.length;k++){ int temp = a[k]; for(j = k;j &gt;= hk &amp;&amp; a[j - hk] &gt; temp;j -= hk){ a[j] = a[j- hk]; } a[j] = temp; } } System.out.println(Arrays.toString(a)); } } 不稳定算法 空间复杂度O(1)","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://www.zhz.gift/tags/java/"},{"name":"算法","slug":"算法","permalink":"http://www.zhz.gift/tags/算法/"}]},{"title":"插入排序","slug":"插入排序","date":"2017-11-20T15:52:15.000Z","updated":"2017-11-20T15:57:39.472Z","comments":true,"path":"2017/11/20/插入排序/","link":"","permalink":"http://www.zhz.gift/2017/11/20/插入排序/","excerpt":"插入排序 插入排序由N-1趟排序组成,对于p=1到N-1趟,插入排序保证从位置0到位置p上的元素为已排序状态.","text":"插入排序 插入排序由N-1趟排序组成,对于p=1到N-1趟,插入排序保证从位置0到位置p上的元素为已排序状态. import java.util.Arrays; public class InsertSort2 { public static void main(String[] args){ int[] a = new int[]{11,3,6,22,15}; sort(a); System.out.println(Arrays.toString(a)); } //插入排序： //将无序的元素插入到有序的元素序列中，插入后仍然有序 public static void sort(int[] a){ int k; for(int p = 1;p &lt; a.length;p++){ int temp = a[p]; for(k = p;k &gt; 0 &amp;&amp; a[k- 1] &gt; temp;k--){ a[k] = a[k- 1]; } a[k] = temp; } } } 最差时间复杂度:O(n^2) 平均时间复杂度O(n^2) 空间复杂度:O(1) 稳定算法","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://www.zhz.gift/tags/java/"},{"name":"算法","slug":"算法","permalink":"http://www.zhz.gift/tags/算法/"}]},{"title":"冒泡排序","slug":"冒泡排序","date":"2017-11-20T15:14:53.000Z","updated":"2017-11-20T15:51:10.068Z","comments":true,"path":"2017/11/20/冒泡排序/","link":"","permalink":"http://www.zhz.gift/2017/11/20/冒泡排序/","excerpt":"冒泡排序","text":"冒泡排序 import java.util.Arrays; public class MTest { //冒泡排序： //比较相邻元素，直到序列变为有序为止 public static void main(String[] args){ int[] a = new int[]{7,2,8,11,3,5,4}; //int[] a = new int[]{1,2,3,4,5,6}; for(int i = 0;i &lt; a.length - 1;i++){ boolean flag =false; for(int k = 0;k &lt; a.length - 1 -i;k++){ if(a[k] &gt; a[k + 1]){ int temp = a[k]; a[k] = a[k + 1]; a[k + 1] = temp; flag = true; } } if(!flag){ break; } } System.out.println(Arrays.toString(a)); } } 每次循环对每对相邻元素依次进行比较,比较过后最后的元素也是最大的元素,重复n-1次即可得到有序序列最差时间复杂度:O(n^2) 平均时间复杂度O(n^2) 空间复杂度:O(1) 稳定算法","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://www.zhz.gift/tags/java/"},{"name":"算法","slug":"算法","permalink":"http://www.zhz.gift/tags/算法/"}]}]}